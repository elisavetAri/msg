{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:tabular/client/main.js","meteor://ðŸ’»app/packages/aldeed:tabular/client/getPubSelector.js","meteor://ðŸ’»app/packages/aldeed:tabular/client/tableInit.js","meteor://ðŸ’»app/packages/aldeed:tabular/client/util.js","meteor://ðŸ’»app/packages/aldeed:tabular/common/Tabular.js"],"names":["$","module","link","v","dataTableInit","Mongo","Template","Tabular","tableInit","getPubSelector","getMongoSort","objectsAreEqual","sortsAreEqual","window","registerHelper","tablesByName","tableRecords","Collection","remoteTableRecords","getTableRecordsCollection","connection","_connection","remote","_","find","push","getRecord","name","collection","findOne","tabular","helpers","atts","omit","onRendered","template","$tableElement","table","resetTablePaging","data","pubSelector","ReactiveVar","skip","limit","sort","columns","fields","searchFields","searchCaseInsensitive","splitSearchByWhitespace","tableName","options","docPub","ready","recordsTotal","recordsFiltered","isLoading","ajaxOptions","serverSide","processing","ajax","callback","set","start","Session","get","hardLimit","length","undefined","console","warn","order","selector","search","value","draw","initComplete","onEnterOnly","replaceSearchLabel","newText","contents","filter","nodeType","textContent","trim","replaceWith","unbind","bind","event","keyCode","headerCallback","headerRow","each","index","headerCell","titleFunction","titleFn","innerHTML","__blazeViewInstance","Blaze","remove","view","View","render","lastTableName","autorun","currentData","tabularTable","tableDef","Table","Error","reload","lastTableDef","onUnload","caseInsensitive","smart","pub","onReady","context","Meteor","subscribe","tableInfo","isEmpty","extraFields","extend","clone","sub","ids","c","userOptions","firstRun","displayStart","Tracker","nonreactive","dt","DataTable","destroy","empty","buttonContainer","container","buttons","appendTo","findOptions","cursor","_id","$in","count","fetch","show","hide","on","onDestroyed","exportDefault","searchString","tableColumns","searchColumns","column","map","field","createMongoSearchQuery","searches","findWhere","exactSearch","exact","numberSearch","isNumber","searchValue","match","searchTerm","m1","searchTermAsNumber","Number","isNaN","searchObj","$regex","$options","result","$and","$or","cleanFieldName","cleanFieldNameForSearch","templateColumnOptions","defaultContent","searchAndOrderOptions","searchable","title","toHTML","tmpl","tmplContext","createdCell","cell","cellData","rowData","renderWithData","type","indexOf","orderable","export","dot","slice","split","replace","oldVal","newVal","areSame","isArray","every","innerArray","i","JSON","stringify","colIndex","dir","propName","constructor","allow","allowFields","changeSelector","throttleRefresh","alternativeCount","skipCount","fieldName"],"mappings":"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","file":"/packages/aldeed_tabular.js","sourcesContent":["/* global _, Template, Tabular, Tracker, ReactiveVar, Session, Meteor, */\nimport { $ } from 'meteor/jquery';\nimport dataTableInit from 'datatables.net';\nimport { Mongo } from 'meteor/mongo';\nimport { Template } from 'meteor/templating';\nimport Tabular from '../common/Tabular';\nimport tableInit from './tableInit';\nimport getPubSelector from './getPubSelector';\nimport { getMongoSort, objectsAreEqual, sortsAreEqual } from './util';\n\nimport './tabular.html';\n\ndataTableInit(window, $);\n\nTemplate.registerHelper('TabularTables', Tabular.tablesByName);\n\nTabular.tableRecords = new Mongo.Collection('tabular_records');\nTabular.remoteTableRecords = [];\n\nTabular.getTableRecordsCollection = function (connection) {\n  if (!connection || connection === Tabular.tableRecords._connection) return Tabular.tableRecords;\n\n  let remote = _.find(Tabular.remoteTableRecords, remote => remote.connection === connection);\n  if (!remote) {\n    remote = {\n      connection,\n      tableRecords: new Mongo.Collection('tabular_records', { connection }),\n    };\n    Tabular.remoteTableRecords.push(remote);\n  }\n  return remote.tableRecords;\n};\n\nTabular.getRecord = function (name, collection) {\n  return Tabular.getTableRecordsCollection(collection._connection).findOne(name);\n};\n\nTemplate.tabular.helpers({\n  atts() {\n    // We remove the \"table\" and \"selector\" attributes and assume the rest belong\n    // on the <table> element\n    return _.omit(this, 'table', 'selector');\n  }\n});\n\nTemplate.tabular.onRendered(function () {\n  const template = this;\n  template.$tableElement = template.$('table');\n  let table;\n  let resetTablePaging = false;\n\n  template.tabular = {};\n  template.tabular.data = [];\n  template.tabular.pubSelector = new ReactiveVar({}, objectsAreEqual);\n  template.tabular.skip = new ReactiveVar(0);\n  template.tabular.limit = new ReactiveVar(10);\n  template.tabular.sort = new ReactiveVar(null, sortsAreEqual);\n  template.tabular.columns = null;\n  template.tabular.fields = null;\n  template.tabular.searchFields = null;\n  template.tabular.searchCaseInsensitive = true;\n  template.tabular.splitSearchByWhitespace = true;\n  template.tabular.tableName = new ReactiveVar(null);\n  template.tabular.options = new ReactiveVar({}, objectsAreEqual);\n  template.tabular.docPub = new ReactiveVar(null);\n  template.tabular.collection = new ReactiveVar(null);\n  template.tabular.connection = null;\n  template.tabular.ready = new ReactiveVar(false);\n  template.tabular.recordsTotal = 0;\n  template.tabular.recordsFiltered = 0;\n  template.tabular.isLoading = new ReactiveVar(true);\n\n  // These are some DataTables options that we need for everything to work.\n  // We add them to the options specified by the user.\n  const ajaxOptions = {\n    // tell DataTables that we're getting the table data from a server\n    serverSide: true,\n    processing: true,\n    // define the function that DataTables will call upon first load and whenever\n    // we tell it to reload data, such as when paging, etc.\n    ajax: function (data, callback/*, settings*/) {\n      // When DataTables requests data, first we set\n      // the new skip, limit, order, and pubSelector values\n      // that DataTables has requested. These trigger\n      // the first subscription, which will then trigger the\n      // second subscription.\n\n      //console.log('data', template.tabular.data);\n\n      // Update skip\n      template.tabular.skip.set(data.start);\n      Session.set('Tabular.LastSkip', data.start);\n\n      // Update limit\n      var options = template.tabular.options.get();\n      var hardLimit = options && options.limit;\n      if (data.length === -1) {\n        if (hardLimit === undefined) {\n          console.warn('When using no paging or an \"All\" option with tabular, it is best to also add a hard limit in your table options like {limit: 500}');\n          template.tabular.limit.set(null);\n        } else {\n          template.tabular.limit.set(hardLimit);\n        }\n      } else {\n        template.tabular.limit.set(data.length);\n      }\n\n      // Update sort\n      template.tabular.sort.set(getMongoSort(data.order, options.columns));\n\n      // Update pubSelector\n      const pubSelector = getPubSelector(\n        template.tabular.selector,\n        (data.search && data.search.value) || null,\n        template.tabular.searchFields,\n        template.tabular.searchCaseInsensitive,\n        template.tabular.splitSearchByWhitespace,\n        data.columns || null,\n        options.columns,\n      );\n      template.tabular.pubSelector.set(pubSelector);\n\n      // We're ready to subscribe to the data.\n      // Matters on the first run only.\n      template.tabular.ready.set(true);\n\n      //console.log('ajax');\n\n      callback({\n        draw: data.draw,\n        recordsTotal: template.tabular.recordsTotal,\n        recordsFiltered: template.tabular.recordsFiltered,\n        data: template.tabular.data\n      });\n\n    },\n    initComplete: function () {\n      var options = template.tabular.options.get();\n      if (options.search && options.search.onEnterOnly) {\n        var replaceSearchLabel = function(newText){\n          $('.dataTables_filter label').contents().filter(function() {\n            return this.nodeType === 3 && this.textContent.trim().length;\n          }).replaceWith(newText);\n        }\n        $('.dataTables_filter input')\n          .unbind()\n          .bind('keyup change', function (event) {\n            if (!table) return;\n            if (event.keyCode === 13 || this.value === '') {\n              replaceSearchLabel(\"Search:\");\n              table.search(this.value).draw();\n            }\n            else {\n              replaceSearchLabel(\"Search (hit enter):\");\n            }\n          });\n      }\n    },\n    headerCallback(headerRow) {\n      const options = template.tabular.options.get();\n      const columns = options.columns;\n\n      $(headerRow).find('td,th').each((index, headerCell) => {\n        const titleFunction = columns[index] && columns[index].titleFn;\n        if (typeof titleFunction === 'function') {\n          headerCell.innerHTML = '';\n          if (headerCell.__blazeViewInstance) {\n            Blaze.remove(headerCell.__blazeViewInstance);\n          }\n          const view = new Blaze.View(titleFunction);\n          headerCell.__blazeViewInstance = Blaze.render(view, headerCell);\n        }\n      });\n    }\n  };\n\n  // For testing\n  //setUpTestingAutoRunLogging(template);\n\n  // Reactively determine table columns, fields, and searchFields.\n  // This will rerun whenever the current template data changes.\n  var lastTableName;\n  template.autorun(function () {\n    var data = Template.currentData();\n\n    //console.log('currentData autorun', data);\n\n    if (!data) return;\n\n    // We get the current TabularTable instance, and cache it on the\n    // template instance for access elsewhere\n    var tabularTable = template.tabular.tableDef = data.table;\n\n    if (!(tabularTable instanceof Tabular.Table)) {\n      throw new Error(\"You must pass Tabular.Table instance as the table attribute\");\n    }\n\n    // Always update the selector reactively\n    template.tabular.selector = data.selector;\n\n    // The remaining stuff relates to changing the `table`\n    // attribute. If we didn't change it, we can stop here,\n    // but we need to reload the table if this is not the first\n    // run\n    if (tabularTable.name === lastTableName) {\n      if (table) {\n        // passing `false` as the second arg tells it to\n        // reset the paging\n        table.ajax.reload(null, true);\n      }\n      return;\n    }\n\n    // If we reactively changed the `table` attribute, run\n    // onUnload for the previous table\n    if (lastTableName !== undefined) {\n      var lastTableDef = Tabular.tablesByName[lastTableName];\n      if (lastTableDef && typeof lastTableDef.onUnload === 'function') {\n        lastTableDef.onUnload();\n      }\n    }\n\n    // Cache this table name as the last table name for next run\n    lastTableName = tabularTable.name;\n\n    // Figure out and update the columns, fields, and searchFields\n    const columns = tableInit(tabularTable, template);\n\n    // Set/update everything else\n    template.tabular.searchCaseInsensitive = true;\n    template.tabular.splitSearchByWhitespace = true;\n\n    if (tabularTable.options && tabularTable.options.search) {\n      if (tabularTable.options.search.caseInsensitive === false) {\n        template.tabular.searchCaseInsensitive = false;\n      }\n      if (tabularTable.options.search.smart === false) {\n        template.tabular.splitSearchByWhitespace = false;\n      }\n    }\n    template.tabular.options.set({\n      ...tabularTable.options,\n      columns,\n    });\n    template.tabular.tableName.set(tabularTable.name);\n    template.tabular.docPub.set(tabularTable.pub);\n    template.tabular.collection.set(tabularTable.collection);\n    if (tabularTable.collection && tabularTable.collection._connection) {\n      template.tabular.connection = tabularTable.collection._connection;\n    }\n\n    // userOptions rerun should do this?\n    if (table) {\n      // passing `true` as the second arg tells it to\n      // reset the paging\n      table.ajax.reload(null, true);\n    }\n  });\n\n  template.autorun(() => {\n    // these 5 are the parameters passed to \"tabular_getInfo\" subscription\n    // so when they *change*, set the isLoading flag to true\n    template.tabular.tableName.get();\n    template.tabular.pubSelector.get();\n    template.tabular.sort.get();\n    template.tabular.skip.get();\n    template.tabular.limit.get();\n    template.tabular.isLoading.set(true);\n  });\n\n  // First Subscription\n  // Subscribe to an array of _ids that should be on the\n  // current page of the table, plus some aggregate\n  // numbers that DataTables needs in order to show the paging.\n  // The server will reactively keep this info accurate.\n  // It's not necessary to call stop\n  // on subscriptions that are within autorun computations.\n  template.autorun(function () {\n    if (!template.tabular.ready.get()) return;\n\n    //console.log('tabular_getInfo autorun');\n\n    function onReady() {\n      template.tabular.isLoading.set(false);\n    }\n\n    var connection = template.tabular.connection;\n    var context = connection || Meteor;\n    context.subscribe(\n      \"tabular_getInfo\",\n      template.tabular.tableName.get(),\n      template.tabular.pubSelector.get(),\n      template.tabular.sort.get(),\n      template.tabular.skip.get(),\n      template.tabular.limit.get(),\n      onReady,\n    );\n  });\n\n  // Second Subscription\n  // Reactively subscribe to the documents with _ids given to us. Limit the\n  // fields to only those we need to display. It's not necessary to call stop\n  // on subscriptions that are within autorun computations.\n  template.autorun(function () {\n    // tableInfo is reactive and causes a rerun whenever the\n    // list of docs that should currently be in the table changes.\n    // It does not cause reruns based on the documents themselves\n    // changing.\n    var tableName = template.tabular.tableName.get();\n    var collection = template.tabular.collection.get();\n    var tableInfo = Tabular.getRecord(tableName, collection) || {};\n\n    //console.log('tableName and tableInfo autorun', tableName, tableInfo);\n\n    template.tabular.recordsTotal = tableInfo.recordsTotal || 0;\n    template.tabular.recordsFiltered = tableInfo.recordsFiltered || 0;\n\n    // In some cases, there is no point in subscribing to nothing\n    if (_.isEmpty(tableInfo) ||\n        template.tabular.recordsTotal === 0 ||\n        template.tabular.recordsFiltered === 0) {\n      return;\n    }\n\n    // Extend with extraFields from table definition\n    var fields = template.tabular.fields;\n    if (fields) {\n      // Extend with extraFields from table definition\n      if (typeof template.tabular.tableDef.extraFields === 'object') {\n        fields = _.extend(_.clone(fields), template.tabular.tableDef.extraFields);\n      }\n    }\n\n    template.tabular.tableDef.sub.subscribe(\n      template.tabular.docPub.get(),\n      tableName,\n      tableInfo.ids || [],\n      fields\n    );\n  });\n\n  // Build the table. We rerun this only when the table\n  // options specified by the user changes, which should be\n  // only when the `table` attribute changes reactively.\n  template.autorun(c => {\n    const userOptions = template.tabular.options.get();\n    const options = _.extend({}, ajaxOptions, userOptions);\n\n    //console.log('userOptions autorun', userOptions);\n\n    // unless the user provides her own displayStart,\n    // we use a value from Session. This keeps the\n    // same page selected after a hot code push.\n    if (c.firstRun && !('displayStart' in options)) {\n      options.displayStart = Tracker.nonreactive(function () {\n        return Session.get('Tabular.LastSkip');\n      });\n    }\n\n    if (!('order' in options)) options.order = [];\n\n    // After the first time, we need to destroy before rebuilding.\n    if (table) {\n      var dt = template.$tableElement.DataTable();\n      if (dt) dt.destroy();\n      template.$tableElement.empty();\n    }\n\n    // We start with an empty table.\n    // Data will be populated by ajax function now.\n    table = template.$tableElement.DataTable(options);\n\n    if (options.buttonContainer) {\n      const container = $(options.buttonContainer, table.table().container());\n      table.buttons().container().appendTo(container);\n    }\n  });\n\n  template.autorun(() => {\n    // Get table name non-reactively\n    var tableName = Tracker.nonreactive(function () {\n      return template.tabular.tableName.get();\n    });\n    // Get the collection that we're showing in the table non-reactively\n    var collection = Tracker.nonreactive(function () {\n      return template.tabular.collection.get();\n    });\n\n    // React when the requested list of records changes.\n    // This can happen for various reasons.\n    // * DataTables reran ajax due to sort changing.\n    // * DataTables reran ajax due to page changing.\n    // * DataTables reran ajax due to results-per-page changing.\n    // * DataTables reran ajax due to search terms changing.\n    // * `selector` attribute changed reactively\n    // * Docs were added/changed/removed by this user or\n    //   another user, causing visible result set to change.\n    var tableInfo = Tabular.getRecord(tableName, collection);\n\n    if (!collection || !tableInfo) return;\n\n    // Build options object to pass to `find`.\n    // It's important that we use the same options\n    // that were used in generating the list of `_id`s\n    // on the server.\n    var findOptions = {};\n    var fields = template.tabular.fields;\n    if (fields) {\n      // Extend with extraFields from table definition\n      if (typeof template.tabular.tableDef.extraFields === 'object') {\n        _.extend(fields, template.tabular.tableDef.extraFields);\n      }\n      findOptions.fields = fields;\n    }\n\n    // Sort does not need to be reactive here; using\n    // reactive sort would result in extra rerunning.\n    var sort = Tracker.nonreactive(function () {\n      return template.tabular.sort.get();\n    });\n    if (sort) {\n      findOptions.sort = sort;\n    }\n\n    // Get the updated list of docs we should be showing\n    var cursor = collection.find({_id: {$in: tableInfo.ids}}, findOptions);\n\n    //console.log('tableInfo, fields, sort, find autorun', cursor.count());\n\n    // We're subscribing to the docs just in time, so there's\n    // a good chance that they aren't all sent to the client yet.\n    // We'll stop here if we didn't find all the docs we asked for.\n    // This will rerun one or more times as the docs are received\n    // from the server, and eventually we'll have them all.\n    // Without this check in here, there's a lot of flashing in the\n    // table as rows are added.\n    if (cursor.count() < tableInfo.ids.length) return;\n\n    // Get data as array for DataTables to consume in the ajax function\n    template.tabular.data = cursor.fetch();\n\n    // For these types of reactive changes, we don't want to\n    // reset the page we're on, so we pass `false` as second arg.\n    // The exception is if we changed the results-per-page number,\n    // in which cases `resetTablePaging` will be `true` and we will do so.\n    if (table) {\n      if (resetTablePaging) {\n        table.ajax.reload(null, true);\n        resetTablePaging = false;\n      } else {\n        table.ajax.reload(null, false);\n      }\n    }\n\n    template.tabular.isLoading.set(false);\n  });\n\n  template.autorun(() => {\n    const isLoading = template.tabular.isLoading.get();\n    if (isLoading) {\n      template.$('.dataTables_processing').show();\n    } else {\n      template.$('.dataTables_processing').hide();\n    }\n  });\n\n  // force table paging to reset to first page when we change page length\n  template.$tableElement.on('length.dt', function () {\n    resetTablePaging = true;\n  });\n});\n\nTemplate.tabular.onDestroyed(function () {\n  // Clear last skip tracking\n  Session.set('Tabular.LastSkip', 0);\n  // Run a user-provided onUnload function\n  if (this.tabular &&\n      this.tabular.tableDef &&\n      typeof this.tabular.tableDef.onUnload === 'function') {\n    this.tabular.tableDef.onUnload();\n  }\n\n  // Destroy the DataTable instance to avoid memory leak\n  if (this.$tableElement.length) {\n    const dt = this.$tableElement.DataTable();\n    if (dt) dt.destroy();\n    this.$tableElement.empty();\n  }\n});\n\n//function setUpTestingAutoRunLogging(template) {\n//  template.autorun(function () {\n//    var val = template.tabular.tableName.get();\n//    console.log('tableName changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.pubSelector.get();\n//    console.log('pubSelector changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.sort.get();\n//    console.log('sort changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.skip.get();\n//    console.log('skip changed', val);\n//  });\n//\n//  template.autorun(function () {\n//    var val = template.tabular.limit.get();\n//    console.log('limit changed', val);\n//  });\n//}\n\nexport default Tabular;\n","import { _ } from 'meteor/underscore';\n\nfunction getPubSelector(\n    selector,\n    searchString,\n    searchFields,\n    searchCaseInsensitive,\n    splitSearchByWhitespace,\n    columns,\n    tableColumns,\n  ) {\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // if search was invoked via .columns().search(), build a query off that\n  // https://datatables.net/reference/api/columns().search()\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let searchColumns = _.filter(columns, column => {\n    return column.search && column.search.value !== '';\n  });\n\n  // required args\n  if ((!searchString && searchColumns.length === 0) || !searchFields || searchFields.length === 0) {\n    return selector;\n  }\n\n  if (searchColumns.length === 0) {\n    // normalize search fields array to mirror the structure\n    // as passed by the datatables ajax.data function\n    searchColumns = _.map(searchFields, field => {\n      return {\n        data: field,\n        search: {\n          value: searchString\n        }\n      };\n    });\n  }\n\n  return createMongoSearchQuery(\n    selector,\n    searchString,\n    searchColumns,\n    searchCaseInsensitive,\n    splitSearchByWhitespace,\n    columns,\n    tableColumns,\n  );\n}\n\nfunction createMongoSearchQuery(\n  selector,\n  searchString,\n  searchColumns,\n  searchCaseInsensitive,\n  splitSearchByWhitespace,\n  columns,\n  tableColumns,\n) {\n  // See if we can resolve the search string to a number,\n  // in which case we use an extra query because $regex\n  // matches string fields only.\n  const searches = [];\n\n  _.each(searchColumns, field => {\n    // Get the column options from the Tabular.Table so we can check search options\n    const column = _.findWhere(tableColumns, { data: field.data });\n    const exactSearch = column && column.search && column.search.exact;\n    const numberSearch = column && column.search && column.search.isNumber;\n\n    let searchValue = field.search.value || '';\n\n    // Split and OR by whitespace, as per default DataTables search behavior\n    if (splitSearchByWhitespace && !exactSearch) {\n      searchValue = searchValue.match(/\\S+/g);\n    } else {\n      searchValue = [searchValue];\n    }\n\n    _.each(searchValue, searchTerm => {\n      const m1 = {};\n\n      // String search\n      if (exactSearch) {\n        if (numberSearch) {\n          const searchTermAsNumber = Number(searchTerm);\n          if (!isNaN(searchTermAsNumber)) {\n            searches.push({ [field.data]: searchTermAsNumber });\n          } else {\n            searches.push({ [field.data]: searchTerm });\n          }\n        } else {\n          searches.push({ [field.data]: searchTerm });\n        }\n      } else {\n        const searchObj = { $regex: searchTerm };\n\n        // DataTables searches are case insensitive by default\n        if (searchCaseInsensitive !== false) searchObj.$options = 'i';\n\n        searches.push({ [field.data]: searchObj });\n\n        // For backwards compatibility, we do non-exact searches as a number, too,\n        // even if isNumber isn't true\n        const searchTermAsNumber = Number(searchTerm);\n        if (!isNaN(searchTermAsNumber)) {\n          searches.push({ [field.data]: searchTermAsNumber });\n        }\n      }\n    });\n  });\n\n  let result;\n  if (typeof selector === 'object' && selector !== null) {\n    result = {$and: [selector, {$or: searches}]};\n  } else if (searches.length > 1) {\n    result = {$or: searches};\n  } else {\n    result = searches[0] || {};\n  }\n\n  return result;\n}\n\nexport default getPubSelector;\n","import { Blaze } from 'meteor/blaze';\nimport { _ } from 'meteor/underscore';\nimport { cleanFieldName, cleanFieldNameForSearch } from './util';\n\n/**\n * Uses the Tabular.Table instance to get the columns, fields, and searchFields\n * @param {Tabular.Table} tabularTable The Tabular.Table instance\n * @param {Template}      template     The Template instance\n */\nfunction tableInit(tabularTable, template) {\n  const fields = {};\n  const searchFields = [];\n\n  // Loop through the provided columns object\n  let columns = tabularTable.options.columns || [];\n  columns = columns.map(column => {\n    let options = { ...column };\n\n    _.extend(options, templateColumnOptions(column));\n\n    // `templateColumnOptions` might have set defaultContent option. If not, we need it set\n    // to something to protect against errors from null and undefined values.\n    if (!options.defaultContent) {\n      options.defaultContent = column.defaultContent || '';\n    }\n\n    _.extend(options, searchAndOrderOptions(column));\n\n    // Build the list of field names we want included in the publication and in the searching\n    const data = column.data;\n    if (typeof data === 'string') {\n      fields[cleanFieldName(data)] = 1;\n\n      // DataTables says default value for col.searchable is `true`,\n      // so we will search on all columns that haven't been set to\n      // `false`.\n      if (options.searchable !== false) searchFields.push(cleanFieldNameForSearch(data));\n    }\n\n    // If `titleFn` option is provided, we set `title` option to the string\n    // result of that function. This is done for any extensions that might\n    // use the title, such as the colvis button. However `Blaze.toHTML` is\n    // not reactive, so in the `headerCallback` in main.js, we will set the\n    // actual column header with Blaze.render so that it is reactive.\n    const titleFunction = options.titleFn;\n    if (typeof titleFunction === 'function') {\n      options.title = Blaze.toHTML(new Blaze.View(titleFunction));\n    }\n\n    return options;\n  });\n\n  template.tabular.columns = columns;\n  template.tabular.fields = fields;\n  template.tabular.searchFields = searchFields;\n\n  return columns;\n};\n\n// The `tmpl` column option is special for this package. We parse it into other column options\n// and then remove it.\nfunction templateColumnOptions({ data, render, tmpl, tmplContext }) {\n  if (!tmpl) return {};\n\n  const options = {};\n\n  // Cell should be initially blank\n  options.defaultContent = '';\n\n  // When the cell is created, render its content from\n  // the provided template with row data.\n  options.createdCell = (cell, cellData, rowData) => {\n    // Allow the table to adjust the template context if desired\n    if (typeof tmplContext === 'function') {\n      rowData = tmplContext(rowData);\n    }\n\n    Blaze.renderWithData(tmpl, rowData, cell);\n  };\n\n  // If we're displaying a template for this field and we've also provided data, we want to\n  // pass the data prop along to DataTables to enable sorting and filtering.\n  // However, DataTables will then add that data to the displayed cell, which we don't want since\n  // we're rendering a template there with Blaze. We can prevent this issue by having the \"render\"\n  // function return an empty string for display content.\n  if (data && !render) {\n    options.render = (data, type) => (type === 'display') ? '' : data;\n  }\n\n  return options;\n}\n\n// If it's referencing an instance function, don't\n// include it. Prevent sorting and searching because\n// our pub function won't be able to do it.\nfunction searchAndOrderOptions(column) {\n  const data = column.data;\n  if (typeof data === 'string' && data.indexOf('()') !== -1) {\n    return { orderable: false, searchable: false };\n  }\n  // If there's a Blaze template but not data, then we shouldn't try to allow sorting. It won't work\n  if (column.tmpl && !data) {\n    return { orderable: false, searchable: column.searchable };\n  }\n  return { orderable: column.orderable, searchable: column.searchable };\n}\n\nexport default tableInit;\n","import { _ } from 'meteor/underscore';\n\nexport function cleanFieldName(field) {\n  // for field names with a dot, we just need\n  // the top level field name\n  const dot = field.indexOf('.');\n  if (dot !== -1) field = field.slice(0, dot);\n\n  // If it's referencing an array, strip off the brackets\n  field = field.split('[')[0];\n\n  return field;\n}\n\nexport function cleanFieldNameForSearch(field) {\n  // Check if object has [\"foo\"]\n  if (field.indexOf('\\\"') !== -1) {\n    console.warn(`The column data value '${field}' contains a \" character and will not be properly parsed for enabling search`);\n  }\n  // If it's referencing an array, replace the brackets\n  // This will only work with an object which doesn't have [\"foo\"]\n  return field.replace(/\\[\\w+\\]/, \"\");\n}\n\nexport function sortsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  var areSame = false;\n  if (_.isArray(oldVal) && _.isArray(newVal) && oldVal.length === newVal.length) {\n    areSame = _.every(newVal, function (innerArray, i) {\n      return innerArray[0] === oldVal[i][0] && innerArray[1] === oldVal[i][1];\n    });\n  }\n  return areSame;\n}\n\nexport function objectsAreEqual(oldVal, newVal) {\n  if (oldVal === newVal) return true;\n  return JSON.stringify(oldVal) === JSON.stringify(newVal);\n}\n\n// Take the DataTables `order` format and column info\n// and convert it into a mongo sort array.\nexport function getMongoSort(order, columns) {\n  if (!order || !columns) return;\n\n  // TODO support the nested arrays format for sort\n  // and ignore instance functions like \"foo()\"\n  const sort = [];\n  _.each(order, ({ column: colIndex, dir }) => {\n    const column = columns[colIndex];\n\n    // Sometimes when swapping out new table columns/collection, this will be called once\n    // with the old `order` object but the new `columns`. We protect against that here.\n    if (!column) return;\n\n    const propName = column.data;\n    const orderable = column.orderable;\n    if (typeof propName === 'string' && orderable !== false) {\n      sort.push([propName, dir]);\n    }\n  });\n  return sort;\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nconst Tabular = {};\n\nTabular.tablesByName = {};\n\nTabular.Table = class {\n  constructor(options) {\n    if (!options) throw new Error('Tabular.Table options argument is required');\n    if (!options.name) throw new Error('Tabular.Table options must specify name');\n    if (!options.columns) throw new Error('Tabular.Table options must specify columns');\n    if (!(options.collection instanceof Mongo.Collection\n      || options.collection instanceof Mongo.constructor // Fix: error if `collection: Meteor.users`\n    )) {\n      throw new Error('Tabular.Table options must specify collection');\n    }\n\n    this.name = options.name;\n    this.collection = options.collection;\n\n    this.pub = options.pub || 'tabular_genericPub';\n\n    // By default we use core `Meteor.subscribe`, but you can pass\n    // a subscription manager like `sub: new SubsManager({cacheLimit: 20, expireIn: 3})`\n    this.sub = options.sub || Meteor;\n\n    this.onUnload = options.onUnload;\n    this.allow = options.allow;\n    this.allowFields = options.allowFields;\n    this.changeSelector = options.changeSelector;\n    this.throttleRefresh = options.throttleRefresh;\n    this.alternativeCount = options.alternativeCount;\n    this.skipCount = options.skipCount;\n\n    if (_.isArray(options.extraFields)) {\n      const fields = {};\n      _.each(options.extraFields, fieldName => {\n        fields[fieldName] = 1;\n      });\n      this.extraFields = fields;\n    }\n\n    this.selector = options.selector;\n\n    this.options = _.omit(\n      options,\n      'collection',\n      'pub',\n      'sub',\n      'onUnload',\n      'allow',\n      'allowFields',\n      'changeSelector',\n      'throttleRefresh',\n      'extraFields',\n      'alternativeCount',\n      'skipCount',\n      'name',\n      'selector'\n    );\n\n    Tabular.tablesByName[this.name] = this;\n  }\n}\n\nexport default Tabular;\n"]}