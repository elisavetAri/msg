{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\components\\dynamicTableGroup\\dynamicTableGroup.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/znewsham:dynamic-table/client/ui/components/dynamicTableGroup/dynamicTableGroup.js","filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\components\\dynamicTableGroup\\dynamicTableGroup.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\components\\dynamicTableGroup\\dynamicTableGroup.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/znewsham:dynamic-table/client/ui/components/dynamicTableGroup/dynamicTableGroup.js"}},"code":"let ReactiveDict;\nmodule.link(\"meteor/reactive-dict\", {\n  ReactiveDict(v) {\n    ReactiveDict = v;\n  }\n\n}, 0);\nmodule.link(\"./dynamicTableGroup.html\");\nmodule.link(\"./dynamicTableGroup.css\");\nlet getGroupedInfoCollection, getDistinctValuesCollection;\nmodule.link(\"../../../db.js\", {\n  getGroupedInfoCollection(v) {\n    getGroupedInfoCollection = v;\n  },\n\n  getDistinctValuesCollection(v) {\n    getDistinctValuesCollection = v;\n  }\n\n}, 1);\nlet changed, getCustom, getValue;\nmodule.link(\"../../../inlineSave.js\", {\n  changed(v) {\n    changed = v;\n  },\n\n  getCustom(v) {\n    getCustom = v;\n  },\n\n  getValue(v) {\n    getValue = v;\n  }\n\n}, 2);\n\nfunction selectorToId(selector, tableIdSuffix) {\n  if (tableIdSuffix) {\n    return tableIdSuffix;\n  }\n\n  return JSON.stringify(selector).replace(/[^\\d\\w]/g, \"\");\n}\n/** @this = root data context */\n\n\nfunction getTableIdSuffix(value) {\n  const current = this.groupChain[this.index];\n  const selector = {};\n\n  if (value && value.query.$nor) {\n    selector.$and = [value.query];\n  } else if (value) {\n    selector[current.field] = value.query;\n  }\n\n  const nextSuffix = value && selectorToId(selector, value.tableIdSuffix);\n  const nextParts = (this.tableIdSuffixChain || []).slice(0);\n\n  if (nextSuffix) {\n    nextParts.push(nextSuffix);\n  }\n\n  return nextParts.join(\"\");\n}\n/** @this = template instance */\n\n\nfunction getCount(value, selector) {\n  const tableId = this.data.customTableSpec.id + getTableIdSuffix.call(this.data, value);\n  let count = value.count;\n\n  if (_.isFunction(value.count)) {\n    count = value.count(tableId, selector);\n  }\n\n  this.counts.set(tableId, count);\n}\n\nTemplate.dynamicTableGroup.events({\n  \"click .dynamic-table-header\"(e, templInstance) {\n    e.stopImmediatePropagation(); // QUESTION: why is this required? Without it this event handler gets called multiple times\n\n    const index = parseInt($(e.currentTarget).data(\"index\"), 10);\n    let open = false;\n\n    if (templInstance.enabled.get(index)) {\n      open = false;\n    } else {\n      open = true;\n      templInstance.stickyEnabled.set(index, true);\n    }\n\n    templInstance.enabled.set(index, open);\n    const values = templInstance.values.get();\n    const tableId = templInstance.data.customTableSpec.id + getTableIdSuffix.call(this, values[index]);\n    changed(templInstance.data.customTableSpec.custom, tableId, {\n      changeOpenGroups: {\n        [tableId]: open\n      }\n    });\n  }\n\n});\nTemplate.dynamicTableGroup.onRendered(function onRendered() {\n  this.autorun(() => {\n    const values = this.values.get();\n    const custom = this.custom.get();\n    Tracker.afterFlush(() => {\n      if (custom) {\n        values.forEach((value, index) => {\n          const tableId = this.data.customTableSpec.id + getTableIdSuffix.call(this.data, value);\n\n          if (custom.openGroups && custom.openGroups.includes(tableId)) {\n            this.stickyEnabled.set(index, true);\n            this.enabled.set(index, true);\n          }\n        });\n      }\n    });\n  });\n});\n\nfunction addUndefined(current, values) {\n  const queries = values.map(v => v.query);\n  let negation;\n\n  if (queries.length && _.isObject(queries[0])) {\n    negation = {\n      $nor: queries.map(q => ({\n        [current.field]: q\n      }))\n    };\n  } else {\n    negation = {\n      $not: {\n        $in: queries\n      }\n    };\n  }\n\n  if (_.isObject(current.undefined)) {\n    values.push({\n      label: current.undefined.label || \"Uncategorized\",\n      query: current.undefined.query || negation,\n      count: current.undefined.count === undefined ? current.count : current.undefined.count,\n      alwaysShow: current.undefined.alwaysShow || current.alwaysShow\n    });\n  } else if (current.undefined) {\n    values.push({\n      label: current.undefined === true ? \"Uncategorized\" : current.undefined,\n      query: negation,\n      count: current.count,\n      alwaysShow: current.alwaysShow\n    });\n  }\n}\n\nfunction processDistinctValues(current, distinctValues) {\n  const asyncValues = current.transformDistinctValues ? current.transformDistinctValues(distinctValues) : distinctValues.map(v => ({\n    label: v,\n    query: v\n  }));\n  addUndefined(current, asyncValues);\n  this.values.set(asyncValues.map(v => _.extend(v, {\n    _id: JSON.stringify(v.selector || v.query)\n  })));\n}\n\nTemplate.dynamicTableGroup.onCreated(function onCreated() {\n  this.stickyEnabled = new ReactiveDict();\n  this.enabled = new ReactiveDict();\n  this.loading = new ReactiveVar({});\n  this.counts = new ReactiveDict();\n  this.values = new ReactiveVar([]);\n  this.groupInfo = getGroupedInfoCollection(this.data.customTableSpec.table.collection._connection);\n  this.distinctValues = getDistinctValuesCollection(this.data.customTableSpec.table.collection._connection);\n  this.custom = new ReactiveVar();\n  let lastGroupChain = {};\n  getCustom(this.data.customTableSpec.custom, this.data.customTableSpec.id, custom => {\n    this.custom.set(custom);\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n\n    if (JSON.stringify(lastGroupChain) !== JSON.stringify(data.groupChain)) {\n      this.enabled.destroy();\n      this.stickyEnabled.destroy();\n    }\n\n    lastGroupChain = data.groupChain;\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const countWithDistinct = false; //current.count && !current.values; NOTE: can't figure out how to handle the ability to mutate the list in transform.\n\n    let values = [];\n\n    if (_.isArray(current.values)) {\n      values = current.values.slice(0, current.values.length);\n      addUndefined(current, values);\n      this.values.set(values);\n    } else if (current.values) {\n      values = current.values(data.selector);\n      values = values.slice(0, values.length);\n      addUndefined(current, values);\n      this.values.set(values);\n    } else {\n      const loading = Tracker.nonreactive(() => this.loading.get());\n      loading.distinctValues = true;\n      this.loading.set(loading);\n\n      if (Tracker.nonreactive(() => Meteor.status().status === \"offline\")) {\n        const distinctValues = _.unique(data.customTableSpec.table.collection.find(data.selector, {\n          fields: {\n            [current.valuesField || current.field]: 1\n          }\n        }).map(i => getValue(i, current.valuesField || current.field)));\n\n        processDistinctValues.call(this, current, distinctValues);\n      } else {\n        const sub = this.subscribe(\"__dynaicTableDistinctValuesForField\", data.customTableSpec.id, data.customTableSpec.table.publication, current.valuesField || current.field, data.selector, {}, countWithDistinct);\n\n        if (sub.ready()) {\n          const loading = Tracker.nonreactive(() => this.loading.get());\n          delete loading.distinctValues;\n          this.loading.set(loading);\n          const distinctValues = (this.distinctValues.findOne({\n            _id: data.customTableSpec.id\n          }) || {\n            groups: []\n          }).groups.map(v => v.value);\n          processDistinctValues.call(this, current, distinctValues);\n        }\n      }\n    }\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const values = this.values.get();\n\n    if (data.expandAll) {\n      values.forEach((v, index) => {\n        this.enabled.set(index, true);\n        this.stickyEnabled.set(index, true);\n      });\n    }\n\n    const valuesToCount = values.filter(v => v.ensureValues || v.count === true || v.count === undefined && current.count === true || v.ensureValues === undefined && current.ensureValues);\n\n    if (Tracker.nonreactive(() => Meteor.status().status !== \"offline\")) {\n      const ids = valuesToCount.map(value => ({\n        tableId: this.data.customTableSpec.id + getTableIdSuffix.call(data, value),\n        resultId: JSON.stringify(value.query).replace(/[\\{\\}.:]/g, \"\")\n      }));\n      const count = this.groupInfo.findOne({\n        _id: data.customTableSpec.id + getTableIdSuffix.call(this.data)\n      });\n      ids.forEach((_ref) => {\n        let {\n          tableId,\n          resultId\n        } = _ref;\n\n        if (count && count[resultId]) {\n          this.counts.set(tableId, count[resultId]);\n        } else {\n          this.counts.set(tableId, 0);\n        }\n      });\n    } else {\n      valuesToCount.forEach(value => {\n        let selector;\n\n        if (value.query.$nor) {\n          selector = _.extend({}, data.selector);\n\n          if (!selector.$and) {\n            selector.$and = [];\n          }\n\n          selector.$and.push(value.query);\n        } else {\n          selector = _.extend({\n            [current.field]: value.query\n          }, data.selector);\n        }\n\n        const count = data.customTableSpec.table.collection.find(selector).count();\n        this.counts.set(this.data.customTableSpec.id + getTableIdSuffix.call(data, value), count);\n      });\n    }\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const values = this.values.get();\n    const currentSelector = data.selector;\n    const countWithDistinct = false; //current.count && !current.values;\n\n    if (!countWithDistinct) {\n      let loading = Tracker.nonreactive(() => this.loading.get());\n      loading.countValues = true;\n      this.loading.set(loading);\n      const sub = this.subscribe(\"__dynamicTableGroupCounts\", data.customTableSpec.id + getTableIdSuffix.call(this.data), data.customTableSpec.table.publication, current.field, currentSelector, values.filter(v => v.ensureValues || v.count === true || v.count === undefined && current.count === true || v.ensureValues === undefined && current.ensureValues).map(v => ({\n        options: {\n          limit: v.ensureValues || v.ensureValues === undefined && current.ensureValues\n        },\n        query: v.query\n      })), current.options || {});\n\n      if (sub.ready()) {\n        loading = Tracker.nonreactive(() => this.loading.get());\n        delete loading.countValues;\n        this.loading.set(loading);\n      }\n    }\n  });\n});\n\nfunction shouldDisplaySection(current, value) {\n  if (value.alwaysShow || value.alwaysShow === undefined && current.alwaysShow) {\n    return true;\n  }\n\n  if (!value.count && !current.count && !value.ensureValues && !current.ensureValues) {\n    return true;\n  }\n\n  const tableId = this.customTableSpec.id + getTableIdSuffix.call(this, value);\n  const count = Template.instance().counts.get(tableId);\n  const ensureValues = value.ensureValues || current.ensureValues;\n\n  if (ensureValues && count < ensureValues) {\n    return 0;\n  }\n\n  return count;\n}\n\nTemplate.dynamicTableGroup.helpers({\n  waitingAndLoading() {\n    return this.loading && Object.keys(Template.instance().loading.get()).length !== 0;\n  },\n\n  showLoadingMessage() {\n    return this.loading === true;\n  },\n\n  showNoGroupsMessage() {\n    return this.noGroups === true;\n  },\n\n  hasVisibleGroups() {\n    const current = this.groupChain[this.index];\n    const values = Template.instance().values.get().filter(value => shouldDisplaySection.call(this, current, value));\n    return values.length;\n  },\n\n  shouldDisplaySection(value) {\n    const current = this.groupChain[this.index];\n    return shouldDisplaySection.call(this, current, value);\n  },\n\n  hasCount(value) {\n    const current = this.groupChain[this.index];\n    return value.count || value.count === undefined && current.count;\n  },\n\n  count(value) {\n    const tableId = this.customTableSpec.id + getTableIdSuffix.call(this, value);\n    return Template.instance().counts.get(tableId);\n  },\n\n  shouldDisplayContent(index) {\n    return !this.lazy || Template.instance().enabled.get(index);\n  },\n\n  shouldDisplayTable(index) {\n    return !this.lazy || Template.instance().stickyEnabled.get(index);\n  },\n\n  newSelector(value, currentSelector) {\n    const current = this.groupChain[this.index];\n\n    const selector = _.extend({}, currentSelector);\n\n    if (value.query.$nor) {\n      if (!selector.$and) {\n        selector.$and = [];\n      }\n\n      selector.$and.push(value.query);\n    } else {\n      selector[current.field] = value.query;\n    }\n\n    return selector;\n  },\n\n  table(value, newSelector) {\n    const tableIdSuffix = getTableIdSuffix.call(this, value);\n    return _.extend({}, this.customTableSpec, {\n      selector: newSelector,\n      id: this.customTableSpec.id + tableIdSuffix\n    });\n  },\n\n  lastLevel() {\n    return this.index + 1 === this.groupChain.length;\n  },\n\n  nextIndex() {\n    return this.index + 1;\n  },\n\n  currentGroupLabel() {\n    return this.groupChain[this.index].label;\n  },\n\n  currentGroupValues() {\n    return Template.instance().values.get();\n  },\n\n  tableIdSuffixChain(value) {\n    const current = this.groupChain[this.index];\n    const tableIdSuffixChain = [];\n    tableIdSuffixChain.push(...(this.tableIdSuffixChain || []));\n    const selector = {};\n\n    if (value.query.$nor) {\n      selector.$and = [value.query];\n    } else {\n      selector[current.field] = value.query;\n    }\n\n    tableIdSuffixChain.push(selectorToId(selector, value.tableIdSuffix));\n    return tableIdSuffixChain;\n  }\n\n});","map":{"version":3,"sources":["packages/znewsham:dynamic-table/client/ui/components/dynamicTableGroup/dynamicTableGroup.js"],"names":["ReactiveDict","module","link","v","getGroupedInfoCollection","getDistinctValuesCollection","changed","getCustom","getValue","selectorToId","selector","tableIdSuffix","JSON","stringify","replace","getTableIdSuffix","value","current","groupChain","index","query","$nor","$and","field","nextSuffix","nextParts","tableIdSuffixChain","slice","push","join","getCount","tableId","data","customTableSpec","id","call","count","_","isFunction","counts","set","Template","dynamicTableGroup","events","e","templInstance","stopImmediatePropagation","parseInt","$","currentTarget","open","enabled","get","stickyEnabled","values","custom","changeOpenGroups","onRendered","autorun","Tracker","afterFlush","forEach","openGroups","includes","addUndefined","queries","map","negation","length","isObject","q","$not","$in","undefined","label","alwaysShow","processDistinctValues","distinctValues","asyncValues","transformDistinctValues","extend","_id","onCreated","loading","ReactiveVar","groupInfo","table","collection","_connection","lastGroupChain","currentData","destroy","countWithDistinct","isArray","nonreactive","Meteor","status","unique","find","fields","valuesField","i","sub","subscribe","publication","ready","findOne","groups","expandAll","valuesToCount","filter","ensureValues","ids","resultId","currentSelector","countValues","options","limit","shouldDisplaySection","instance","helpers","waitingAndLoading","Object","keys","showLoadingMessage","showNoGroupsMessage","noGroups","hasVisibleGroups","hasCount","shouldDisplayContent","lazy","shouldDisplayTable","newSelector","lastLevel","nextIndex","currentGroupLabel","currentGroupValues"],"mappings":"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","sourcesContent":["import { ReactiveDict } from \"meteor/reactive-dict\";\nimport \"./dynamicTableGroup.html\";\nimport \"./dynamicTableGroup.css\";\nimport { getGroupedInfoCollection, getDistinctValuesCollection } from \"../../../db.js\";\nimport { changed, getCustom, getValue } from \"../../../inlineSave.js\";\n\n\nfunction selectorToId(selector, tableIdSuffix) {\n  if (tableIdSuffix) {\n    return tableIdSuffix;\n  }\n  return JSON.stringify(selector)\n  .replace(/[^\\d\\w]/g, \"\");\n}\n\n/** @this = root data context */\nfunction getTableIdSuffix(value) {\n  const current = this.groupChain[this.index];\n\n  const selector = {};\n  if (value && value.query.$nor) {\n    selector.$and = [value.query];\n  }\n  else if (value) {\n    selector[current.field] = value.query;\n  }\n  const nextSuffix = value && selectorToId(selector, value.tableIdSuffix);\n\n  const nextParts = (this.tableIdSuffixChain || []).slice(0);\n  if (nextSuffix) {\n    nextParts.push(nextSuffix);\n  }\n  return nextParts.join(\"\");\n}\n\n/** @this = template instance */\nfunction getCount(value, selector) {\n  const tableId = this.data.customTableSpec.id + getTableIdSuffix.call(this.data, value);\n  let count = value.count;\n  if (_.isFunction(value.count)) {\n    count = value.count(tableId, selector);\n  }\n  this.counts.set(tableId, count);\n}\n\nTemplate.dynamicTableGroup.events({\n  \"click .dynamic-table-header\"(e, templInstance) {\n    e.stopImmediatePropagation(); // QUESTION: why is this required? Without it this event handler gets called multiple times\n    const index = parseInt($(e.currentTarget).data(\"index\"), 10);\n    let open = false;\n    if (templInstance.enabled.get(index)) {\n      open = false;\n    }\n    else {\n      open = true;\n      templInstance.stickyEnabled.set(index, true);\n    }\n    templInstance.enabled.set(index, open);\n\n    const values = templInstance.values.get();\n    const tableId = templInstance.data.customTableSpec.id + getTableIdSuffix.call(this, values[index]);\n    changed(templInstance.data.customTableSpec.custom, tableId, { changeOpenGroups: { [tableId]: open } });\n  }\n});\n\nTemplate.dynamicTableGroup.onRendered(function onRendered() {\n  this.autorun(() => {\n    const values = this.values.get();\n    const custom = this.custom.get();\n    Tracker.afterFlush(() => {\n      if (custom) {\n        values.forEach((value, index) => {\n          const tableId = this.data.customTableSpec.id + getTableIdSuffix.call(this.data, value);\n          if (custom.openGroups && custom.openGroups.includes(tableId)) {\n            this.stickyEnabled.set(index, true);\n            this.enabled.set(index, true);\n          }\n        });\n      }\n    });\n  });\n});\n\nfunction addUndefined(current, values) {\n  const queries = values.map(v => v.query);\n  let negation;\n  if (queries.length && _.isObject(queries[0])) {\n    negation = { $nor: queries.map(q => ({ [current.field]: q })) };\n  }\n  else {\n    negation = { $not: { $in: queries } };\n  }\n  if (_.isObject(current.undefined)) {\n    values.push({\n      label: current.undefined.label || \"Uncategorized\",\n      query: current.undefined.query || negation,\n      count: current.undefined.count === undefined ? current.count : current.undefined.count,\n      alwaysShow: current.undefined.alwaysShow || current.alwaysShow\n    });\n  }\n  else if (current.undefined) {\n    values.push({\n      label: current.undefined === true ? \"Uncategorized\" : current.undefined,\n      query: negation,\n      count: current.count,\n      alwaysShow: current.alwaysShow\n    });\n  }\n}\n\nfunction processDistinctValues(current, distinctValues) {\n  const asyncValues = current.transformDistinctValues ? current.transformDistinctValues(distinctValues) : distinctValues.map(v => ({ label: v, query: v }));\n  addUndefined(current, asyncValues);\n  this.values.set(asyncValues.map(v => _.extend(v, { _id: JSON.stringify(v.selector || v.query) })));\n}\nTemplate.dynamicTableGroup.onCreated(function onCreated() {\n  this.stickyEnabled = new ReactiveDict();\n  this.enabled = new ReactiveDict();\n  this.loading = new ReactiveVar({});\n  this.counts = new ReactiveDict();\n  this.values = new ReactiveVar([]);\n  this.groupInfo = getGroupedInfoCollection(this.data.customTableSpec.table.collection._connection);\n  this.distinctValues = getDistinctValuesCollection(this.data.customTableSpec.table.collection._connection);\n  this.custom = new ReactiveVar();\n  let lastGroupChain = {};\n  getCustom(this.data.customTableSpec.custom, this.data.customTableSpec.id, (custom) => {\n    this.custom.set(custom);\n  });\n\n  this.autorun(() => {\n    const data = Template.currentData();\n    if (JSON.stringify(lastGroupChain) !== JSON.stringify(data.groupChain)) {\n      this.enabled.destroy();\n      this.stickyEnabled.destroy();\n    }\n    lastGroupChain = data.groupChain;\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const countWithDistinct = false;//current.count && !current.values; NOTE: can't figure out how to handle the ability to mutate the list in transform.\n    let values = [];\n    if (_.isArray(current.values)) {\n      values = current.values.slice(0, current.values.length);\n      addUndefined(current, values);\n      this.values.set(values);\n    }\n    else if (current.values) {\n      values = current.values(data.selector);\n      values = values.slice(0, values.length);\n      addUndefined(current, values);\n      this.values.set(values);\n    }\n    else {\n      const loading = Tracker.nonreactive(() => this.loading.get());\n      loading.distinctValues = true;\n      this.loading.set(loading);\n      if (Tracker.nonreactive(() => Meteor.status().status === \"offline\")) {\n        const distinctValues = _.unique(data.customTableSpec.table.collection.find(data.selector, { fields: { [current.valuesField || current.field]: 1 } }).map(i => getValue(i, current.valuesField || current.field)));\n        processDistinctValues.call(this, current, distinctValues);\n      }\n      else {\n        const sub = this.subscribe(\n          \"__dynaicTableDistinctValuesForField\",\n          data.customTableSpec.id,\n          data.customTableSpec.table.publication,\n          current.valuesField || current.field,\n          data.selector,\n          {},\n          countWithDistinct\n        );\n        if (sub.ready()) {\n          const loading = Tracker.nonreactive(() => this.loading.get());\n          delete loading.distinctValues;\n          this.loading.set(loading);\n          const distinctValues = (this.distinctValues.findOne({ _id: data.customTableSpec.id }) || { groups: [] }).groups.map(v => v.value);\n          processDistinctValues.call(this, current, distinctValues);\n        }\n      }\n    }\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const values = this.values.get();\n    if (data.expandAll) {\n      values.forEach((v, index) => {\n        this.enabled.set(index, true);\n        this.stickyEnabled.set(index, true);\n      });\n    }\n    const valuesToCount = values.filter(v => v.ensureValues || v.count === true || (v.count === undefined && current.count === true) || (v.ensureValues === undefined && current.ensureValues));\n    if (Tracker.nonreactive(() => Meteor.status().status !== \"offline\")) {\n      const ids = valuesToCount.map(value => ({ tableId: this.data.customTableSpec.id + getTableIdSuffix.call(data, value), resultId: JSON.stringify(value.query).replace(/[\\{\\}.:]/g, \"\") }));\n      const count = this.groupInfo.findOne({ _id: data.customTableSpec.id + getTableIdSuffix.call(this.data) });\n      ids.forEach(({ tableId, resultId }) => {\n        if (count && count[resultId]) {\n          this.counts.set(tableId, count[resultId]);\n        }\n        else {\n          this.counts.set(tableId, 0);\n        }\n      });\n    }\n    else {\n      valuesToCount.forEach((value) => {\n        let selector;\n        if (value.query.$nor) {\n          selector = _.extend({ }, data.selector);\n          if (!selector.$and) {\n            selector.$and = [];\n          }\n          selector.$and.push(value.query);\n        }\n        else {\n          selector = _.extend({ [current.field]: value.query }, data.selector);\n        }\n        const count = data.customTableSpec.table.collection.find(selector).count();\n        this.counts.set(this.data.customTableSpec.id + getTableIdSuffix.call(data, value), count);\n      });\n    }\n  });\n  this.autorun(() => {\n    const data = Template.currentData();\n    const current = data.groupChain[data.index];\n    const values = this.values.get();\n    const currentSelector = data.selector;\n    const countWithDistinct = false;//current.count && !current.values;\n    if (!countWithDistinct) {\n      let loading = Tracker.nonreactive(() => this.loading.get());\n      loading.countValues = true;\n      this.loading.set(loading);\n      const sub = this.subscribe(\n        \"__dynamicTableGroupCounts\",\n        data.customTableSpec.id + getTableIdSuffix.call(this.data),\n        data.customTableSpec.table.publication,\n        current.field,\n        currentSelector,\n        values.filter(v => v.ensureValues || v.count === true || (v.count === undefined && current.count === true) || (v.ensureValues === undefined && current.ensureValues))\n        .map(v => ({ options: { limit: v.ensureValues || (v.ensureValues === undefined && current.ensureValues) }, query: v.query })),\n        current.options || {}\n      );\n      if (sub.ready()) {\n        loading = Tracker.nonreactive(() => this.loading.get());\n        delete loading.countValues;\n        this.loading.set(loading);\n      }\n    }\n  });\n});\n\nfunction shouldDisplaySection(current, value) {\n  if (value.alwaysShow || (value.alwaysShow === undefined && current.alwaysShow)) {\n    return true;\n  }\n  if (!value.count && !current.count && !value.ensureValues && !current.ensureValues) {\n    return true;\n  }\n  const tableId = this.customTableSpec.id + getTableIdSuffix.call(this, value);\n  const count = Template.instance().counts.get(tableId);\n  const ensureValues = value.ensureValues || current.ensureValues;\n  if (ensureValues && count < ensureValues) {\n    return 0;\n  }\n  return count;\n}\nTemplate.dynamicTableGroup.helpers({\n  waitingAndLoading() {\n    return this.loading && Object.keys(Template.instance().loading.get()).length !== 0;\n  },\n  showLoadingMessage() {\n    return this.loading === true;\n  },\n  showNoGroupsMessage() {\n    return this.noGroups === true;\n  },\n  hasVisibleGroups() {\n    const current = this.groupChain[this.index];\n    const values = Template.instance().values.get().filter(value => shouldDisplaySection.call(this, current, value));\n    return values.length;\n  },\n  shouldDisplaySection(value) {\n    const current = this.groupChain[this.index];\n    return shouldDisplaySection.call(this, current, value);\n  },\n  hasCount(value) {\n    const current = this.groupChain[this.index];\n    return value.count || (value.count === undefined && current.count);\n  },\n  count(value) {\n    const tableId = this.customTableSpec.id + getTableIdSuffix.call(this, value);\n    return Template.instance().counts.get(tableId);\n  },\n  shouldDisplayContent(index) {\n    return !this.lazy || Template.instance().enabled.get(index);\n  },\n  shouldDisplayTable(index) {\n    return !this.lazy || Template.instance().stickyEnabled.get(index);\n  },\n  newSelector(value, currentSelector) {\n    const current = this.groupChain[this.index];\n\n    const selector = _.extend({}, currentSelector);\n    if (value.query.$nor) {\n      if (!selector.$and) {\n        selector.$and = [];\n      }\n      selector.$and.push(value.query);\n    }\n    else {\n      selector[current.field] = value.query;\n    }\n    return selector;\n  },\n  table(value, newSelector) {\n    const tableIdSuffix = getTableIdSuffix.call(this, value);\n    return _.extend(\n      {},\n      this.customTableSpec,\n      { selector: newSelector, id: this.customTableSpec.id + tableIdSuffix }\n    );\n  },\n  lastLevel() {\n    return this.index + 1 === this.groupChain.length;\n  },\n  nextIndex() {\n    return this.index + 1;\n  },\n  currentGroupLabel() {\n    return this.groupChain[this.index].label;\n  },\n  currentGroupValues() {\n    return Template.instance().values.get();\n  },\n  tableIdSuffixChain(value) {\n    const current = this.groupChain[this.index];\n    const tableIdSuffixChain = [];\n    tableIdSuffixChain.push(...(this.tableIdSuffixChain || []));\n    const selector = {};\n    if (value.query.$nor) {\n      selector.$and = [value.query];\n    }\n    else {\n      selector[current.field] = value.query;\n    }\n    tableIdSuffixChain.push(selectorToId(selector, value.tableIdSuffix));\n    return tableIdSuffixChain;\n  }\n});\n"]},"sourceType":"script","hash":"70e6a72712add2886f5a4173e2c9be29dd1a12ea"}
