{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\packages\\maxencecornet:audio-recorder\\lib\\client\\compatibility\\recorder.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/maxencecornet:audio-recorder/lib/client/compatibility/recorder.js","filename":"C:\\Sandbox\\test\\packages\\maxencecornet:audio-recorder\\lib\\client\\compatibility\\recorder.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\packages\\maxencecornet:audio-recorder\\lib\\client\\compatibility\\recorder.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/maxencecornet:audio-recorder/lib/client/compatibility/recorder.js"}},"code":"var WORKER_PATH = '/packages/maxencecornet_audio-recorder/assets/recorderWorker.js';\n\nvar Recorder = function (source, cfg) {\n  var config = cfg || {};\n  var bufferLen = config.bufferLen || 4096;\n  var numChannels = config.numChannels || 2;\n  this.context = source.context;\n  this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(this.context, bufferLen, numChannels, numChannels);\n  var worker = new Worker(config.workerPath || WORKER_PATH);\n  worker.postMessage({\n    command: 'init',\n    config: {\n      sampleRate: this.context.sampleRate,\n      numChannels: numChannels\n    }\n  });\n  var recording = false,\n      currCallback;\n\n  this.node.onaudioprocess = function (e) {\n    if (!recording) return;\n    var buffer = [];\n\n    for (var channel = 0; channel < numChannels; channel++) {\n      buffer.push(e.inputBuffer.getChannelData(channel));\n    }\n\n    worker.postMessage({\n      command: 'record',\n      buffer: buffer\n    });\n  };\n\n  this.configure = function (cfg) {\n    for (var prop in cfg) {\n      if (cfg.hasOwnProperty(prop)) {\n        config[prop] = cfg[prop];\n      }\n    }\n  };\n\n  this.record = function () {\n    recording = true;\n  };\n\n  this.stop = function () {\n    recording = false;\n  };\n\n  this.clear = function () {\n    worker.postMessage({\n      command: 'clear'\n    });\n  };\n\n  this.getBuffer = function (cb) {\n    currCallback = cb || config.callback;\n    worker.postMessage({\n      command: 'getBuffer'\n    });\n  };\n\n  this.exportWAV = function (cb, type) {\n    currCallback = cb || config.callback;\n    type = type || config.type || 'audio/wav';\n    if (!currCallback) throw new Error('Callback not set');\n    worker.postMessage({\n      command: 'exportWAV',\n      type: type\n    });\n  };\n\n  worker.onmessage = function (e) {\n    var blob = e.data;\n    currCallback(blob);\n  };\n\n  source.connect(this.node);\n  this.node.connect(this.context.destination); //this should not be necessary\n};\n\nRecorder.forceDownload = function (blob, filename) {\n  var url = (window.URL || window.webkitURL).createObjectURL(blob);\n  var link = window.document.createElement('a');\n  link.href = url;\n  link.download = filename || 'output.wav';\n  var click = document.createEvent(\"Event\");\n  click.initEvent(\"click\", true, true);\n  link.dispatchEvent(click);\n};\n\nwindow.Recorder = Recorder;","map":{"version":3,"sources":["packages/maxencecornet:audio-recorder/lib/client/compatibility/recorder.js"],"names":["WORKER_PATH","Recorder","source","cfg","config","bufferLen","numChannels","context","node","createScriptProcessor","createJavaScriptNode","call","worker","Worker","workerPath","postMessage","command","sampleRate","recording","currCallback","onaudioprocess","e","buffer","channel","push","inputBuffer","getChannelData","configure","prop","hasOwnProperty","record","stop","clear","getBuffer","cb","callback","exportWAV","type","Error","onmessage","blob","data","connect","destination","forceDownload","filename","url","window","URL","webkitURL","createObjectURL","link","document","createElement","href","download","click","createEvent","initEvent","dispatchEvent"],"mappings":"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","sourcesContent":["var WORKER_PATH = '/packages/maxencecornet_audio-recorder/assets/recorderWorker.js';\n\nvar Recorder = function (source, cfg) {\n    var config = cfg || {};\n    var bufferLen = config.bufferLen || 4096;\n    var numChannels = config.numChannels || 2;\n    this.context = source.context;\n    this.node = (this.context.createScriptProcessor ||\n    this.context.createJavaScriptNode).call(this.context,\n        bufferLen, numChannels, numChannels);\n    var worker = new Worker(config.workerPath || WORKER_PATH);\n    worker.postMessage({\n        command: 'init',\n        config: {\n            sampleRate: this.context.sampleRate,\n            numChannels: numChannels\n        }\n    });\n    var recording = false,\n        currCallback;\n\n    this.node.onaudioprocess = function (e) {\n        if (!recording) return;\n        var buffer = [];\n        for (var channel = 0; channel < numChannels; channel++) {\n            buffer.push(e.inputBuffer.getChannelData(channel));\n        }\n        worker.postMessage({\n            command: 'record',\n            buffer: buffer\n        });\n    };\n\n    this.configure = function (cfg) {\n        for (var prop in cfg) {\n            if (cfg.hasOwnProperty(prop)) {\n                config[prop] = cfg[prop];\n            }\n        }\n    };\n\n    this.record = function () {\n        recording = true;\n    };\n\n    this.stop = function () {\n        recording = false;\n    };\n\n    this.clear = function () {\n        worker.postMessage({command: 'clear'});\n    };\n\n    this.getBuffer = function (cb) {\n        currCallback = cb || config.callback;\n        worker.postMessage({command: 'getBuffer'})\n    };\n\n    this.exportWAV = function (cb, type) {\n        currCallback = cb || config.callback;\n        type = type || config.type || 'audio/wav';\n        if (!currCallback) throw new Error('Callback not set');\n        worker.postMessage({\n            command: 'exportWAV',\n            type: type\n        });\n    };\n\n    worker.onmessage = function (e) {\n        var blob = e.data;\n        currCallback(blob);\n    };\n\n    source.connect(this.node);\n    this.node.connect(this.context.destination);    //this should not be necessary\n};\n\nRecorder.forceDownload = function (blob, filename) {\n    var url = (window.URL || window.webkitURL).createObjectURL(blob);\n    var link = window.document.createElement('a');\n    link.href = url;\n    link.download = filename || 'output.wav';\n    var click = document.createEvent(\"Event\");\n    click.initEvent(\"click\", true, true);\n    link.dispatchEvent(click);\n};\n\nwindow.Recorder = Recorder;\n\n\n"]},"sourceType":"script","hash":"2f73d43171f45a1c81812a42472216c4879e3d6f"}
