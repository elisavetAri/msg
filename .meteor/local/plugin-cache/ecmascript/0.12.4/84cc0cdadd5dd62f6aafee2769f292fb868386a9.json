{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\exportModal.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/znewsham:dynamic-table/client/ui/exportModal.js","filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\exportModal.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\exportModal.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/znewsham:dynamic-table/client/ui/exportModal.js"}},"code":"var FileSaver;\nmodule.link(\"file-saver\", {\n  \"default\": function (v) {\n    FileSaver = v;\n  }\n}, 0);\nmodule.link(\"./exportModal.html\");\nvar getTableRecordsCollection;\nmodule.link(\"../db.js\", {\n  getTableRecordsCollection: function (v) {\n    getTableRecordsCollection = v;\n  }\n}, 1);\n\n// NOTE: recursive function to collapse arrays and return clean CSVable strings.\nfunction valueFunction(value, exportOptions) {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (_.isObject(value)) {\n    return \"Object requires conversion\";\n  } else if (_.isArray(value)) {\n    return value.map(function (val) {\n      return valueFunction(val, exportOptions);\n    }).join(\",\");\n  } else if (_.isUndefined(value)) {\n    return \"\";\n  }\n\n  return \"\" + value;\n} // NOTE: extracts a value from a document with a potentially.dotted.notation.field\n\n\nfunction getVal(doc, field) {\n  if (field.indexOf(\".\") === -1) {\n    return doc[field];\n  }\n\n  var parts = field.split(\".\");\n  var current = doc;\n  var i = 0;\n\n  while (current && i < parts.length) {\n    current = current[parts[i++]];\n  }\n\n  return current;\n}\n\nfunction getRows(doc, fieldNames, data) {\n  var filterableFields = data.fields.filter(function (field) {\n    return field.filters && fieldNames.includes(field.field);\n  });\n  var filters = filterableFields.map(function (field) {\n    return {\n      field: field.field,\n      filters: _.compact(field.filters().map(function (filter) {\n        var val = $(\"#dynamicTableExportModalForm-\" + field.field + \"-\" + filter.field).val();\n        var comparator = $(\"#dynamicTableExportModalForm-\" + field.field + \"-\" + filter.field + \"-comparator\").val();\n\n        if (val) {\n          return function (newDoc) {\n            return filter.filter(newDoc[field.field], filter.field, newDoc, val, comparator);\n          };\n        }\n\n        return null;\n      }))\n    };\n  });\n  var docs = [doc];\n  data.fields.filter(function (field) {\n    return fieldNames.includes(field.field) && field.rows;\n  }).forEach(function (field) {\n    docs = _.flatten(docs.map(function (aDoc) {\n      return field.rows(aDoc[field.field], aDoc, (_.findWhere(filters, {\n        field: field.field\n      }) || {}).filters);\n    }));\n  });\n  return docs;\n} // NOTE: generate a single line of valid CSV text for a document and list of fields\n\n\nfunction CSVLineFromDocument(doc, exportOptions, columns, fieldNames, selector) {\n  return _.flatten(_.filter(exportOptions.fields, function (field) {\n    return fieldNames.indexOf(field.field) !== -1;\n  }).map(function (field) {\n    var val = getVal(doc, field.field);\n\n    var column = _.findWhere(columns, {\n      data: field.field\n    });\n\n    if (field.columns) {\n      var _columns;\n\n      if (_.isArray(field.columns)) {\n        _columns = field.columns;\n      } else {\n        _columns = field.columns(Meteor.userId(), selector);\n      }\n\n      return _columns.map(function (fieldColumn) {\n        return \"\" + (fieldColumn.render ? fieldColumn.render(val, doc) : valueFunction(val, exportOptions));\n      });\n    } else if (field.render) {\n      return \"\" + field.render(val, doc);\n    } else if (column && column.render) {\n      return \"\" + column.render(val, \"export\", doc);\n    }\n\n    return \"\" + valueFunction(val, exportOptions);\n  })).map(function (val) {\n    // NOTE: if the resulting value contains commas, we need to escape any present quotes and then quote the entire field\n    if (val.indexOf(\",\") !== -1 || val.indexOf(\"\\n\") !== -1) {\n      val = val.split(\"\\\"\").join(\"\\\"\\\"\");\n      val = \"\\\"\" + val + \"\\\"\";\n    }\n\n    return val;\n  }).join(\",\");\n}\n\nTemplate.dynamicTableExportModal.helpers({\n  isEven: function (index) {\n    return index % 2 === 0;\n  },\n  checked: function (bool) {\n    return bool ? {\n      checked: \"checked\"\n    } : {};\n  },\n  enableField: function (field) {\n    return field.enabled !== false;\n  },\n  sortableFields: function () {\n    var collection = Template.instance().data.collection;\n    var schema = collection.simpleSchema && collection.simpleSchema();\n    return Template.instance().data.columns.filter(function (col) {\n      return col.sortable !== false && col.data;\n    }).map(function (col) {\n      return {\n        field: col.data,\n        label: schema.label(col.data)\n      };\n    });\n  },\n  fields: function () {\n    var collection = Template.instance().data.collection;\n    var schema = collection.simpleSchema && collection.simpleSchema();\n    return Template.instance().data.export.fields.map(function (field) {\n      if (typeof field === \"string\") {\n        return {\n          field: field,\n          label: schema && schema.label(field) || field\n        };\n      }\n\n      return {\n        field: field.field,\n        label: field.label || schema && schema.label(field.field) || field.field,\n        filters: field.filters\n      };\n    });\n  }\n});\nTemplate.dynamicTableExportModal.onRendered(function () {\n  function onRendered() {\n    var collection = this.data.collection;\n    var schema = collection.simpleSchema && collection.simpleSchema();\n    var fields = this.data.export.fields.map(function (field) {\n      if (typeof field === \"string\") {\n        return {\n          field: field,\n          label: schema && schema.label(field) || field\n        };\n      }\n\n      return {\n        field: field.field,\n        label: field.label || schema && schema.label(field.field) || field.field\n      };\n    });\n    this.$(\"#dynamicTableExportModalselected-fields\").select2({\n      multiple: true\n    }).val(_.pluck(fields, \"field\")).trigger(\"change\");\n  }\n\n  return onRendered;\n}());\nTemplate.dynamicTableExportModal.onCreated(function () {\n  function onCreated() {\n    if (this.data.export.beforeRender) {\n      this.data.export.beforeRender.call(this);\n    }\n  }\n\n  return onCreated;\n}());\nTemplate.dynamicTableExportModal.events({\n  \"click .btn-default\": function () {\n    $(\"#dynamicTableExportModal\").modal(\"hide\");\n  },\n  \"click .btn-inverse\": function () {\n    var templateInstance = Template.instance();\n    var data = templateInstance.data;\n    var selector = {\n      $and: [data.selector, data.advancedSearch || {}]\n    };\n    /*const fieldNames = _.toArray(templateInstance.$(\"input:checked\").map(function perCheckbox() {\n      return $(this).data(\"target\");\n    }));*/\n\n    var fieldNames = $(\"#dynamicTableExportModalselected-fields\").val();\n    var options = {\n      fields: _.object(fieldNames, _.times(fieldNames.length, function () {\n        return true;\n      }))\n    };\n    data.extraFields.forEach(function (field) {\n      options.fields[field] = true;\n    });\n    var limit = templateInstance.$(\".limit\").val();\n\n    if (limit) {\n      if (limit === \"current\") {\n        limit = data.limit;\n        options.skip = data.skip;\n      } else if (limit === \"selected\") {\n        selector.$and.push({\n          _id: {\n            $in: data.selectedIds\n          }\n        });\n        limit = false;\n      } else {\n        limit = parseInt(limit, 10);\n      }\n\n      if (limit) {\n        options.limit = limit;\n      }\n    }\n\n    var sort = templateInstance.$(\".sort\").val();\n\n    if (sort) {\n      if (sort === \"current\") {\n        sort = data.sort;\n      } else {\n        var _sort;\n\n        sort = (_sort = {}, _sort[sort] = 1, _sort);\n      }\n\n      options.sort = sort;\n    }\n\n    var sub = templateInstance.subscribe(\"__dynamicTableResults\", data.tableId + \"-export\", data.publication, data.compositePublicationNames, selector, options, {\n      onStop: function (err) {\n        if (err) {\n          if (data.export.onError) {\n            data.export.onError(err);\n          } else {\n            console.log(err);\n          }\n        }\n      }\n    });\n    templateInstance.$(\".btn-inverse\").attr(\"disabled\", \"disabled\");\n    templateInstance.autorun(function (comp) {\n      if (sub.ready()) {\n        try {\n          comp.stop();\n          var tableInfo = getTableRecordsCollection(data.collection._connection).findOne({\n            _id: data.tableId + \"-export\"\n          });\n          var records = data.collection.find({\n            _id: {\n              $in: tableInfo._ids\n            }\n          }, _.omit(options, \"skip\")).fetch();\n          var fileName = (data.export.fileName || \"export\") + \".csv\";\n\n          var csvHeaders = _.flatten(_.filter(data.export.fields, function (field) {\n            return fieldNames.indexOf(field.field) !== -1;\n          }).map(function (field) {\n            if (field.columns) {\n              if (_.isArray(field.columns)) {\n                return _.pluck(field.columns, \"label\");\n              }\n\n              return _.pluck(field.columns(Meteor.userId, {\n                _id: {\n                  $in: tableInfo._ids\n                }\n              }), \"label\");\n            }\n\n            return field.label;\n          }));\n\n          var allRecords = _.flatten(records.map(function (record) {\n            return getRows(record, fieldNames, data.export);\n          }));\n\n          var csvText = csvHeaders + \"\\n\" + allRecords.map(function (doc) {\n            return CSVLineFromDocument(doc, data.export, data.columns, fieldNames, {\n              _id: {\n                $in: tableInfo._ids\n              }\n            });\n          }).join(\"\\n\");\n          var blob = new Blob([csvText], {\n            type: \"text/csv;charset=utf-8\"\n          });\n          FileSaver.saveAs(blob, fileName);\n\n          if (data.export.onComplete) {\n            data.export.onComplete(csvText, fileName);\n          }\n        } catch (e) {\n          if (data.export.onError) {\n            data.export.onError(e);\n          } else {\n            console.log(e);\n          }\n        } finally {\n          templateInstance.$(\".btn-inverse\").attr(\"disabled\", null);\n          sub.stop();\n        }\n      }\n    });\n  }\n});","map":{"version":3,"sources":["packages/znewsham:dynamic-table/client/ui/exportModal.js"],"names":["FileSaver","module","link","v","getTableRecordsCollection","valueFunction","value","exportOptions","_","isObject","isArray","map","val","join","isUndefined","getVal","doc","field","indexOf","parts","split","current","i","length","getRows","fieldNames","data","filterableFields","fields","filter","filters","includes","compact","$","comparator","newDoc","docs","rows","forEach","flatten","aDoc","findWhere","CSVLineFromDocument","columns","selector","column","_columns","Meteor","userId","fieldColumn","render","Template","dynamicTableExportModal","helpers","isEven","index","checked","bool","enableField","enabled","sortableFields","collection","instance","schema","simpleSchema","col","sortable","label","export","onRendered","select2","multiple","pluck","trigger","onCreated","beforeRender","call","events","modal","templateInstance","$and","advancedSearch","options","object","times","extraFields","limit","skip","push","_id","$in","selectedIds","parseInt","sort","sub","subscribe","tableId","publication","compositePublicationNames","onStop","err","onError","console","log","attr","autorun","comp","ready","stop","tableInfo","_connection","findOne","records","find","_ids","omit","fetch","fileName","csvHeaders","allRecords","record","csvText","blob","Blob","type","saveAs","onComplete","e"],"mappings":"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","sourcesContent":["import FileSaver from \"file-saver\";\nimport \"./exportModal.html\";\nimport { getTableRecordsCollection } from \"../db.js\";\n// NOTE: recursive function to collapse arrays and return clean CSVable strings.\nfunction valueFunction(value, exportOptions) {\n  if (typeof value === \"string\") {\n    return value;\n  }\n  else if (_.isObject(value)) {\n    return \"Object requires conversion\";\n  }\n  else if (_.isArray(value)) {\n    return value.map(val => valueFunction(val, exportOptions)).join(\",\");\n  }\n  else if (_.isUndefined(value)) {\n    return \"\";\n  }\n  return `${value}`;\n}\n\n// NOTE: extracts a value from a document with a potentially.dotted.notation.field\nfunction getVal(doc, field) {\n  if (field.indexOf(\".\") === -1) {\n    return doc[field];\n  }\n  const parts = field.split(\".\");\n  let current = doc;\n  let i = 0;\n  while (current && i < parts.length) {\n    current = current[parts[i++]];\n  }\n  return current;\n}\n\nfunction getRows(doc, fieldNames, data) {\n  const filterableFields = data.fields.filter(field => field.filters && fieldNames.includes(field.field));\n\n  const filters = filterableFields.map(field => ({\n    field: field.field,\n    filters: _.compact(field.filters().map((filter) => {\n      const val = $(`#dynamicTableExportModalForm-${field.field}-${filter.field}`).val();\n      const comparator = $(`#dynamicTableExportModalForm-${field.field}-${filter.field}-comparator`).val();\n      if (val) {\n        return newDoc => filter.filter(newDoc[field.field], filter.field, newDoc, val, comparator);\n      }\n      return null;\n    }))\n  }));\n\n  let docs = [doc];\n  data.fields\n  .filter(field => fieldNames.includes(field.field) && field.rows)\n  .forEach((field) => {\n    docs = _.flatten(docs.map(aDoc => field.rows(aDoc[field.field], aDoc, (_.findWhere(filters, { field: field.field }) || {}).filters)));\n  });\n  return docs;\n}\n\n// NOTE: generate a single line of valid CSV text for a document and list of fields\nfunction CSVLineFromDocument(doc, exportOptions, columns, fieldNames, selector) {\n  return _.flatten(_.filter(exportOptions.fields, field => fieldNames.indexOf(field.field) !== -1).map((field) => {\n    const val = getVal(doc, field.field);\n    const column = _.findWhere(columns, { data: field.field });\n    if (field.columns) {\n      let _columns;\n      if (_.isArray(field.columns)) {\n        _columns = field.columns;\n      }\n      else {\n        _columns = field.columns(Meteor.userId(), selector);\n      }\n      return _columns.map(fieldColumn => `${fieldColumn.render ? fieldColumn.render(val, doc) : valueFunction(val, exportOptions)}`);\n    }\n    else if (field.render) {\n      return `${field.render(val, doc)}`;\n    }\n    else if (column && column.render) {\n      return `${column.render(val, \"export\", doc)}`;\n    }\n    return `${valueFunction(val, exportOptions)}`;\n  }))\n  .map((val) => {\n    // NOTE: if the resulting value contains commas, we need to escape any present quotes and then quote the entire field\n    if (val.indexOf(\",\") !== -1 || val.indexOf(\"\\n\") !== -1) {\n      val = val.split(\"\\\"\").join(\"\\\"\\\"\");\n      val = `\"${val}\"`;\n    }\n    return val;\n  })\n  .join(\",\");\n}\n\nTemplate.dynamicTableExportModal.helpers({\n  isEven(index) {\n    return index % 2 === 0;\n  },\n  checked(bool) {\n    return bool ? { checked: \"checked\" } : {};\n  },\n  enableField(field) {\n    return field.enabled !== false;\n  },\n  sortableFields() {\n    const collection = Template.instance().data.collection;\n    const schema = collection.simpleSchema && collection.simpleSchema();\n    return Template.instance().data.columns\n    .filter(col => col.sortable !== false && col.data)\n    .map(col => ({ field: col.data, label: schema.label(col.data) }));\n  },\n  fields() {\n    const collection = Template.instance().data.collection;\n    const schema = collection.simpleSchema && collection.simpleSchema();\n    return Template.instance().data.export.fields.map((field) => {\n      if (typeof field === \"string\") {\n        return { field, label: (schema && schema.label(field)) || field };\n      }\n      return { field: field.field, label: field.label || (schema && schema.label(field.field)) || field.field, filters: field.filters };\n    });\n  }\n});\n\nTemplate.dynamicTableExportModal.onRendered(function onRendered() {\n  const collection = this.data.collection;\n  const schema = collection.simpleSchema && collection.simpleSchema();\n  const fields = this.data.export.fields.map((field) => {\n    if (typeof field === \"string\") {\n      return { field, label: (schema && schema.label(field)) || field };\n    }\n    return { field: field.field, label: field.label || (schema && schema.label(field.field)) || field.field };\n  });\n  this.$(\"#dynamicTableExportModalselected-fields\").select2({\n    multiple: true\n  }).val(_.pluck(fields, \"field\")).trigger(\"change\");\n});\nTemplate.dynamicTableExportModal.onCreated(function onCreated() {\n  if (this.data.export.beforeRender) {\n    this.data.export.beforeRender.call(this);\n  }\n});\n\nTemplate.dynamicTableExportModal.events({\n  \"click .btn-default\"() {\n    $(\"#dynamicTableExportModal\").modal(\"hide\");\n  },\n  \"click .btn-inverse\"() {\n    const templateInstance = Template.instance();\n    const data = templateInstance.data;\n    const selector = { $and: [data.selector, data.advancedSearch || {}] };\n    /*const fieldNames = _.toArray(templateInstance.$(\"input:checked\").map(function perCheckbox() {\n      return $(this).data(\"target\");\n    }));*/\n    const fieldNames = $(\"#dynamicTableExportModalselected-fields\").val();\n    const options = {\n      fields: _.object(fieldNames, _.times(fieldNames.length, () => true))\n    };\n    data.extraFields.forEach((field) => {\n      options.fields[field] = true;\n    });\n    let limit = templateInstance.$(\".limit\").val();\n    if (limit) {\n      if (limit === \"current\") {\n        limit = data.limit;\n        options.skip = data.skip;\n      }\n      else if (limit === \"selected\") {\n        selector.$and.push({ _id: { $in: data.selectedIds } });\n        limit = false;\n      }\n      else {\n        limit = parseInt(limit, 10);\n      }\n      if (limit) {\n        options.limit = limit;\n      }\n    }\n    let sort = templateInstance.$(\".sort\").val();\n    if (sort) {\n      if (sort === \"current\") {\n        sort = data.sort;\n      }\n      else {\n        sort = { [sort]: 1 };\n      }\n      options.sort = sort;\n    }\n\n    const sub = templateInstance.subscribe(\n      \"__dynamicTableResults\",\n      `${data.tableId}-export`,\n      data.publication,\n      data.compositePublicationNames,\n      selector,\n      options,\n      {\n        onStop(err) {\n          if (err) {\n            if (data.export.onError) {\n              data.export.onError(err);\n            }\n            else {\n              console.log(err);\n            }\n          }\n        }\n      }\n    );\n    templateInstance.$(\".btn-inverse\").attr(\"disabled\", \"disabled\");\n    templateInstance.autorun((comp) => {\n      if (sub.ready()) {\n        try {\n          comp.stop();\n          const tableInfo = getTableRecordsCollection(data.collection._connection).findOne({ _id: `${data.tableId}-export` });\n          const records = data.collection.find({ _id: { $in: tableInfo._ids } }, _.omit(options, \"skip\")).fetch();\n          const fileName = `${data.export.fileName || \"export\"}.csv`;\n          const csvHeaders = _.flatten(_.filter(data.export.fields, field => fieldNames.indexOf(field.field) !== -1).map((field) => {\n            if (field.columns) {\n              if (_.isArray(field.columns)) {\n                return _.pluck(field.columns, \"label\");\n              }\n              return _.pluck(field.columns(Meteor.userId, { _id: { $in: tableInfo._ids } }), \"label\");\n            }\n            return field.label;\n          }));\n          const allRecords = _.flatten(records.map(record => getRows(record, fieldNames, data.export)));\n          const csvText = `${csvHeaders}\\n${allRecords.map(doc => CSVLineFromDocument(doc, data.export, data.columns, fieldNames, { _id: { $in: tableInfo._ids } })).join(\"\\n\")}`;\n          const blob = new Blob([csvText], { type: \"text/csv;charset=utf-8\" });\n          FileSaver.saveAs(blob, fileName);\n          if (data.export.onComplete) {\n            data.export.onComplete(csvText, fileName);\n          }\n        }\n        catch (e) {\n          if (data.export.onError) {\n            data.export.onError(e);\n          }\n          else {\n            console.log(e);\n          }\n        }\n        finally {\n          templateInstance.$(\".btn-inverse\").attr(\"disabled\", null);\n          sub.stop();\n        }\n      }\n    });\n  }\n});\n"]},"sourceType":"script","hash":"84cc0cdadd5dd62f6aafee2769f292fb868386a9"}
