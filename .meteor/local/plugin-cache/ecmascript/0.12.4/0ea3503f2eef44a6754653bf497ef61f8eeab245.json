{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\advancedSearchModal.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/znewsham:dynamic-table/client/ui/advancedSearchModal.js","filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\advancedSearchModal.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\client\\ui\\advancedSearchModal.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/znewsham:dynamic-table/client/ui/advancedSearchModal.js"}},"code":"module.link(\"./advancedSearchModal.html\");\nTemplate.dynamicTableAdvancedSearchModal.helpers({\n  value(field) {\n    if (_.isFunction(field.value)) {\n      return field.value(Template.instance().data.search);\n    }\n\n    return field.value;\n  },\n\n  autoform() {\n    return window.AutoForm;\n  },\n\n  concat() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.slice(0, -1).join(\"\");\n  },\n\n  selected(a, b) {\n    return a === b ? {\n      selected: \"selected\"\n    } : {};\n  },\n\n  select(field) {\n    return field.type === \"select\";\n  },\n\n  availableSearchOptions() {\n    return Template.instance().fields;\n  }\n\n});\nTemplate.dynamicTableAdvancedSearchModal.onCreated(function onCreated() {\n  const collection = Template.instance().data.collection;\n  const schema = collection.simpleSchema && collection.simpleSchema();\n  const search = Template.instance().data.search;\n  Template.instance().fields = Template.instance().data.fields.map(field => {\n    if (typeof field === \"string\") {\n      field = {\n        field\n      };\n    }\n\n    if (!field.label) {\n      const column = _.findWhere(this.data.columns, {\n        data: field.field\n      });\n\n      if (column && column.title) {\n        field.label = column.title;\n      } else {\n        field.label = schema ? schema.label(field.field) : field.field;\n      }\n    }\n\n    if (!field.type) {\n      if (field.options) {\n        field.type = \"select\";\n      }\n    }\n\n    if (!field.comparators) {\n      const isNumeric = schema && schema._schema[field.field] && (schema._schema[field.field].type.choices && schema._schema[field.field].type.choices.find(choice => choice === Number || choice === Date) || schema._schema[field.field].type === Number || schema._schema[field.field].type === Date || schema._schema[field.field].type === Array && (schema._schema[\"\".concat(field.field, \".$\")].type === Number || schema._schema[\"\".concat(field.field, \".$\")].type === Date));\n\n      if (isNumeric) {\n        field.comparators = [{\n          label: \"Exact Match\",\n          operator: \"\"\n        }, {\n          label: \"Not equal to\",\n          operator: \"$ne\"\n        }, {\n          label: \"Less than\",\n          operator: \"$lt\"\n        }, {\n          label: \"Greater than\",\n          operator: \"$gt\"\n        }];\n      } else if (schema && schema._schema[field.field].type === String || schema && schema._schema[field.field].type === Array && schema._schema[\"\".concat(field.field, \".$\")].type === String) {\n        field.comparators = [{\n          label: \"Exact Match\",\n          operator: \"\"\n        }, {\n          label: \"Not equal to\",\n          operator: \"$ne\"\n        }, {\n          label: \"Contains\",\n          operator: \"$regex\"\n        }];\n      } else {\n        field.comparators = [{\n          label: \"Exact Match\",\n          operator: \"\"\n        }, {\n          label: \"Not equal to\",\n          operator: \"$ne\"\n        }];\n      }\n    }\n\n    if (!field.comparator) {\n      field.comparator = _.isObject(search[field.field]) ? _.keys(search[field.field])[0] : \"\";\n    }\n\n    if (!field.value) {\n      field.value = _.isObject(search[field.field]) ? _.values(search[field.field])[0] : search[field.field];\n    }\n\n    return field;\n  });\n\n  if (Template.instance().data.beforeRender) {\n    Template.instance().data.beforeRender.call(this);\n  }\n});\nTemplate.dynamicTableAdvancedSearchModal.events({\n  \"click .btn-default\"() {\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  },\n\n  \"click .btn-danger\"() {\n    Template.instance().data.callback({});\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  },\n\n  \"click .btn-inverse\"() {\n    const collection = Template.instance().data.collection;\n    const schema = collection.simpleSchema && collection.simpleSchema();\n    const search = {};\n    Template.instance().$(\".field-set\").each(function eachField() {\n      const $formControl = $(this).find(\".form-control\");\n      let val = $formControl.val();\n      const fieldName = $formControl.attr(\"name\");\n\n      const field = _.findWhere(Template.instance().fields, {\n        field: fieldName\n      });\n\n      const isNumeric = schema && schema._schema[fieldName] && (schema._schema[fieldName].type.choices && schema._schema[fieldName].type.choices.find(choice => choice === Number) || schema._schema[fieldName].type === Number || schema._schema[fieldName].type === Date || schema._schema[fieldName].type === Array && schema._schema[\"\".concat(fieldName, \".$\")].type === Number);\n\n      if (val) {\n        const comparator = $(this).find(\".comparator\").val();\n\n        if (isNumeric) {\n          val = !Number.isNaN(parseInt(val, 10)) && \"\".concat(parseInt(val, 10)) === val ? parseInt(val, 10) : val;\n        }\n\n        if (field && field.search) {\n          if (!search.$and) {\n            search.$and = [];\n          }\n\n          search.$and.push(field.search(val, comparator));\n        } else if (comparator) {\n          search[fieldName] = {\n            [comparator]: val\n          };\n        } else {\n          search[fieldName] = val;\n        }\n      }\n    });\n    Template.instance().data.callback(search);\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  }\n\n});","map":{"version":3,"sources":["packages/znewsham:dynamic-table/client/ui/advancedSearchModal.js"],"names":["module","link","Template","dynamicTableAdvancedSearchModal","helpers","value","field","_","isFunction","instance","data","search","autoform","window","AutoForm","concat","args","slice","join","selected","a","b","select","type","availableSearchOptions","fields","onCreated","collection","schema","simpleSchema","map","label","column","findWhere","columns","title","options","comparators","isNumeric","_schema","choices","find","choice","Number","Date","Array","operator","String","comparator","isObject","keys","values","beforeRender","call","events","$","modal","callback","each","eachField","$formControl","val","fieldName","attr","isNaN","parseInt","$and","push"],"mappings":"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","sourcesContent":["import \"./advancedSearchModal.html\";\n\n\nTemplate.dynamicTableAdvancedSearchModal.helpers({\n  value(field) {\n    if (_.isFunction(field.value)) {\n      return field.value(Template.instance().data.search);\n    }\n    return field.value;\n  },\n  autoform() {\n    return window.AutoForm;\n  },\n  concat(...args) {\n    return args.slice(0, -1).join(\"\");\n  },\n  selected(a, b) {\n    return a === b ? { selected: \"selected\" } : {};\n  },\n  select(field) {\n    return field.type === \"select\";\n  },\n  availableSearchOptions() {\n    return Template.instance().fields;\n  }\n});\n\nTemplate.dynamicTableAdvancedSearchModal.onCreated(function onCreated() {\n  const collection = Template.instance().data.collection;\n  const schema = collection.simpleSchema && collection.simpleSchema();\n  const search = Template.instance().data.search;\n  Template.instance().fields = Template.instance().data.fields.map((field) => {\n    if (typeof field === \"string\") {\n      field = {\n        field\n      };\n    }\n    if (!field.label) {\n      const column = _.findWhere(this.data.columns, { data: field.field });\n      if (column && column.title) {\n        field.label = column.title;\n      }\n      else {\n        field.label = schema ? schema.label(field.field) : field.field;\n      }\n    }\n    if (!field.type) {\n      if (field.options) {\n        field.type = \"select\";\n      }\n    }\n    if (!field.comparators) {\n      const isNumeric = schema && schema._schema[field.field] && (\n        (schema._schema[field.field].type.choices && schema._schema[field.field].type.choices.find(choice => choice === Number || choice === Date)) ||\n        schema._schema[field.field].type === Number ||\n        schema._schema[field.field].type === Date ||\n        (schema._schema[field.field].type === Array && (schema._schema[`${field.field}.$`].type === Number || schema._schema[`${field.field}.$`].type === Date))\n      );\n      if (isNumeric) {\n        field.comparators = [\n          { label: \"Exact Match\", operator: \"\" },\n          { label: \"Not equal to\", operator: \"$ne\" },\n          { label: \"Less than\", operator: \"$lt\" },\n          { label: \"Greater than\", operator: \"$gt\" }\n        ];\n      }\n      else if (schema && schema._schema[field.field].type === String || (schema && schema._schema[field.field].type === Array && schema._schema[`${field.field}.$`].type === String)) {\n        field.comparators = [\n          { label: \"Exact Match\", operator: \"\" },\n          { label: \"Not equal to\", operator: \"$ne\" },\n          { label: \"Contains\", operator: \"$regex\" }\n        ];\n      }\n      else {\n        field.comparators = [\n          { label: \"Exact Match\", operator: \"\" },\n          { label: \"Not equal to\", operator: \"$ne\" }\n        ];\n      }\n    }\n    if (!field.comparator) {\n      field.comparator = _.isObject(search[field.field]) ? _.keys(search[field.field])[0] : \"\";\n    }\n    if (!field.value) {\n      field.value = _.isObject(search[field.field]) ? _.values(search[field.field])[0] : search[field.field];\n    }\n    return field;\n  });\n  if (Template.instance().data.beforeRender) {\n    Template.instance().data.beforeRender.call(this);\n  }\n});\n\nTemplate.dynamicTableAdvancedSearchModal.events({\n  \"click .btn-default\"() {\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  },\n  \"click .btn-danger\"() {\n    Template.instance().data.callback({});\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  },\n  \"click .btn-inverse\"() {\n    const collection = Template.instance().data.collection;\n    const schema = collection.simpleSchema && collection.simpleSchema();\n    const search = {};\n    Template.instance().$(\".field-set\").each(function eachField() {\n      const $formControl = $(this).find(\".form-control\");\n      let val = $formControl.val();\n      const fieldName = $formControl.attr(\"name\");\n      const field = _.findWhere(Template.instance().fields, { field: fieldName });\n      const isNumeric = schema && schema._schema[fieldName] && (\n        (schema._schema[fieldName].type.choices && schema._schema[fieldName].type.choices.find(choice => choice === Number)) ||\n        schema._schema[fieldName].type === Number ||\n        schema._schema[fieldName].type === Date ||\n        (schema._schema[fieldName].type === Array && (schema._schema[`${fieldName}.$`].type === Number))\n      );\n\n      if (val) {\n        const comparator = $(this).find(\".comparator\").val();\n        if (isNumeric) {\n          val = (!Number.isNaN(parseInt(val, 10)) && `${parseInt(val, 10)}` === val) ? parseInt(val, 10) : val;\n        }\n        if (field && field.search) {\n          if (!search.$and) {\n            search.$and = [];\n          }\n          search.$and.push(field.search(val, comparator));\n        }\n        else if (comparator) {\n          search[fieldName] = { [comparator]: val };\n        }\n        else {\n          search[fieldName] = val;\n        }\n      }\n    });\n    Template.instance().data.callback(search);\n    $(\"#dynamicTableAdvancedSearchModal\").modal(\"hide\");\n  }\n});\n"]},"sourceType":"script","hash":"0ea3503f2eef44a6754653bf497ef61f8eeab245"}
