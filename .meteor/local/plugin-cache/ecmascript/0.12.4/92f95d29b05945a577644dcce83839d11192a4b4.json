{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\server\\main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/znewsham:dynamic-table/server/main.js","filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\server\\main.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\packages\\znewsham:dynamic-table\\server\\main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/znewsham:dynamic-table/server/main.js"}},"code":"module.export({\n  registerPubFunction: () => registerPubFunction,\n  simpleTablePublication: () => simpleTablePublication,\n  simpleTablePublicationArrayNew: () => simpleTablePublicationArrayNew,\n  simpleTablePublicationCounts: () => simpleTablePublicationCounts\n});\nconst publicationFunctions = {};\n\nfunction registerPubFunction(name, fn) {\n  publicationFunctions[name] = fn;\n}\n\nfunction onStop(recordIds, publicationCursor, dataHandle, interval) {\n  dataHandle.stop();\n\n  if (interval) {\n    Meteor.clearInterval(interval);\n  } // NOTE: this was a hack to fix a symptom where multiple observers were being tracked per field (custom pub handle + returning the cursor)\n\n  /* recordIds.forEach((recordId) => {\n    const docView = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[recordId];\n    const dummy = {};\n    if (docView) {\n      Object.keys(docView.dataByKey).forEach(key => docView.clearField(this._subscriptionHandle, key, dummy));\n    }\n  });\n  */\n\n\n  recordIds.splice(0, recordIds.length);\n}\n\nfunction deepToFlatExtension(doc, toDepth, deleteOrig, ...accessors) {\n  if (!accessors || accessors.length === 0) {\n    accessors = Object.keys(doc).filter(k => !_.isArray(doc[k]) && _.isObject(doc[k]));\n  }\n\n  const toProcess = accessors.map(k => ({\n    fullKey: k,\n    key: k,\n    parent: doc,\n    depth: 0\n  }));\n\n  for (let i = 0; i < toProcess.length; i++) {\n    const {\n      key,\n      parent,\n      fullKey,\n      depth\n    } = toProcess[i];\n\n    if (toDepth && toDepth === depth) {\n      break;\n    }\n\n    const newKeys = Object.keys(parent[key]);\n    newKeys.forEach(k => {\n      doc[`${fullKey}.${k}`] = parent[key][k];\n\n      if (!_.isArray(parent[key][k]) && _.isObject(parent[key][k])) {\n        toProcess.push({\n          fullKey: `${fullKey}.${k}`,\n          key: k,\n          parent: parent[key],\n          depth: depth + 1\n        });\n      }\n    });\n\n    if (deleteOrig) {//delete parent[key];\n    }\n  }\n\n  return doc;\n}\n\nfunction getDataHandleAndInterval(tableId, publicationCursor, options, canOverride) {\n  const sortKeys = _.keys(options.sort || {});\n\n  const fieldKeys = _.keys(options.fields || {});\n\n  const presentSortKeys = sortKeys.filter(sk => {\n    if (fieldKeys.includes(sk)) {\n      return true;\n    }\n\n    const parts = sk.split(\".\");\n    return parts.some((p, i) => fieldKeys.includes(parts.slice(0, i).join(\".\")));\n  });\n  const hasSortableFields = presentSortKeys.length === sortKeys.length;\n  const oldLimit = publicationCursor._cursorDescription.options.limit;\n  const recordIds = [];\n  let updateRecords;\n  let initializing = true;\n  let dataHandle; // NOTE: the sort is over a subset of the fields we are returning\n  // as such, we don't care about the order of the document ID's.\n  // this means we can use the oplog to observe and sort on the client\n\n  if (hasSortableFields) {\n    dataHandle = publicationCursor.observeChanges({\n      added: (id, fields) => {\n        recordIds.push(id);\n\n        if (canOverride) {\n          // NOTE: yuck, we need to flatten deep objects, in case we have\n          // changed our publication to include new fields within the same top level object\n          // const convert = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[id];\n          this.added(publicationCursor._cursorDescription.collectionName, id, fields);\n        }\n\n        if (!initializing) {\n          updateRecords();\n        }\n      },\n      changed: (id, fields) => {\n        if (canOverride) {\n          this.changed(publicationCursor._cursorDescription.collectionName, id, fields);\n        }\n      },\n      removed: id => {\n        recordIds.splice(recordIds.indexOf(id), 1);\n\n        if (canOverride) {\n          this.removed(publicationCursor._cursorDescription.collectionName, id);\n        }\n\n        updateRecords();\n      }\n    });\n  } else {\n    dataHandle = publicationCursor.observeChanges({\n      _suppress_initial: true,\n      addedBefore: (_id, doc, beforeId) => {\n        recordIds.splice(recordIds.indexOf(beforeId), 0, _id);\n\n        if (canOverride) {\n          // const convert = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[_id];\n          this.added(publicationCursor._cursorDescription.collectionName, _id, doc);\n        }\n\n        if (!initializing) {\n          updateRecords();\n        }\n      },\n      movedBefore: (_id, beforeId) => {\n        recordIds.splice(recordIds.indexOf(_id), 1);\n        recordIds.splice(recordIds.indexOf(beforeId), 0, _id);\n        updateRecords();\n      },\n      changed: (_id, fields) => {\n        if (canOverride) {\n          this.changed(publicationCursor._cursorDescription.collectionName, _id, fields);\n        }\n      },\n      removed: _id => {\n        recordIds.splice(recordIds.indexOf(_id), 1);\n\n        if (canOverride) {\n          this.removed(publicationCursor._cursorDescription.collectionName, _id);\n        }\n\n        updateRecords();\n      }\n    });\n  }\n\n  updateRecords = () => {\n    delete publicationCursor._cursorDescription.options.limit;\n    const recordsTotal = options.skipCount ? options.skip + recordIds.length + 1 : publicationCursor.count();\n    publicationCursor._cursorDescription.options.limit = oldLimit;\n\n    if (!initializing) {\n      this.changed(\"__dynamicTableInformation\", tableId, {\n        _ids: recordIds,\n        recordsFiltered: recordsTotal,\n        recordsTotal\n      });\n    } else {\n      this.added(\"__dynamicTableInformation\", tableId, {\n        _ids: recordIds,\n        recordsFiltered: recordsTotal,\n        recordsTotal\n      });\n    }\n  };\n\n  if (options.throttleRefresh) {\n    updateRecords = _.throttle(Meteor.bindEnvironment(updateRecords), options.throttleRefresh);\n  }\n\n  updateRecords();\n  initializing = false;\n  let interval;\n\n  if (!options.skipCount) {\n    interval = Meteor.setInterval(() => updateRecords(), 10000);\n  }\n\n  return {\n    dataHandle,\n    interval,\n    recordIds\n  };\n}\n\nfunction getPublicationCursor(publicationName, selector, options) {\n  const fn = publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName];\n  const publicationResult = fn.call(this, selector, options);\n  let publicationCursor; // NOTE: if we haven't explicitly stated whether we can override the default publication, lets figure it out\n  // if we returned a cursor, or an array with exactly one cursor in it, we can override\n  // doing so fixes a potential issue with cursors returning results with a bad sort\n  // e.g., one where multiple valid sorts are possible. In this case, the table\n  // information can return one set of ids and the cursor a different set of documents\n  // NOT compatible with the composite publication.\n\n  let canOverride = options.overridePublication === undefined ? undefined : options.overridePublication;\n\n  if (_.isArray(publicationResult)) {\n    publicationCursor = publicationResult[0];\n\n    if (canOverride === undefined) {\n      canOverride = true;\n    }\n  } else {\n    publicationCursor = publicationResult;\n\n    if (canOverride === undefined) {\n      canOverride = true;\n    }\n  }\n\n  return {\n    publicationResult,\n    publicationCursor,\n    canOverride\n  };\n}\n\nfunction simpleTablePublication(tableId, publicationName, compositePublicationNames, selector, options) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(selector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n\n  const {\n    publicationCursor\n  } = getPublicationCursor.call(this, publicationName, selector, options);\n  const {\n    dataHandle,\n    interval,\n    recordIds\n  } = getDataHandleAndInterval.call(this, tableId, publicationCursor, options, false);\n  this.onStop(() => {\n    onStop.call(this, recordIds, publicationCursor, dataHandle, interval);\n  });\n  return {\n    find() {\n      return publicationCursor;\n    },\n\n    children: (compositePublicationNames || []).map(pubName => {\n      const fn = publicationFunctions[pubName] || Meteor.default_server.publish_handlers[pubName];\n      check(fn, Function);\n      return {\n        find(play) {\n          const fn = publicationFunctions[pubName] || Meteor.default_server.publish_handlers[pubName];\n          return fn.call(this, play);\n        }\n\n      };\n    })\n  };\n}\n\nfunction simpleTablePublicationArrayNew(tableId, publicationName, selector, options) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(selector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n\n  const {\n    publicationResult,\n    publicationCursor,\n    canOverride\n  } = getPublicationCursor.call(this, publicationName, selector, options);\n  const {\n    dataHandle,\n    interval,\n    recordIds\n  } = getDataHandleAndInterval.call(this, tableId, publicationCursor, options, canOverride);\n  this.onStop(() => {\n    onStop.call(this, recordIds, publicationCursor, dataHandle, interval);\n  });\n  return _.isArray(publicationResult) ? publicationResult.slice(1) : [];\n}\n\nfunction simpleTablePublicationCounts(tableId, publicationName, field, baseSelector, queries, options = {}) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(baseSelector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n\n  if (options.throttleRefresh === undefined) {\n    options.throttleRefresh = 10000;\n  }\n\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n\n  if (this.unblock) {\n    this.unblock();\n  }\n\n  let init = true;\n  const {\n    publicationCursor\n  } = !queries.length ? {\n    publicationCursor: null\n  } : getPublicationCursor.call(this, publicationName, baseSelector, {\n    fields: {\n      [field]: true,\n      _id: true\n    }\n  });\n  const result = {};\n\n  const updateRecords = () => {\n    const changed = {};\n    let hasChanges = false;\n    return Promise.all(queries.map(value => {\n      let subSelector;\n\n      if (value.query.$nor) {\n        subSelector = value.query;\n      } else {\n        subSelector = {\n          [field]: value.query\n        };\n      }\n\n      const selector = {\n        $and: [subSelector, publicationCursor._cursorDescription.selector]\n      };\n      const id = JSON.stringify(value.query).replace(/[{}.:]/g, \"\");\n\n      if (id) {\n        let cursor = publicationCursor._mongo.db.collection(publicationCursor._getCollectionName()).find(selector, {\n          _id: true\n        });\n\n        if (value.options && value.options.limit) {\n          cursor = cursor.limit(value.options.limit);\n        }\n\n        return cursor.count(true).then(count => {\n          if (result[id] !== count) {\n            changed[id] = count;\n            result[id] = count;\n            hasChanges = true;\n          }\n        });\n      }\n\n      return Promise.resolve();\n    })).then(() => {\n      if (init) {\n        init = false;\n        this.added(\"__dynamicTableGroupInfo\", tableId, changed);\n        this.ready();\n      } else if (hasChanges) {\n        this.changed(\"__dynamicTableGroupInfo\", tableId, changed);\n      }\n    });\n  };\n\n  const throttledUpdateRecords = options.throttleRefresh ? _.throttle(updateRecords, options.throttleRefresh, {\n    leading: true,\n    trailing: true\n  }) : updateRecords;\n  let dataHandle;\n\n  if (publicationCursor) {\n    dataHandle = publicationCursor.observeChanges({\n      added() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      },\n\n      changed() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      },\n\n      removed() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      }\n\n    });\n  }\n\n  updateRecords();\n  this.onStop(() => {\n    if (dataHandle) {\n      dataHandle.stop();\n    }\n  });\n}\n\nfunction simpleTablePublicationDistinctValuesForField(tableId, publicationName, field, selector = {}, options = {}, count = false) {\n  check(tableId, String);\n  check(field, String);\n  check(publicationName, String);\n  check(selector, Object);\n\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n\n  if (options.throttleRefresh === undefined) {\n    options.throttleRefresh = 10000;\n  }\n\n  const {\n    publicationCursor\n  } = getPublicationCursor.call(this, publicationName, selector, {\n    fields: {\n      _id: true,\n      [field]: true\n    }\n  });\n  let keys = {};\n  let init = true;\n\n  const updateRecords = () => {\n    publicationCursor._mongo.db.collection(publicationCursor._getCollectionName()).distinct(field, publicationCursor._cursorDescription.selector).then(distinctValues => {\n      const newKeys = {};\n      let changed = false;\n      distinctValues.forEach(distinctValue => {\n        if (!newKeys[JSON.stringify(distinctValue)]) {\n          newKeys[JSON.stringify(distinctValue)] = 1;\n        }\n      });\n\n      const sortedOldKeys = _.sortBy(Object.keys(keys));\n\n      const sortedNewKeys = _.sortBy(Object.keys(newKeys));\n\n      changed = !_.isEqual(sortedOldKeys, sortedNewKeys);\n\n      if (init) {\n        init = false;\n        this.added(\"__dynamicTableDistinctValues\", tableId, {\n          groups: distinctValues.map(dv => ({\n            value: dv\n          }))\n        });\n        this.ready();\n      } else if (changed) {\n        keys = newKeys;\n        this.changed(\"__dynamicTableDistinctValues\", tableId, {\n          groups: distinctValues.map(dv => ({\n            value: dv\n          }))\n        });\n      }\n    });\n  };\n\n  const throttledUpdateRecords = options.throttleRefresh ? _.throttle(updateRecords, options.throttleRefresh, {\n    leading: true,\n    trailing: true\n  }) : updateRecords;\n  const dataHandle = publicationCursor.observeChanges({\n    added() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    },\n\n    changed() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    },\n\n    removed() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    }\n\n  });\n  updateRecords();\n  this.onStop(() => {\n    dataHandle.stop();\n  });\n}\n\nMeteor.publishComposite(\"__dynamicTableResults\", simpleTablePublication);\nMeteor.publish(\"__dynamicTableResultsArray\", simpleTablePublicationArrayNew);\nMeteor.publish(\"__dynamicTableGroupCounts\", simpleTablePublicationCounts);\nMeteor.publish(\"__dynaicTableDistinctValuesForField\", simpleTablePublicationDistinctValuesForField);","map":{"version":3,"sources":["packages/znewsham:dynamic-table/server/main.js"],"names":["module","export","registerPubFunction","simpleTablePublication","simpleTablePublicationArrayNew","simpleTablePublicationCounts","publicationFunctions","name","fn","onStop","recordIds","publicationCursor","dataHandle","interval","stop","Meteor","clearInterval","splice","length","deepToFlatExtension","doc","toDepth","deleteOrig","accessors","Object","keys","filter","k","_","isArray","isObject","toProcess","map","fullKey","key","parent","depth","i","newKeys","forEach","push","getDataHandleAndInterval","tableId","options","canOverride","sortKeys","sort","fieldKeys","fields","presentSortKeys","sk","includes","parts","split","some","p","slice","join","hasSortableFields","oldLimit","_cursorDescription","limit","updateRecords","initializing","observeChanges","added","id","collectionName","changed","removed","indexOf","_suppress_initial","addedBefore","_id","beforeId","movedBefore","recordsTotal","skipCount","skip","count","_ids","recordsFiltered","throttleRefresh","throttle","bindEnvironment","setInterval","getPublicationCursor","publicationName","selector","default_server","publish_handlers","publicationResult","call","overridePublication","undefined","compositePublicationNames","check","String","Function","Kadira","_getInfo","trace","find","children","pubName","play","field","baseSelector","queries","unblock","init","result","hasChanges","Promise","all","value","subSelector","query","$nor","$and","JSON","stringify","replace","cursor","_mongo","db","collection","_getCollectionName","then","resolve","ready","throttledUpdateRecords","leading","trailing","simpleTablePublicationDistinctValuesForField","distinct","distinctValues","distinctValue","sortedOldKeys","sortBy","sortedNewKeys","isEqual","groups","dv","publishComposite","publish"],"mappings":"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","sourcesContent":["const publicationFunctions = {};\nexport function registerPubFunction(name, fn) {\n  publicationFunctions[name] = fn;\n}\n\n\nfunction onStop(recordIds, publicationCursor, dataHandle, interval) {\n  dataHandle.stop();\n  if (interval) {\n    Meteor.clearInterval(interval);\n  }\n\n  // NOTE: this was a hack to fix a symptom where multiple observers were being tracked per field (custom pub handle + returning the cursor)\n  /* recordIds.forEach((recordId) => {\n    const docView = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[recordId];\n    const dummy = {};\n    if (docView) {\n      Object.keys(docView.dataByKey).forEach(key => docView.clearField(this._subscriptionHandle, key, dummy));\n    }\n  });\n  */\n  recordIds.splice(0, recordIds.length);\n}\n\nfunction deepToFlatExtension(doc, toDepth, deleteOrig, ...accessors) {\n  if (!accessors || accessors.length === 0) {\n    accessors = Object.keys(doc).filter(k => !_.isArray(doc[k]) && _.isObject(doc[k]));\n  }\n  const toProcess = accessors.map(k => ({ fullKey: k, key: k, parent: doc, depth: 0 }));\n  for (let i = 0; i < toProcess.length; i++) {\n    const { key, parent, fullKey, depth } = toProcess[i];\n    if (toDepth && toDepth === depth) {\n      break;\n    }\n    const newKeys = Object.keys(parent[key]);\n    newKeys.forEach((k) => {\n      doc[`${fullKey}.${k}`] = parent[key][k];\n      if (!_.isArray(parent[key][k]) && _.isObject(parent[key][k])) {\n        toProcess.push({\n          fullKey: `${fullKey}.${k}`,\n          key: k,\n          parent: parent[key],\n          depth: depth + 1\n        });\n      }\n    });\n    if (deleteOrig) {\n      //delete parent[key];\n    }\n  }\n  return doc;\n}\nfunction getDataHandleAndInterval(tableId, publicationCursor, options, canOverride) {\n  const sortKeys = _.keys(options.sort || {});\n  const fieldKeys = _.keys(options.fields || {});\n  const presentSortKeys = sortKeys.filter((sk) => {\n    if (fieldKeys.includes(sk)) {\n      return true;\n    }\n    const parts = sk.split(\".\");\n    return parts.some((p, i) => fieldKeys.includes(parts.slice(0, i).join(\".\")));\n  });\n  const hasSortableFields = presentSortKeys.length === sortKeys.length;\n  const oldLimit = publicationCursor._cursorDescription.options.limit;\n  const recordIds = [];\n  let updateRecords;\n  let initializing = true;\n  let dataHandle;\n\n  // NOTE: the sort is over a subset of the fields we are returning\n  // as such, we don't care about the order of the document ID's.\n  // this means we can use the oplog to observe and sort on the client\n  if (hasSortableFields) {\n    dataHandle = publicationCursor.observeChanges({\n      added: (id, fields) => {\n        recordIds.push(id);\n        if (canOverride) {\n          // NOTE: yuck, we need to flatten deep objects, in case we have\n          // changed our publication to include new fields within the same top level object\n          // const convert = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[id];\n          this.added(publicationCursor._cursorDescription.collectionName, id, fields);\n        }\n        if (!initializing) {\n          updateRecords();\n        }\n      },\n      changed: (id, fields) => {\n        if (canOverride) {\n          this.changed(publicationCursor._cursorDescription.collectionName, id, fields);\n        }\n      },\n      removed: (id) => {\n        recordIds.splice(recordIds.indexOf(id), 1);\n        if (canOverride) {\n          this.removed(publicationCursor._cursorDescription.collectionName, id);\n        }\n        updateRecords();\n      }\n    });\n  }\n  else {\n    dataHandle = publicationCursor.observeChanges({\n      _suppress_initial: true,\n      addedBefore: (_id, doc, beforeId) => {\n        recordIds.splice(recordIds.indexOf(beforeId), 0, _id);\n        if (canOverride) {\n          // const convert = this._session.getCollectionView(publicationCursor._cursorDescription.collectionName).documents[_id];\n          this.added(publicationCursor._cursorDescription.collectionName, _id, doc);\n        }\n        if (!initializing) {\n          updateRecords();\n        }\n      },\n      movedBefore: (_id, beforeId) => {\n        recordIds.splice(recordIds.indexOf(_id), 1);\n        recordIds.splice(recordIds.indexOf(beforeId), 0, _id);\n        updateRecords();\n      },\n      changed: (_id, fields) => {\n        if (canOverride) {\n          this.changed(publicationCursor._cursorDescription.collectionName, _id, fields);\n        }\n      },\n      removed: (_id) => {\n        recordIds.splice(recordIds.indexOf(_id), 1);\n        if (canOverride) {\n          this.removed(publicationCursor._cursorDescription.collectionName, _id);\n        }\n        updateRecords();\n      }\n    });\n  }\n  updateRecords = () => {\n    delete publicationCursor._cursorDescription.options.limit;\n    const recordsTotal = options.skipCount ? options.skip + recordIds.length + 1 : publicationCursor.count();\n    publicationCursor._cursorDescription.options.limit = oldLimit;\n    if (!initializing) {\n      this.changed(\"__dynamicTableInformation\", tableId, { _ids: recordIds, recordsFiltered: recordsTotal, recordsTotal });\n    }\n    else {\n      this.added(\"__dynamicTableInformation\", tableId, { _ids: recordIds, recordsFiltered: recordsTotal, recordsTotal });\n    }\n  };\n\n  if (options.throttleRefresh) {\n    updateRecords = _.throttle(Meteor.bindEnvironment(updateRecords), options.throttleRefresh);\n  }\n  updateRecords();\n  initializing = false;\n  let interval;\n  if (!options.skipCount) {\n    interval = Meteor.setInterval(() => updateRecords(), 10000);\n  }\n  return { dataHandle, interval, recordIds };\n}\n\nfunction getPublicationCursor(publicationName, selector, options) {\n  const fn = publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName];\n  const publicationResult = fn.call(this, selector, options);\n  let publicationCursor;\n  // NOTE: if we haven't explicitly stated whether we can override the default publication, lets figure it out\n  // if we returned a cursor, or an array with exactly one cursor in it, we can override\n  // doing so fixes a potential issue with cursors returning results with a bad sort\n  // e.g., one where multiple valid sorts are possible. In this case, the table\n  // information can return one set of ids and the cursor a different set of documents\n  // NOT compatible with the composite publication.\n  let canOverride = options.overridePublication === undefined ? undefined : options.overridePublication;\n  if (_.isArray(publicationResult)) {\n    publicationCursor = publicationResult[0];\n    if (canOverride === undefined) {\n      canOverride = true;\n    }\n  }\n  else {\n    publicationCursor = publicationResult;\n    if (canOverride === undefined) {\n      canOverride = true;\n    }\n  }\n  return { publicationResult, publicationCursor, canOverride };\n}\n\nexport function simpleTablePublication(tableId, publicationName, compositePublicationNames, selector, options) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(selector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n  const { publicationCursor } = getPublicationCursor.call(this, publicationName, selector, options);\n  const { dataHandle, interval, recordIds } = getDataHandleAndInterval.call(this, tableId, publicationCursor, options, false);\n\n  this.onStop(() => {\n    onStop.call(this, recordIds, publicationCursor, dataHandle, interval);\n  });\n  return {\n    find() {\n      return publicationCursor;\n    },\n    children: (compositePublicationNames || []).map((pubName) => {\n      const fn = publicationFunctions[pubName] || Meteor.default_server.publish_handlers[pubName];\n      check(fn, Function);\n      return {\n        find(play) {\n          const fn = publicationFunctions[pubName] || Meteor.default_server.publish_handlers[pubName];\n          return fn.call(this, play);\n        }\n      };\n    })\n  };\n}\nexport function simpleTablePublicationArrayNew(tableId, publicationName, selector, options) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(selector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n  const { publicationResult, publicationCursor, canOverride } = getPublicationCursor.call(this, publicationName, selector, options);\n  const { dataHandle, interval, recordIds } = getDataHandleAndInterval.call(this, tableId, publicationCursor, options, canOverride);\n  this.onStop(() => {\n    onStop.call(this, recordIds, publicationCursor, dataHandle, interval);\n  });\n  return _.isArray(publicationResult) ? publicationResult.slice(1) : [];\n}\n\nexport function simpleTablePublicationCounts(tableId, publicationName, field, baseSelector, queries, options = {}) {\n  check(tableId, String);\n  check(publicationName, String);\n  check(baseSelector, Object);\n  check(options, Object);\n  check(publicationFunctions[publicationName] || Meteor.default_server.publish_handlers[publicationName], Function);\n\n  if (options.throttleRefresh === undefined) {\n    options.throttleRefresh = 10000;\n  }\n\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n  if (this.unblock) {\n    this.unblock();\n  }\n\n  let init = true;\n  const { publicationCursor } = !queries.length ? { publicationCursor: null } : getPublicationCursor.call(\n    this,\n    publicationName,\n    baseSelector,\n    { fields: { [field]: true, _id: true } }\n  );\n\n  const result = {};\n\n  const updateRecords = () => {\n    const changed = {};\n    let hasChanges = false;\n    return Promise.all(queries.map((value) => {\n      let subSelector;\n      if (value.query.$nor) {\n        subSelector = value.query;\n      }\n      else {\n        subSelector = { [field]: value.query };\n      }\n      const selector = { $and: [subSelector, publicationCursor._cursorDescription.selector] };\n      const id = JSON.stringify(value.query).replace(/[{}.:]/g, \"\");\n      if (id) {\n        let cursor = publicationCursor._mongo.db\n        .collection(publicationCursor._getCollectionName())\n        .find(selector, { _id: true });\n        if (value.options && value.options.limit) {\n          cursor = cursor.limit(value.options.limit);\n        }\n        return cursor.count(true).then((count) => {\n          if (result[id] !== count) {\n            changed[id] = count;\n            result[id] = count;\n            hasChanges = true;\n          }\n        });\n      }\n      return Promise.resolve();\n    }))\n    .then(() => {\n      if (init) {\n        init = false;\n        this.added(\"__dynamicTableGroupInfo\", tableId, changed);\n        this.ready();\n      }\n      else if (hasChanges) {\n        this.changed(\"__dynamicTableGroupInfo\", tableId, changed);\n      }\n    });\n  };\n\n\n  const throttledUpdateRecords = options.throttleRefresh ? _.throttle(updateRecords, options.throttleRefresh, { leading: true, trailing: true }) : updateRecords;\n\n  let dataHandle;\n  if (publicationCursor) {\n    dataHandle = publicationCursor.observeChanges({\n      added() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      },\n      changed() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      },\n      removed() {\n        if (!init) {\n          throttledUpdateRecords();\n        }\n      }\n    });\n  }\n\n  updateRecords();\n\n  this.onStop(() => {\n    if (dataHandle) {\n      dataHandle.stop();\n    }\n  });\n}\n\nfunction simpleTablePublicationDistinctValuesForField(tableId, publicationName, field, selector = {}, options = {}, count = false) {\n  check(tableId, String);\n  check(field, String);\n  check(publicationName, String);\n  check(selector, Object);\n  if (typeof Kadira !== \"undefined\" && Kadira && Kadira._getInfo()) {\n    Kadira._getInfo().trace.name += \"_\" + publicationName;\n  }\n\n  if (options.throttleRefresh === undefined) {\n    options.throttleRefresh = 10000;\n  }\n\n  const { publicationCursor } = getPublicationCursor.call(\n    this,\n    publicationName,\n    selector,\n    { fields: { _id: true, [field]: true } }\n  );\n\n  let keys = {};\n  let init = true;\n  const updateRecords = () => {\n    publicationCursor._mongo.db.collection(publicationCursor._getCollectionName())\n    .distinct(field, publicationCursor._cursorDescription.selector)\n    .then((distinctValues) => {\n      const newKeys = {};\n      let changed = false;\n      distinctValues.forEach((distinctValue) => {\n        if (!newKeys[JSON.stringify(distinctValue)]) {\n          newKeys[JSON.stringify(distinctValue)] = 1;\n        }\n      });\n      const sortedOldKeys = _.sortBy(Object.keys(keys));\n      const sortedNewKeys = _.sortBy(Object.keys(newKeys));\n      changed = !_.isEqual(sortedOldKeys, sortedNewKeys);\n      if (init) {\n        init = false;\n        this.added(\"__dynamicTableDistinctValues\", tableId, {\n          groups: distinctValues.map(dv => ({\n            value: dv\n          }))\n        });\n        this.ready();\n      }\n      else if (changed) {\n        keys = newKeys;\n        this.changed(\"__dynamicTableDistinctValues\", tableId, {\n          groups: distinctValues.map(dv => ({\n            value: dv\n          }))\n        });\n      }\n    });\n  };\n\n  const throttledUpdateRecords = options.throttleRefresh ? _.throttle(updateRecords, options.throttleRefresh, { leading: true, trailing: true }) : updateRecords;\n\n  const dataHandle = publicationCursor.observeChanges({\n    added() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    },\n    changed() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    },\n    removed() {\n      if (!init) {\n        throttledUpdateRecords();\n      }\n    }\n  });\n\n  updateRecords();\n\n  this.onStop(() => {\n    dataHandle.stop();\n  });\n}\nMeteor.publishComposite(\"__dynamicTableResults\", simpleTablePublication);\nMeteor.publish(\"__dynamicTableResultsArray\", simpleTablePublicationArrayNew);\nMeteor.publish(\"__dynamicTableGroupCounts\", simpleTablePublicationCounts);\nMeteor.publish(\"__dynaicTableDistinctValuesForField\", simpleTablePublicationDistinctValuesForField);\n"]},"sourceType":"script","hash":"92f95d29b05945a577644dcce83839d11192a4b4"}
