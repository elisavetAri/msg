{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\imports\\ui\\pages\\this\\this.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/pages/this/this.js","filename":"C:\\Sandbox\\test\\imports\\ui\\pages\\this\\this.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\imports\\ui\\pages\\this\\this.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/pages/this/this.js"}},"code":"module.link(\"./about.html\");\nvar ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 0);","map":{"version":3,"sources":["imports/ui/pages/this/this.js"],"names":["module","link","ReactiveVar","v"],"mappings":"AAAAA,MAAM,CAACC,IAAP,CAAY,cAAZ;AAA4B,IAAIC,WAAJ;AAAgBF,MAAM,CAACC,IAAP,CAAY,qBAAZ,EAAkC;AAACC,EAAAA,WAAD,YAAaC,CAAb,EAAe;AAACD,IAAAA,WAAW,GAACC,CAAZ;AAAc;AAA9B,CAAlC,EAAkE,CAAlE","sourcesContent":["import './about.html';\r\n\r\nimport { ReactiveVar } from 'meteor/reactive-var';\r\n\r\n//\r\n// (function() {\r\n//     var params = {},\r\n//         r = /([^&=]+)=?([^&]*)/g;\r\n//\r\n//     function d(s) {\r\n//         return decodeURIComponent(s.replace(/\\+/g, ' '));\r\n//     }\r\n//\r\n//     var match, search = window.location.search;\r\n//     while (match = r.exec(search.substring(1))) {\r\n//         params[d(match[1])] = d(match[2]);\r\n//\r\n//         if(d(match[2]) === 'true' || d(match[2]) === 'false') {\r\n//             params[d(match[1])] = d(match[2]) === 'true' ? true : false;\r\n//         }\r\n//     }\r\n//\r\n//     window.params = params;\r\n// })();\r\n//\r\n// function addStreamStopListener(stream, callback) {\r\n//     stream.addEventListener('ended', function() {\r\n//         callback();\r\n//         callback = function() {};\r\n//     }, false);\r\n//     stream.addEventListener('inactive', function() {\r\n//         callback();\r\n//         callback = function() {};\r\n//     }, false);\r\n//     stream.getTracks().forEach(function(track) {\r\n//         track.addEventListener('ended', function() {\r\n//             callback();\r\n//             callback = function() {};\r\n//         }, false);\r\n//         track.addEventListener('inactive', function() {\r\n//             callback();\r\n//             callback = function() {};\r\n//         }, false);\r\n//     });\r\n// }\r\n// var video = document.createElement('video');\r\n// video.controls = false;\r\n// var mediaElement = getHTMLMediaElement(video, {\r\n//     title: 'Recording status: inactive',\r\n//     buttons: ['full-screen'/*, 'take-snapshot'*/],\r\n//     showOnMouseEnter: false,\r\n//     width: 360,\r\n//     onTakeSnapshot: function() {\r\n//         var canvas = document.createElement('canvas');\r\n//         canvas.width = mediaElement.clientWidth;\r\n//         canvas.height = mediaElement.clientHeight;\r\n//\r\n//         var context = canvas.getContext('2d');\r\n//         context.drawImage(recordingPlayer, 0, 0, canvas.width, canvas.height);\r\n//\r\n//         window.open(canvas.toDataURL('image/png'));\r\n//     }\r\n// });\r\n// document.getElementById('recording-player').appendChild(mediaElement);\r\n//\r\n// var div = document.createElement('section');\r\n// mediaElement.media.parentNode.appendChild(div);\r\n// mediaElement.media.muted = false;\r\n// mediaElement.media.autoplay = true;\r\n// mediaElement.media.playsinline = true;\r\n// div.appendChild(mediaElement.media);\r\n//\r\n// var recordingPlayer = mediaElement.media;\r\n// var recordingMedia = document.querySelector('.recording-media');\r\n// var mediaContainerFormat = document.querySelector('.media-container-format');\r\n// var mimeType = 'video/webm';\r\n// var fileExtension = 'webm';\r\n// var type = 'video';\r\n// var recorderType;\r\n// var defaultWidth;\r\n// var defaultHeight;\r\n//\r\n// var btnStartRecording = document.querySelector('#btn-start-recording');\r\n//\r\n// window.onbeforeunload = function() {\r\n//     btnStartRecording.disabled = false;\r\n//     recordingMedia.disabled = false;\r\n//     mediaContainerFormat.disabled = false;\r\n//\r\n//     chkFixSeeking.parentNode.style.display = 'inline-block';\r\n// };\r\n//\r\n// btnStartRecording.onclick = function(event) {\r\n//     var button = btnStartRecording;\r\n//\r\n//     if(button.innerHTML === 'Stop Recording') {\r\n//         btnPauseRecording.style.display = 'none';\r\n//         button.disabled = true;\r\n//         button.disableStateWaiting = true;\r\n//         setTimeout(function() {\r\n//             button.disabled = false;\r\n//             button.disableStateWaiting = false;\r\n//         }, 2000);\r\n//\r\n//         button.innerHTML = 'Start Recording';\r\n//\r\n//         function stopStream() {\r\n//             if(button.stream && button.stream.stop) {\r\n//                 button.stream.stop();\r\n//                 button.stream = null;\r\n//             }\r\n//\r\n//             if(button.stream instanceof Array) {\r\n//                 button.stream.forEach(function(stream) {\r\n//                     stream.stop();\r\n//                 });\r\n//                 button.stream = null;\r\n//             }\r\n//\r\n//             videoBitsPerSecond = null;\r\n//             var html = 'Recording status: stopped';\r\n//             html += '<br>Size: ' + bytesToSize(button.recordRTC.getBlob().size);\r\n//             recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;\r\n//         }\r\n//\r\n//         if(button.recordRTC) {\r\n//             if(button.recordRTC.length) {\r\n//                 button.recordRTC[0].stopRecording(function(url) {\r\n//                     if(!button.recordRTC[1]) {\r\n//                         button.recordingEndedCallback(url);\r\n//                         stopStream();\r\n//\r\n//                         saveToDiskOrOpenNewTab(button.recordRTC[0]);\r\n//                         return;\r\n//                     }\r\n//\r\n//                     button.recordRTC[1].stopRecording(function(url) {\r\n//                         button.recordingEndedCallback(url);\r\n//                         stopStream();\r\n//                     });\r\n//                 });\r\n//             }\r\n//             else {\r\n//                 button.recordRTC.stopRecording(function(url) {\r\n//                     if(button.blobs && button.blobs.length) {\r\n//                         var blob = new File(button.blobs, getFileName(fileExtension), {\r\n//                             type: mimeType\r\n//                         });\r\n//\r\n//                         button.recordRTC.getBlob = function() {\r\n//                             return blob;\r\n//                         };\r\n//\r\n//                         url = URL.createObjectURL(blob);\r\n//                     }\r\n//\r\n//                     if(chkFixSeeking.checked === true) {\r\n//                         // to fix video seeking issues\r\n//                         getSeekableBlob(button.recordRTC.getBlob(), function(seekableBlob) {\r\n//                             button.recordRTC.getBlob = function() {\r\n//                                 return seekableBlob;\r\n//                             };\r\n//\r\n//                             url = URL.createObjectURL(seekableBlob);\r\n//\r\n//                             button.recordingEndedCallback(url);\r\n//                             saveToDiskOrOpenNewTab(button.recordRTC);\r\n//                             stopStream();\r\n//                         })\r\n//                         return;\r\n//                     }\r\n//\r\n//                     button.recordingEndedCallback(url);\r\n//                     saveToDiskOrOpenNewTab(button.recordRTC);\r\n//                     stopStream();\r\n//                 });\r\n//             }\r\n//         }\r\n//         return;\r\n//     }\r\n//     if(!event) return;\r\n//\r\n//     button.disabled = true;\r\n//\r\n//     var commonConfig = {\r\n//         onMediaCaptured: function(stream) {\r\n//             button.stream = stream;\r\n//             if(button.mediaCapturedCallback) {\r\n//                 button.mediaCapturedCallback();\r\n//             }\r\n//\r\n//             button.innerHTML = 'Stop Recording';\r\n//             button.disabled = false;\r\n//\r\n//             chkFixSeeking.parentNode.style.display = 'none';\r\n//         },\r\n//         onMediaStopped: function() {\r\n//             button.innerHTML = 'Start Recording';\r\n//\r\n//             if(!button.disableStateWaiting) {\r\n//                 button.disabled = false;\r\n//             }\r\n//\r\n//             chkFixSeeking.parentNode.style.display = 'inline-block';\r\n//         },\r\n//         onMediaCapturingFailed: function(error) {\r\n//             console.error('onMediaCapturingFailed:', error);\r\n//\r\n//             if(error.toString().indexOf('no audio or video tracks available') !== -1) {\r\n//                 alert('RecordRTC failed to start because there are no audio or video tracks available.');\r\n//             }\r\n//\r\n//             if(error.name === 'PermissionDeniedError' && DetectRTC.browser.name === 'Firefox') {\r\n//                 alert('Firefox requires version >= 52. Firefox also requires HTTPs.');\r\n//             }\r\n//\r\n//             commonConfig.onMediaStopped();\r\n//         }\r\n//     };\r\n//\r\n//     if(mediaContainerFormat.value === 'h264') {\r\n//         mimeType = 'video/webm\\;codecs=h264';\r\n//         fileExtension = 'mp4';\r\n//\r\n//         // video/mp4;codecs=avc1\r\n//         if(isMimeTypeSupported('video/mpeg')) {\r\n//             mimeType = 'video/mpeg';\r\n//         }\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'mkv' && isMimeTypeSupported('video/x-matroska;codecs=avc1')) {\r\n//         mimeType = 'video/x-matroska;codecs=avc1';\r\n//         fileExtension = 'mkv';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'vp8' && isMimeTypeSupported('video/webm\\;codecs=vp8')) {\r\n//         mimeType = 'video/webm\\;codecs=vp8';\r\n//         fileExtension = 'webm';\r\n//         recorderType = null;\r\n//         type = 'video';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'vp9' && isMimeTypeSupported('video/webm\\;codecs=vp9')) {\r\n//         mimeType = 'video/webm\\;codecs=vp9';\r\n//         fileExtension = 'webm';\r\n//         recorderType = null;\r\n//         type = 'video';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'pcm') {\r\n//         mimeType = 'audio/wav';\r\n//         fileExtension = 'wav';\r\n//         recorderType = StereoAudioRecorder;\r\n//         type = 'audio';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'opus' || mediaContainerFormat.value === 'ogg') {\r\n//         if(isMimeTypeSupported('audio/webm')) {\r\n//             mimeType = 'audio/webm';\r\n//             fileExtension = 'webm'; // webm\r\n//         }\r\n//\r\n//         if(isMimeTypeSupported('audio/ogg')) {\r\n//             mimeType = 'audio/ogg; codecs=opus';\r\n//             fileExtension = 'ogg'; // ogg\r\n//         }\r\n//\r\n//         recorderType = null;\r\n//         type = 'audio';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'whammy') {\r\n//         mimeType = 'video/webm';\r\n//         fileExtension = 'webm';\r\n//         recorderType = WhammyRecorder;\r\n//         type = 'video';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'WebAssembly') {\r\n//         mimeType = 'video/webm';\r\n//         fileExtension = 'webm';\r\n//         recorderType = WebAssemblyRecorder;\r\n//         type = 'video';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'gif') {\r\n//         mimeType = 'image/gif';\r\n//         fileExtension = 'gif';\r\n//         recorderType = GifRecorder;\r\n//         type = 'gif';\r\n//     }\r\n//\r\n//     if(mediaContainerFormat.value === 'default') {\r\n//         mimeType = 'video/webm';\r\n//         fileExtension = 'webm';\r\n//         recorderType = null;\r\n//         type = 'video';\r\n//     }\r\n//\r\n//     if(recordingMedia.value === 'record-audio') {\r\n//         captureAudio(commonConfig);\r\n//\r\n//         button.mediaCapturedCallback = function() {\r\n//             var options = {\r\n//                 type: type,\r\n//                 mimeType: mimeType,\r\n//                 leftChannel: params.leftChannel || false,\r\n//                 disableLogs: params.disableLogs || false\r\n//             };\r\n//\r\n//             if(params.sampleRate) {\r\n//                 options.sampleRate = parseInt(params.sampleRate);\r\n//             }\r\n//\r\n//             if(params.bufferSize) {\r\n//                 options.bufferSize = parseInt(params.bufferSize);\r\n//             }\r\n//\r\n//             if(recorderType) {\r\n//                 options.recorderType = recorderType;\r\n//             }\r\n//\r\n//             if(videoBitsPerSecond) {\r\n//                 options.videoBitsPerSecond = videoBitsPerSecond;\r\n//             }\r\n//\r\n//             if(DetectRTC.browser.name === 'Edge') {\r\n//                 options.numberOfAudioChannels = 1;\r\n//             }\r\n//\r\n//             options.ignoreMutedMedia = false;\r\n//             button.recordRTC = RecordRTC(button.stream, options);\r\n//\r\n//             button.recordingEndedCallback = function(url) {\r\n//                 setVideoURL(url);\r\n//             };\r\n//\r\n//             button.recordRTC.startRecording();\r\n//             btnPauseRecording.style.display = '';\r\n//         };\r\n//     }\r\n//\r\n//     if(recordingMedia.value === 'record-audio-plus-video') {\r\n//         captureAudioPlusVideo(commonConfig);\r\n//\r\n//         button.mediaCapturedCallback = function() {\r\n//             if(typeof MediaRecorder === 'undefined') { // opera or chrome etc.\r\n//                 button.recordRTC = [];\r\n//\r\n//                 if(!params.bufferSize) {\r\n//                     // it fixes audio issues whilst recording 720p\r\n//                     params.bufferSize = 16384;\r\n//                 }\r\n//\r\n//                 var options = {\r\n//                     type: 'audio', // hard-code to set \"audio\"\r\n//                     leftChannel: params.leftChannel || false,\r\n//                     disableLogs: params.disableLogs || false,\r\n//                     video: recordingPlayer\r\n//                 };\r\n//\r\n//                 if(params.sampleRate) {\r\n//                     options.sampleRate = parseInt(params.sampleRate);\r\n//                 }\r\n//\r\n//                 if(params.bufferSize) {\r\n//                     options.bufferSize = parseInt(params.bufferSize);\r\n//                 }\r\n//\r\n//                 if(params.frameInterval) {\r\n//                     options.frameInterval = parseInt(params.frameInterval);\r\n//                 }\r\n//\r\n//                 if(recorderType) {\r\n//                     options.recorderType = recorderType;\r\n//                 }\r\n//\r\n//                 if(videoBitsPerSecond) {\r\n//                     options.videoBitsPerSecond = videoBitsPerSecond;\r\n//                 }\r\n//\r\n//                 options.ignoreMutedMedia = false;\r\n//                 var audioRecorder = RecordRTC(button.stream, options);\r\n//\r\n//                 options.type = type;\r\n//                 var videoRecorder = RecordRTC(button.stream, options);\r\n//\r\n//                 // to sync audio/video playbacks in browser!\r\n//                 videoRecorder.initRecorder(function() {\r\n//                     audioRecorder.initRecorder(function() {\r\n//                         audioRecorder.startRecording();\r\n//                         videoRecorder.startRecording();\r\n//                         btnPauseRecording.style.display = '';\r\n//                     });\r\n//                 });\r\n//\r\n//                 button.recordRTC.push(audioRecorder, videoRecorder);\r\n//\r\n//                 button.recordingEndedCallback = function() {\r\n//                     var audio = new Audio();\r\n//                     audio.src = audioRecorder.toURL();\r\n//                     audio.controls = true;\r\n//                     audio.autoplay = true;\r\n//\r\n//                     recordingPlayer.parentNode.appendChild(document.createElement('hr'));\r\n//                     recordingPlayer.parentNode.appendChild(audio);\r\n//\r\n//                     if(audio.paused) audio.play();\r\n//                 };\r\n//                 return;\r\n//             }\r\n//\r\n//             var options = {\r\n//                 type: type,\r\n//                 mimeType: mimeType,\r\n//                 disableLogs: params.disableLogs || false,\r\n//                 getNativeBlob: false, // enable it for longer recordings\r\n//                 video: recordingPlayer\r\n//             };\r\n//\r\n//             if(recorderType) {\r\n//                 options.recorderType = recorderType;\r\n//\r\n//                 if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\r\n//                     options.canvas = options.video = {\r\n//                         width: defaultWidth || 320,\r\n//                         height: defaultHeight || 240\r\n//                     };\r\n//                 }\r\n//             }\r\n//\r\n//             if(videoBitsPerSecond) {\r\n//                 options.videoBitsPerSecond = videoBitsPerSecond;\r\n//             }\r\n//\r\n//             if(timeSlice && typeof MediaRecorder !== 'undefined') {\r\n//                 options.timeSlice = timeSlice;\r\n//                 button.blobs = [];\r\n//                 options.ondataavailable = function(blob) {\r\n//                     button.blobs.push(blob);\r\n//                 };\r\n//             }\r\n//\r\n//             options.ignoreMutedMedia = false;\r\n//             button.recordRTC = RecordRTC(button.stream, options);\r\n//\r\n//             button.recordingEndedCallback = function(url) {\r\n//                 setVideoURL(url);\r\n//             };\r\n//\r\n//             button.recordRTC.startRecording();\r\n//             btnPauseRecording.style.display = '';\r\n//             recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = '<img src=\"https://cdn.webrtc-experiment.com/images/progress.gif\">';\r\n//         };\r\n//     }\r\n//\r\n//     if(recordingMedia.value === 'record-screen') {\r\n//         captureScreen(commonConfig);\r\n//\r\n//         button.mediaCapturedCallback = function() {\r\n//             var options = {\r\n//                 type: type,\r\n//                 mimeType: mimeType,\r\n//                 disableLogs: params.disableLogs || false,\r\n//                 getNativeBlob: false, // enable it for longer recordings\r\n//                 video: recordingPlayer\r\n//             };\r\n//\r\n//             if(recorderType) {\r\n//                 options.recorderType = recorderType;\r\n//\r\n//                 if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\r\n//                     options.canvas = options.video = {\r\n//                         width: defaultWidth || 320,\r\n//                         height: defaultHeight || 240\r\n//                     };\r\n//                 }\r\n//             }\r\n//\r\n//             if(videoBitsPerSecond) {\r\n//                 options.videoBitsPerSecond = videoBitsPerSecond;\r\n//             }\r\n//\r\n//             options.ignoreMutedMedia = false;\r\n//             button.recordRTC = RecordRTC(button.stream, options);\r\n//\r\n//             button.recordingEndedCallback = function(url) {\r\n//                 setVideoURL(url);\r\n//             };\r\n//\r\n//             button.recordRTC.startRecording();\r\n//             btnPauseRecording.style.display = '';\r\n//         };\r\n//     }\r\n//\r\n//     // note: audio+tab is supported in Chrome 50+\r\n//     // todo: add audio+tab recording\r\n//     if(recordingMedia.value === 'record-audio-plus-screen') {\r\n//         captureAudioPlusScreen(commonConfig);\r\n//\r\n//         button.mediaCapturedCallback = function() {\r\n//             var options = {\r\n//                 type: type,\r\n//                 mimeType: mimeType,\r\n//                 disableLogs: params.disableLogs || false,\r\n//                 getNativeBlob: false, // enable it for longer recordings\r\n//                 video: recordingPlayer\r\n//             };\r\n//\r\n//             if(recorderType) {\r\n//                 options.recorderType = recorderType;\r\n//\r\n//                 if(recorderType == WhammyRecorder || recorderType == GifRecorder || recorderType == WebAssemblyRecorder) {\r\n//                     options.canvas = options.video = {\r\n//                         width: defaultWidth || 320,\r\n//                         height: defaultHeight || 240\r\n//                     };\r\n//                 }\r\n//             }\r\n//\r\n//             if(videoBitsPerSecond) {\r\n//                 options.videoBitsPerSecond = videoBitsPerSecond;\r\n//             }\r\n//\r\n//             options.ignoreMutedMedia = false;\r\n//             button.recordRTC = RecordRTC(button.stream, options);\r\n//\r\n//             button.recordingEndedCallback = function(url) {\r\n//                 setVideoURL(url);\r\n//             };\r\n//\r\n//             button.recordRTC.startRecording();\r\n//             btnPauseRecording.style.display = '';\r\n//         };\r\n//     }\r\n// };\r\n//\r\n// function captureVideo(config) {\r\n//     captureUserMedia({video: true}, function(videoStream) {\r\n//         config.onMediaCaptured(videoStream);\r\n//\r\n//         addStreamStopListener(videoStream, function() {\r\n//             config.onMediaStopped();\r\n//         });\r\n//     }, function(error) {\r\n//         config.onMediaCapturingFailed(error);\r\n//     });\r\n// }\r\n//\r\n// function captureAudio(config) {\r\n//     captureUserMedia({audio: true}, function(audioStream) {\r\n//         config.onMediaCaptured(audioStream);\r\n//\r\n//         addStreamStopListener(audioStream, function() {\r\n//             config.onMediaStopped();\r\n//         });\r\n//     }, function(error) {\r\n//         config.onMediaCapturingFailed(error);\r\n//     });\r\n// }\r\n//\r\n// function captureAudioPlusVideo(config) {\r\n//     captureUserMedia({video: true, audio: true}, function(audioVideoStream) {\r\n//         config.onMediaCaptured(audioVideoStream);\r\n//\r\n//         if(audioVideoStream instanceof Array) {\r\n//             audioVideoStream.forEach(function(stream) {\r\n//                 addStreamStopListener(stream, function() {\r\n//                     config.onMediaStopped();\r\n//                 });\r\n//             });\r\n//             return;\r\n//         }\r\n//\r\n//         addStreamStopListener(audioVideoStream, function() {\r\n//             config.onMediaStopped();\r\n//         });\r\n//     }, function(error) {\r\n//         config.onMediaCapturingFailed(error);\r\n//     });\r\n// }\r\n//\r\n// var MY_DOMAIN = 'webrtc-experiment.com';\r\n//\r\n// function isMyOwnDomain() {\r\n//     // replace \"webrtc-experiment.com\" with your own domain name\r\n//     return document.domain.indexOf(MY_DOMAIN) !== -1;\r\n// }\r\n//\r\n// function isLocalHost() {\r\n//     // \"chrome.exe\" --enable-usermedia-screen-capturing\r\n//     // or firefox => about:config => \"media.getusermedia.screensharing.allowed_domains\" => add \"localhost\"\r\n//     return document.domain === 'localhost' || document.domain === 'http://127.0.0.1:3000/';\r\n// }\r\n//\r\n// var videoBitsPerSecond;\r\n//\r\n// function setVideoBitrates() {\r\n//     var select = document.querySelector('.media-bitrates');\r\n//     var value = select.value;\r\n//\r\n//     if(value == 'default') {\r\n//         videoBitsPerSecond = null;\r\n//         return;\r\n//     }\r\n//\r\n//     videoBitsPerSecond = parseInt(value);\r\n// }\r\n//\r\n// function getFrameRates(mediaConstraints) {\r\n//     if(!mediaConstraints.video) {\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     var select = document.querySelector('.media-framerates');\r\n//     var value = select.value;\r\n//\r\n//     if(value == 'default') {\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     value = parseInt(value);\r\n//\r\n//     if(DetectRTC.browser.name === 'Firefox') {\r\n//         mediaConstraints.video.frameRate = value;\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     if(!mediaConstraints.video.mandatory) {\r\n//         mediaConstraints.video.mandatory = {};\r\n//         mediaConstraints.video.optional = [];\r\n//     }\r\n//\r\n//     var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;\r\n//     if(isScreen) {\r\n//         mediaConstraints.video.mandatory.maxFrameRate = value;\r\n//     }\r\n//     else {\r\n//         mediaConstraints.video.mandatory.minFrameRate = value;\r\n//     }\r\n//\r\n//     return mediaConstraints;\r\n// }\r\n//\r\n// function setGetFromLocalStorage(selectors) {\r\n//     selectors.forEach(function(selector) {\r\n//         var storageItem = selector.replace(/\\.|#/g, '');\r\n//         if(localStorage.getItem(storageItem)) {\r\n//             document.querySelector(selector).value = localStorage.getItem(storageItem);\r\n//         }\r\n//\r\n//         addEventListenerToUploadLocalStorageItem(selector, ['change', 'blur'], function() {\r\n//             localStorage.setItem(storageItem, document.querySelector(selector).value);\r\n//         });\r\n//     });\r\n// }\r\n//\r\n// function addEventListenerToUploadLocalStorageItem(selector, arr, callback) {\r\n//     arr.forEach(function(event) {\r\n//         document.querySelector(selector).addEventListener(event, callback, false);\r\n//     });\r\n// }\r\n//\r\n// setGetFromLocalStorage(['.media-resolutions', '.media-framerates', '.media-bitrates', '.recording-media', '.media-container-format']);\r\n//\r\n// function getVideoResolutions(mediaConstraints) {\r\n//     if(!mediaConstraints.video) {\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     var select = document.querySelector('.media-resolutions');\r\n//     var value = select.value;\r\n//\r\n//     if(value == 'default') {\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     value = value.split('x');\r\n//\r\n//     if(value.length != 2) {\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     defaultWidth = parseInt(value[0]);\r\n//     defaultHeight = parseInt(value[1]);\r\n//\r\n//     if(DetectRTC.browser.name === 'Firefox') {\r\n//         mediaConstraints.video.width = defaultWidth;\r\n//         mediaConstraints.video.height = defaultHeight;\r\n//         return mediaConstraints;\r\n//     }\r\n//\r\n//     if(!mediaConstraints.video.mandatory) {\r\n//         mediaConstraints.video.mandatory = {};\r\n//         mediaConstraints.video.optional = [];\r\n//     }\r\n//\r\n//     var isScreen = recordingMedia.value.toString().toLowerCase().indexOf('screen') != -1;\r\n//\r\n//     if(isScreen) {\r\n//         mediaConstraints.video.mandatory.maxWidth = defaultWidth;\r\n//         mediaConstraints.video.mandatory.maxHeight = defaultHeight;\r\n//     }\r\n//     else {\r\n//         mediaConstraints.video.mandatory.minWidth = defaultWidth;\r\n//         mediaConstraints.video.mandatory.minHeight = defaultHeight;\r\n//     }\r\n//\r\n//     return mediaConstraints;\r\n// }\r\n//\r\n// function captureUserMedia(mediaConstraints, successCallback, errorCallback) {\r\n//     if(mediaConstraints.video == true) {\r\n//         mediaConstraints.video = {};\r\n//     }\r\n//\r\n//     setVideoBitrates();\r\n//\r\n//     mediaConstraints = getVideoResolutions(mediaConstraints);\r\n//     mediaConstraints = getFrameRates(mediaConstraints);\r\n//\r\n//     var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));\r\n//     if(isBlackBerry && !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia)) {\r\n//         navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n//         navigator.getUserMedia(mediaConstraints, successCallback, errorCallback);\r\n//         return;\r\n//     }\r\n//\r\n//     navigator.mediaDevices.getUserMedia(mediaConstraints).then(function(stream) {\r\n//         successCallback(stream);\r\n//\r\n//         setVideoURL(stream, true);\r\n//     }).catch(function(error) {\r\n//         if(error && (error.name === 'ConstraintNotSatisfiedError' || error.name === 'OverconstrainedError')) {\r\n//             alert('Your camera or browser does NOT supports selected resolutions or frame-rates. \\n\\nPlease select \"default\" resolutions.');\r\n//         }\r\n//         else if(error && error.message) {\r\n//             alert(error.message);\r\n//         }\r\n//         else {\r\n//             alert('Unable to make getUserMedia request. Please check browser console logs.');\r\n//         }\r\n//\r\n//         errorCallback(error);\r\n//     });\r\n// }\r\n//\r\n// function setMediaContainerFormat(arrayOfOptionsSupported) {\r\n//     var options = Array.prototype.slice.call(\r\n//         mediaContainerFormat.querySelectorAll('option')\r\n//     );\r\n//\r\n//     var localStorageItem;\r\n//     if(localStorage.getItem('media-container-format')) {\r\n//         localStorageItem = localStorage.getItem('media-container-format');\r\n//     }\r\n//\r\n//     var selectedItem;\r\n//     options.forEach(function(option) {\r\n//         option.disabled = true;\r\n//\r\n//         if(arrayOfOptionsSupported.indexOf(option.value) !== -1) {\r\n//             option.disabled = false;\r\n//\r\n//             if(localStorageItem && arrayOfOptionsSupported.indexOf(localStorageItem) != -1) {\r\n//                 if(option.value != localStorageItem) return;\r\n//                 option.selected = true;\r\n//                 selectedItem = option;\r\n//                 return;\r\n//             }\r\n//\r\n//             if(!selectedItem) {\r\n//                 option.selected = true;\r\n//                 selectedItem = option;\r\n//             }\r\n//         }\r\n//     });\r\n// }\r\n//\r\n// function isMimeTypeSupported(mimeType) {\r\n//     if(typeof MediaRecorder === 'undefined') {\r\n//         return false;\r\n//     }\r\n//\r\n//     if(typeof MediaRecorder.isTypeSupported !== 'function') {\r\n//         return true;\r\n//     }\r\n//\r\n//     return MediaRecorder.isTypeSupported(mimeType);\r\n// }\r\n//\r\n// recordingMedia.onchange = function() {\r\n//     if(recordingMedia.value === 'record-audio') {\r\n//         var recordingOptions = [];\r\n//\r\n//         if(isMimeTypeSupported('audio/webm')) {\r\n//             recordingOptions.push('opus');\r\n//         }\r\n//\r\n//         if(isMimeTypeSupported('audio/ogg')) {\r\n//             recordingOptions.push('ogg');\r\n//         }\r\n//\r\n//         recordingOptions.push('pcm');\r\n//\r\n//         setMediaContainerFormat(recordingOptions);\r\n//         return;\r\n//     }\r\n//\r\n//     var isChrome = !!window.chrome && !(!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0);\r\n//\r\n//     var recordingOptions = ['vp8']; // MediaStreamRecorder with vp8\r\n//\r\n//     if(isMimeTypeSupported('video/webm\\;codecs=vp9')) {\r\n//         recordingOptions.push('vp9'); // MediaStreamRecorder with vp9\r\n//     }\r\n//\r\n//     if(isMimeTypeSupported('video/webm\\;codecs=h264')) {\r\n//         recordingOptions.push('h264'); // MediaStreamRecorder with h264\r\n//     }\r\n//\r\n//     if(isMimeTypeSupported('video/x-matroska;codecs=avc1')) {\r\n//         recordingOptions.push('mkv'); // MediaStreamRecorder with mkv/matroska\r\n//     }\r\n//\r\n//     recordingOptions.push('gif'); // GifRecorder\r\n//\r\n//     if(DetectRTC.browser.name == 'Chrome') {\r\n//         recordingOptions.push('whammy'); // WhammyRecorder\r\n//     }\r\n//\r\n//     if(DetectRTC.browser.name == 'Chrome') {\r\n//         recordingOptions.push('WebAssembly'); // WebAssemblyRecorder\r\n//     }\r\n//\r\n//     recordingOptions.push('default'); // Default mimeType for MediaStreamRecorder\r\n//\r\n//     setMediaContainerFormat(recordingOptions);\r\n// };\r\n// recordingMedia.onchange();\r\n//\r\n// if(typeof MediaRecorder === 'undefined' && (DetectRTC.browser.name === 'Edge' || DetectRTC.browser.name === 'Safari')) {\r\n//     // webp isn't supported in Microsoft Edge\r\n//     // neither MediaRecorder API\r\n//     // so lets disable both video/screen recording options\r\n//\r\n//     console.warn('Neither MediaRecorder API nor webp is supported in ' + DetectRTC.browser.name + '. You cam merely record audio.');\r\n//\r\n//     recordingMedia.innerHTML = '<option value=\"record-audio\">Audio</option>';\r\n//     setMediaContainerFormat(['pcm']);\r\n// }\r\n//\r\n// function stringify(obj) {\r\n//     var result = '';\r\n//     Object.keys(obj).forEach(function(key) {\r\n//         if(typeof obj[key] === 'function') {\r\n//             return;\r\n//         }\r\n//\r\n//         if(result.length) {\r\n//             result += ',';\r\n//         }\r\n//\r\n//         result += key + ': ' + obj[key];\r\n//     });\r\n//\r\n//     return result;\r\n// }\r\n//\r\n// function mediaRecorderToStringify(mediaRecorder) {\r\n//     var result = '';\r\n//     result += 'mimeType: ' + mediaRecorder.mimeType;\r\n//     result += ', state: ' + mediaRecorder.state;\r\n//     result += ', audioBitsPerSecond: ' + mediaRecorder.audioBitsPerSecond;\r\n//     result += ', videoBitsPerSecond: ' + mediaRecorder.videoBitsPerSecond;\r\n//     if(mediaRecorder.stream) {\r\n//         result += ', streamid: ' + mediaRecorder.stream.id;\r\n//         result += ', stream-active: ' + mediaRecorder.stream.active;\r\n//     }\r\n//     return result;\r\n// }\r\n//\r\n// function getFailureReport() {\r\n//     var info = 'RecordRTC seems failed. \\n\\n' + stringify(DetectRTC.browser) + '\\n\\n' + DetectRTC.osName + ' ' + DetectRTC.osVersion + '\\n';\r\n//\r\n//     if (typeof recorderType !== 'undefined' && recorderType) {\r\n//         info += '\\nrecorderType: ' + recorderType.name;\r\n//     }\r\n//\r\n//     if (typeof mimeType !== 'undefined') {\r\n//         info += '\\nmimeType: ' + mimeType;\r\n//     }\r\n//\r\n//     Array.prototype.slice.call(document.querySelectorAll('select')).forEach(function(select) {\r\n//         info += '\\n' + (select.id || select.className) + ': ' + select.value;\r\n//     });\r\n//\r\n//     if (btnStartRecording.recordRTC) {\r\n//         info += '\\n\\ninternal-recorder: ' + btnStartRecording.recordRTC.getInternalRecorder().name;\r\n//\r\n//         if(btnStartRecording.recordRTC.getInternalRecorder().getAllStates) {\r\n//             info += '\\n\\nrecorder-states: ' + btnStartRecording.recordRTC.getInternalRecorder().getAllStates();\r\n//         }\r\n//     }\r\n//\r\n//     if(btnStartRecording.stream) {\r\n//         info += '\\n\\naudio-tracks: ' + getTracks(btnStartRecording.stream, 'audio').length;\r\n//         info += '\\nvideo-tracks: ' + getTracks(btnStartRecording.stream, 'video').length;\r\n//         info += '\\nstream-active? ' + !!btnStartRecording.stream.active;\r\n//\r\n//         btnStartRecording.stream.getTracks().forEach(function(track) {\r\n//             info += '\\n' + track.kind + '-track-' + (track.label || track.id) + ': (enabled: ' + !!track.enabled + ', readyState: ' + track.readyState + ', muted: ' + !!track.muted + ')';\r\n//\r\n//             if(track.getConstraints && Object.keys(track.getConstraints()).length) {\r\n//                 info += '\\n' + track.kind + '-track-getConstraints: ' + stringify(track.getConstraints());\r\n//             }\r\n//\r\n//             if(track.getSettings && Object.keys(track.getSettings()).length) {\r\n//                 info += '\\n' + track.kind + '-track-getSettings: ' + stringify(track.getSettings());\r\n//             }\r\n//         });\r\n//     }\r\n//\r\n//     if(timeSlice && btnStartRecording.recordRTC) {\r\n//         info += '\\ntimeSlice: ' + timeSlice;\r\n//\r\n//         if(btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs) {\r\n//             var blobSizes = [];\r\n//             btnStartRecording.recordRTC.getInternalRecorder().getArrayOfBlobs().forEach(function(blob) {\r\n//                 blobSizes.push(blob.size);\r\n//             });\r\n//             info += '\\nblobSizes: ' + blobSizes;\r\n//         }\r\n//     }\r\n//\r\n//     else if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getBlob()) {\r\n//         info += '\\n\\nblobSize: ' + bytesToSize(btnStartRecording.recordRTC.getBlob().size);\r\n//     }\r\n//\r\n//     if(btnStartRecording.recordRTC && btnStartRecording.recordRTC.getInternalRecorder() && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder && btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder()) {\r\n//         info += '\\n\\ngetInternalRecorder: ' + mediaRecorderToStringify(btnStartRecording.recordRTC.getInternalRecorder().getInternalRecorder());\r\n//     }\r\n//\r\n//     return info;\r\n// }\r\n//\r\n// function saveToDiskOrOpenNewTab(recordRTC) {\r\n//     if(!recordRTC.getBlob().size) {\r\n//         var info = getFailureReport();\r\n//         console.log('blob', recordRTC.getBlob());\r\n//         console.log('recordrtc instance', recordRTC);\r\n//         console.log('report', info);\r\n//\r\n//         if(mediaContainerFormat.value !== 'default') {\r\n//             alert('RecordRTC seems failed recording using ' + mediaContainerFormat.value + '. Please choose \"default\" option from the drop down and record again.');\r\n//         }\r\n//         else {\r\n//             alert('RecordRTC seems failed. Unexpected issue. You can read the email in your console log. \\n\\nPlease report using disqus chat below.');\r\n//         }\r\n//\r\n//         if(mediaContainerFormat.value !== 'vp9' && DetectRTC.browser.name === 'Chrome') {\r\n//             alert('Please record using VP9 encoder. (select from the dropdown)');\r\n//         }\r\n//     }\r\n//\r\n//     var fileName = getFileName(fileExtension);\r\n//\r\n//     document.querySelector('#save-to-disk').parentNode.style.display = 'block';\r\n//     document.querySelector('#save-to-disk').onclick = function() {\r\n//         if(!recordRTC) return alert('No recording found.');\r\n//\r\n//         var file = new File([recordRTC.getBlob()], fileName, {\r\n//             type: mimeType\r\n//         });\r\n//\r\n//         invokeSaveAsDialog(file, file.name);\r\n//     };\r\n//\r\n//     document.querySelector('#open-new-tab').onclick = function() {\r\n//         if(!recordRTC) return alert('No recording found.');\r\n//\r\n//         var file = new File([recordRTC.getBlob()], fileName, {\r\n//             type: mimeType\r\n//         });\r\n//\r\n//         window.open(URL.createObjectURL(file));\r\n//     };\r\n//\r\n//     // upload to PHP server\r\n//     if(isMyOwnDomain()) {\r\n//         document.querySelector('#upload-to-php').disabled = true;\r\n//         document.querySelector('#upload-to-php').style.display = 'none';\r\n//     }\r\n//     else {\r\n//         document.querySelector('#upload-to-php').disabled = false;\r\n//     }\r\n//\r\n//     document.querySelector('#upload-to-php').onclick = function() {\r\n//         if(isMyOwnDomain()) {\r\n//             alert('PHP Upload is not available on this domain.');\r\n//             return;\r\n//         }\r\n//\r\n//         if(!recordRTC) return alert('No recording found.');\r\n//         this.disabled = true;\r\n//\r\n//         var button = this;\r\n//         uploadToPHPServer(fileName, recordRTC, function(progress, fileURL) {\r\n//             if(progress === 'ended') {\r\n//                 button.disabled = false;\r\n//                 button.innerHTML = 'Click to download from server';\r\n//                 button.onclick = function() {\r\n//                     SaveFileURLToDisk(fileURL, fileName);\r\n//                 };\r\n//\r\n//                 setVideoURL(fileURL);\r\n//\r\n//                 var html = 'Uploaded to PHP.<br>Download using below link:<br>';\r\n//                 html += '<a href=\"'+fileURL+'\" download=\"'+fileName+'\" style=\"color: yellow; display: block; margin-top: 15px;\">'+fileName+'</a>';\r\n//                 recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = html;\r\n//                 return;\r\n//             }\r\n//             button.innerHTML = progress;\r\n//             recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = progress;\r\n//         });\r\n//     };\r\n//\r\n//     // upload to YouTube!\r\n//     document.querySelector('#upload-to-youtube').disabled = false;\r\n//     document.querySelector('#upload-to-youtube').onclick = function() {\r\n//         if(!recordRTC) return alert('No recording found.');\r\n//         this.disabled = true;\r\n//\r\n//         if(isLocalHost()) {\r\n//             alert('This feature is NOT available on localhost.');\r\n//             return;\r\n//         }\r\n//\r\n//         if(isMyOwnDomain() === false) {\r\n//             var url = 'https://github.com/muaz-khan/RecordRTC/wiki/Upload-to-YouTube';\r\n//             alert('YouTube API key is configured to work only on webrtc-experiment.com. Please create your own YouTube key + oAuth client-id and use it instead.\\n\\nWiki page: ' + url);\r\n//\r\n//             // check instructions on the wiki page\r\n//             location.href = url;\r\n//             return;\r\n//         }\r\n//\r\n//         var button = this;\r\n//         uploadToYouTube(fileName, recordRTC, function(percentageComplete, fileURL) {\r\n//             if(percentageComplete == 'uploaded') {\r\n//                 button.disabled = false;\r\n//                 button.innerHTML = 'Uploaded. However YouTube is still processing.';\r\n//                 button.onclick = function() {\r\n//                     window.open(fileURL);\r\n//                 };\r\n//                 return;\r\n//             }\r\n//             if(percentageComplete == 'processed') {\r\n//                 button.disabled = false;\r\n//                 button.innerHTML = 'Uploaded & Processed. Click to open YouTube video.';\r\n//                 button.onclick = function() {\r\n//                     window.open(fileURL);\r\n//                 };\r\n//\r\n//                 document.querySelector('h1').innerHTML = 'Your video has been uploaded.';\r\n//                 window.scrollTo(0, 0);\r\n//\r\n//                 alert('Your video has been uploaded.');\r\n//                 return;\r\n//             }\r\n//             if(percentageComplete == 'failed') {\r\n//                 button.disabled = false;\r\n//                 button.innerHTML = 'YouTube failed transcoding the video.';\r\n//                 button.onclick = function() {\r\n//                     window.open(fileURL);\r\n//                 };\r\n//                 return;\r\n//             }\r\n//             button.innerHTML = percentageComplete + '% uploaded to YouTube.';\r\n//         });\r\n//     };\r\n// }\r\n//\r\n// function uploadToPHPServer(fileName, recordRTC, callback) {\r\n//     var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.getBlob();\r\n//\r\n//     blob = new File([blob], getFileName(fileExtension), {\r\n//         type: mimeType\r\n//     });\r\n//\r\n//     // create FormData\r\n//     var formData = new FormData();\r\n//     formData.append('video-filename', fileName);\r\n//     formData.append('video-blob', blob);\r\n//\r\n//     callback('Uploading recorded-file to server.');\r\n//\r\n//     // var upload_url = 'https://your-domain.com/files-uploader/';\r\n//     var upload_url = 'RecordRTC-to-PHP/save.php';\r\n//\r\n//     // var upload_directory = upload_url;\r\n//     var upload_directory = 'RecordRTC-to-PHP/uploads/';\r\n//\r\n//     makeXMLHttpRequest(upload_url, formData, function(progress) {\r\n//         if (progress !== 'upload-ended') {\r\n//             callback(progress);\r\n//             return;\r\n//         }\r\n//\r\n//         callback('ended', upload_directory + fileName);\r\n//     });\r\n// }\r\n//\r\n// function makeXMLHttpRequest(url, data, callback) {\r\n//     var request = new XMLHttpRequest();\r\n//     request.onreadystatechange = function() {\r\n//         if (request.readyState == 4 && request.status == 200) {\r\n//             if(request.responseText === 'success') {\r\n//                 callback('upload-ended');\r\n//                 return;\r\n//             }\r\n//\r\n//             document.querySelector('.header').parentNode.style = 'text-align: left; color: red; padding: 5px 10px;';\r\n//             document.querySelector('.header').parentNode.innerHTML = request.responseText;\r\n//         }\r\n//     };\r\n//\r\n//     request.upload.onloadstart = function() {\r\n//         callback('Upload started...');\r\n//     };\r\n//\r\n//     request.upload.onprogress = function(event) {\r\n//         callback('Upload Progress ' + Math.round(event.loaded / event.total * 100) + \"%\");\r\n//     };\r\n//\r\n//     request.upload.onload = function() {\r\n//         callback('progress-about-to-end');\r\n//     };\r\n//\r\n//     request.upload.onload = function() {\r\n//         callback('Getting File URL..');\r\n//     };\r\n//\r\n//     request.upload.onerror = function(error) {\r\n//         callback('Failed to upload to server');\r\n//     };\r\n//\r\n//     request.upload.onabort = function(error) {\r\n//         callback('Upload aborted.');\r\n//     };\r\n//\r\n//     request.open('POST', url);\r\n//     request.send(data);\r\n// }\r\n//\r\n// function getRandomString() {\r\n//     if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {\r\n//         var a = window.crypto.getRandomValues(new Uint32Array(3)),\r\n//             token = '';\r\n//         for (var i = 0, l = a.length; i < l; i++) {\r\n//             token += a[i].toString(36);\r\n//         }\r\n//         return token;\r\n//     } else {\r\n//         return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '');\r\n//     }\r\n// }\r\n//\r\n// function getFileName(fileExtension) {\r\n//     var d = new Date();\r\n//     var year = d.getUTCFullYear();\r\n//     var month = d.getUTCMonth();\r\n//     var date = d.getUTCDate();\r\n//     return 'RecordRTC-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;\r\n// }\r\n//\r\n// function SaveFileURLToDisk(fileUrl, fileName) {\r\n//     var hyperlink = document.createElement('a');\r\n//     hyperlink.href = fileUrl;\r\n//     hyperlink.target = '_blank';\r\n//     hyperlink.download = fileName || fileUrl;\r\n//\r\n//     (document.body || document.documentElement).appendChild(hyperlink);\r\n//     hyperlink.onclick = function() {\r\n//        (document.body || document.documentElement).removeChild(hyperlink);\r\n//\r\n//        // required for Firefox\r\n//        window.URL.revokeObjectURL(hyperlink.href);\r\n//     };\r\n//\r\n//     var mouseEvent = new MouseEvent('click', {\r\n//         view: window,\r\n//         bubbles: true,\r\n//         cancelable: true\r\n//     });\r\n//\r\n//     hyperlink.dispatchEvent(mouseEvent);\r\n// }\r\n//\r\n// function getURL(arg) {\r\n//     var url = arg;\r\n//\r\n//     if(arg instanceof Blob || arg instanceof File) {\r\n//         url = URL.createObjectURL(arg);\r\n//     }\r\n//\r\n//     if(arg instanceof RecordRTC || arg.getBlob) {\r\n//         url = URL.createObjectURL(arg.getBlob());\r\n//     }\r\n//\r\n//     if(arg instanceof MediaStream || arg.getTracks) {\r\n//         // url = URL.createObjectURL(arg);\r\n//     }\r\n//\r\n//     return url;\r\n// }\r\n//\r\n// function setVideoURL(arg, forceNonImage) {\r\n//     var url = getURL(arg);\r\n//\r\n//     var parentNode = recordingPlayer.parentNode;\r\n//     parentNode.removeChild(recordingPlayer);\r\n//     parentNode.innerHTML = '';\r\n//\r\n//     var elem = 'video';\r\n//     if(type == 'gif' && !forceNonImage) {\r\n//         elem = 'img';\r\n//     }\r\n//     if(type == 'audio') {\r\n//         elem = 'audio';\r\n//     }\r\n//\r\n//     recordingPlayer = document.createElement(elem);\r\n//\r\n//     if(arg instanceof MediaStream) {\r\n//         recordingPlayer.muted = true;\r\n//     }\r\n//\r\n//     recordingPlayer.addEventListener('loadedmetadata', function() {\r\n//         if(navigator.userAgent.toLowerCase().indexOf('android') == -1) return;\r\n//\r\n//         // android\r\n//         setTimeout(function() {\r\n//             if(typeof recordingPlayer.play === 'function') {\r\n//                 recordingPlayer.play();\r\n//             }\r\n//         }, 2000);\r\n//     }, false);\r\n//\r\n//     recordingPlayer.poster = '';\r\n//\r\n//     if(arg instanceof MediaStream) {\r\n//         recordingPlayer.srcObject = arg;\r\n//     }\r\n//     else {\r\n//         recordingPlayer.src = url;\r\n//     }\r\n//\r\n//     if(typeof recordingPlayer.play === 'function') {\r\n//         recordingPlayer.play();\r\n//     }\r\n//\r\n//     recordingPlayer.addEventListener('ended', function() {\r\n//         url = getURL(arg);\r\n//\r\n//         if(arg instanceof MediaStream) {\r\n//             recordingPlayer.srcObject = arg;\r\n//         }\r\n//         else {\r\n//             recordingPlayer.src = url;\r\n//         }\r\n//     });\r\n//\r\n//     parentNode.appendChild(recordingPlayer);\r\n// }\r\n// function captureScreen(config) {\r\n//     if (navigator.getDisplayMedia) {\r\n//         navigator.getDisplayMedia({\r\n//             video: true\r\n//         }).then(screenStream => {\r\n//             config.onMediaCaptured(screenStream);\r\n//\r\n//             addStreamStopListener(screenStream, function() {\r\n//                 // config.onMediaStopped();\r\n//\r\n//                 btnStartRecording.onclick();\r\n//             });\r\n//\r\n//             setVideoURL(screenStream, true);\r\n//         }).catch(function(error) {\r\n//             config.onMediaCapturingFailed(error);\r\n//         });\r\n//     } else if (navigator.mediaDevices.getDisplayMedia) {\r\n//         navigator.mediaDevices.getDisplayMedia({\r\n//             video: true\r\n//         }).then(screenStream => {\r\n//             config.onMediaCaptured(screenStream);\r\n//\r\n//             addStreamStopListener(screenStream, function() {\r\n//                 // config.onMediaStopped();\r\n//\r\n//                 btnStartRecording.onclick();\r\n//             });\r\n//\r\n//             setVideoURL(screenStream, true);\r\n//         }).catch(function(error) {\r\n//             config.onMediaCapturingFailed(error);\r\n//         });\r\n//     } else {\r\n//         var error = 'getDisplayMedia API are not supported in this browser.';\r\n//         config.onMediaCapturingFailed(error);\r\n//         alert(error);\r\n//     }\r\n// }\r\n//\r\n// function captureAudioPlusScreen(config) {\r\n//     if (navigator.getDisplayMedia) {\r\n//         navigator.getDisplayMedia({\r\n//             video: true\r\n//         }).then(screenStream => {\r\n//             navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {\r\n//                 screenStream.addTrack(mic.getTracks()[0]);\r\n//\r\n//                 config.onMediaCaptured(screenStream);\r\n//\r\n//                 addStreamStopListener(screenStream, function() {\r\n//                     // config.onMediaStopped();\r\n//\r\n//                     btnStartRecording.onclick();\r\n//                 });\r\n//\r\n//                 setVideoURL(screenStream, true);\r\n//             });\r\n//         }).catch(function(error) {\r\n//             config.onMediaCapturingFailed(error);\r\n//         });\r\n//     } else if (navigator.mediaDevices.getDisplayMedia) {\r\n//         navigator.mediaDevices.getDisplayMedia({\r\n//             video: true\r\n//         }).then(screenStream => {\r\n//             navigator.mediaDevices.getUserMedia({audio:true}).then(function(mic) {\r\n//                 screenStream.addTrack(mic.getTracks()[0]);\r\n//\r\n//                 config.onMediaCaptured(screenStream);\r\n//\r\n//                 addStreamStopListener(screenStream, function() {\r\n//                     // config.onMediaStopped();\r\n//\r\n//                     btnStartRecording.onclick();\r\n//                 });\r\n//\r\n//                 setVideoURL(screenStream, true);\r\n//             });\r\n//         }).catch(function(error) {\r\n//             config.onMediaCapturingFailed(error);\r\n//         });\r\n//     } else {\r\n//         var error = 'getDisplayMedia API are not supported in this browser.';\r\n//         config.onMediaCapturingFailed(error);\r\n//         alert(error);\r\n//     }\r\n// }\r\n//             function uploadToYouTube(fileName, recordRTC, callback) {\r\n//                 var blob = recordRTC instanceof Blob ? recordRTC : recordRTC.getBlob();\r\n//\r\n//                 blob = new File([blob], getFileName(fileExtension), {\r\n//                     type: mimeType\r\n//                 });\r\n//\r\n//                 if(!uploadVideo) {\r\n//                     alert('YouTube API are not available.');\r\n//                     return;\r\n//                 }\r\n//\r\n//                 uploadVideo.callback = callback;\r\n//                 uploadVideo.uploadFile(fileName, blob);\r\n//             }\r\n//\r\n//             var uploadVideo;\r\n//\r\n//             var signinCallback = function (result){\r\n//               if(result.access_token) {\r\n//                 uploadVideo = new UploadVideo();\r\n//                 uploadVideo.ready(result.access_token);\r\n//\r\n//                 document.querySelector('#signinButton').style.display = 'none';\r\n//               }\r\n//               else {\r\n//                 // console.error('YouTube error', result);\r\n//                 // document.querySelector('#upload-to-youtube').style.display = 'none';\r\n//               }\r\n//             };\r\n//\r\n//             var STATUS_POLLING_INTERVAL_MILLIS = 60 * 1000; // One minute.\r\n//\r\n//             var UploadVideo = function() {\r\n//               this.tags = ['recordrtc'];\r\n//               this.categoryId = 28; // via: http://stackoverflow.com/a/35877512/552182\r\n//               this.videoId = '';\r\n//               this.uploadStartTime = 0;\r\n//             };\r\n//\r\n//\r\n//             UploadVideo.prototype.ready = function(accessToken) {\r\n//               this.accessToken = accessToken;\r\n//               this.gapi = gapi;\r\n//               this.authenticated = true;\r\n//               false && this.gapi.client.request({\r\n//                 path: '/youtube/v3/channels',\r\n//                 params: {\r\n//                   part: 'snippet',\r\n//                   mine: true\r\n//                 },\r\n//                 callback: function(response) {\r\n//                   if (!response.error) {\r\n//                     // response.items[0].snippet.title -- channel title\r\n//                     // response.items[0].snippet.thumbnails.default.url -- channel thumbnail\r\n//                   }\r\n//                 }.bind(this)\r\n//               });\r\n//             };\r\n//\r\n//             UploadVideo.prototype.uploadFile = function(fileName, file) {\r\n//               var metadata = {\r\n//                 snippet: {\r\n//                   title: fileName,\r\n//                   description: fileName,\r\n//                   tags: this.tags,\r\n//                   categoryId: this.categoryId\r\n//                 },\r\n//                 status: {\r\n//                   privacyStatus: 'public'\r\n//                 }\r\n//               };\r\n//               var uploader = new MediaUploader({\r\n//                 baseUrl: 'https://www.googleapis.com/upload/youtube/v3/videos',\r\n//                 file: file,\r\n//                 token: this.accessToken,\r\n//                 metadata: metadata,\r\n//                 params: {\r\n//                   part: Object.keys(metadata).join(',')\r\n//                 },\r\n//                 onError: function(data) {\r\n//                   var message = data;\r\n//                   try {\r\n//                     var errorResponse = JSON.parse(data);\r\n//                     message = errorResponse.error.message;\r\n//                   } finally {\r\n//                     alert(message);\r\n//                   }\r\n//                 }.bind(this),\r\n//                 onProgress: function(data) {\r\n//                   var bytesUploaded = data.loaded;\r\n//                   var totalBytes = parseInt(data.total);\r\n//                   var percentageComplete = parseInt((bytesUploaded * 100) / totalBytes);\r\n//\r\n//                   uploadVideo.callback(percentageComplete);\r\n//                 }.bind(this),\r\n//                 onComplete: function(data) {\r\n//                   var uploadResponse = JSON.parse(data);\r\n//                   this.videoId = uploadResponse.id;\r\n//                   this.videoURL = 'https://www.youtube.com/watch?v=' + this.videoId;\r\n//                   uploadVideo.callback('uploaded', this.videoURL);\r\n//\r\n//                   setTimeout(this.pollForVideoStatus, 2000);\r\n//                 }.bind(this)\r\n//               });\r\n//               this.uploadStartTime = Date.now();\r\n//               uploader.upload();\r\n//             };\r\n//\r\n//             UploadVideo.prototype.pollForVideoStatus = function() {\r\n//               this.gapi.client.request({\r\n//                 path: '/youtube/v3/videos',\r\n//                 params: {\r\n//                   part: 'status,player',\r\n//                   id: this.videoId\r\n//                 },\r\n//                 callback: function(response) {\r\n//                   if (response.error) {\r\n//                     uploadVideo.pollForVideoStatus();\r\n//                   } else {\r\n//                     var uploadStatus = response.items[0].status.uploadStatus;\r\n//                     switch (uploadStatus) {\r\n//                       case 'uploaded':\r\n//                         uploadVideo.callback('uploaded', uploadVideo.videoURL);\r\n//                         uploadVideo.pollForVideoStatus();\r\n//                         break;\r\n//                         case 'processed':\r\n//                         uploadVideo.callback('processed', uploadVideo.videoURL);\r\n//                         break;\r\n//                         default:\r\n//                         uploadVideo.callback('failed', uploadVideo.videoURL);\r\n//                         break;\r\n//                     }\r\n//                   }\r\n//                 }.bind(this)\r\n//               });\r\n//             };\r\n// var DRIVE_UPLOAD_URL = 'https://www.googleapis.com/upload/drive/v2/files/';\r\n//\r\n// var RetryHandler = function() {\r\n//   this.interval = 1000; // Start at one second\r\n//   this.maxInterval = 60 * 1000; // Don't wait longer than a minute\r\n// };\r\n//\r\n// RetryHandler.prototype.retry = function(fn) {\r\n//   setTimeout(fn, this.interval);\r\n//   this.interval = this.nextInterval_();\r\n// };\r\n//\r\n// RetryHandler.prototype.reset = function() {\r\n//   this.interval = 1000;\r\n// };\r\n//\r\n// RetryHandler.prototype.nextInterval_ = function() {\r\n//   var interval = this.interval * 2 + this.getRandomInt_(0, 1000);\r\n//   return Math.min(interval, this.maxInterval);\r\n// };\r\n//\r\n// RetryHandler.prototype.getRandomInt_ = function(min, max) {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n//\r\n// var MediaUploader = function(options) {\r\n//   var noop = function() {};\r\n//   this.file = options.file;\r\n//   this.contentType = options.contentType || this.file.type || 'application/octet-stream';\r\n//   this.metadata = options.metadata || {\r\n//     'title': this.file.name,\r\n//     'mimeType': this.contentType\r\n//   };\r\n//   this.token = options.token;\r\n//   this.onComplete = options.onComplete || noop;\r\n//   this.onProgress = options.onProgress || noop;\r\n//   this.onError = options.onError || noop;\r\n//   this.offset = options.offset || 0;\r\n//   this.chunkSize = options.chunkSize || 0;\r\n//   this.retryHandler = new RetryHandler();\r\n//\r\n//   this.url = options.url;\r\n//   if (!this.url) {\r\n//     var params = options.params || {};\r\n//     params.uploadType = 'resumable';\r\n//     this.url = this.buildUrl_(options.fileId, params, options.baseUrl);\r\n//   }\r\n//   this.httpMethod = options.fileId ? 'PUT' : 'POST';\r\n// };\r\n//\r\n// MediaUploader.prototype.upload = function() {\r\n//   var self = this;\r\n//   var xhr = new XMLHttpRequest();\r\n//\r\n//   xhr.open(this.httpMethod, this.url, true);\r\n//   xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);\r\n//   xhr.setRequestHeader('Content-Type', 'application/json');\r\n//   xhr.setRequestHeader('X-Upload-Content-Length', this.file.size);\r\n//   xhr.setRequestHeader('X-Upload-Content-Type', this.contentType);\r\n//\r\n//   xhr.onload = function(e) {\r\n//     if (e.target.status < 400) {\r\n//       var location = e.target.getResponseHeader('Location');\r\n//       this.url = location;\r\n//       this.sendFile_();\r\n//     } else {\r\n//       this.onUploadError_(e);\r\n//     }\r\n//   }.bind(this);\r\n//   xhr.onerror = this.onUploadError_.bind(this);\r\n//   xhr.send(JSON.stringify(this.metadata));\r\n// };\r\n//\r\n// MediaUploader.prototype.sendFile_ = function() {\r\n//   var content = this.file;\r\n//   var end = this.file.size;\r\n//\r\n//   if (this.offset || this.chunkSize) {\r\n//     // Only bother to slice the file if we're either resuming or uploading in chunks\r\n//     if (this.chunkSize) {\r\n//       end = Math.min(this.offset + this.chunkSize, this.file.size);\r\n//     }\r\n//     content = content.slice(this.offset, end);\r\n//   }\r\n//\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open('PUT', this.url, true);\r\n//   xhr.setRequestHeader('Content-Type', this.contentType);\r\n//   xhr.setRequestHeader('Content-Range', 'bytes ' + this.offset + '-' + (end - 1) + '/' + this.file.size);\r\n//   xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);\r\n//   if (xhr.upload) {\r\n//     xhr.upload.addEventListener('progress', this.onProgress);\r\n//   }\r\n//   xhr.onload = this.onContentUploadSuccess_.bind(this);\r\n//   xhr.onerror = this.onContentUploadError_.bind(this);\r\n//   xhr.send(content);\r\n// };\r\n//\r\n// MediaUploader.prototype.resume_ = function() {\r\n//   var xhr = new XMLHttpRequest();\r\n//   xhr.open('PUT', this.url, true);\r\n//   xhr.setRequestHeader('Content-Range', 'bytes */' + this.file.size);\r\n//   xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);\r\n//   if (xhr.upload) {\r\n//     xhr.upload.addEventListener('progress', this.onProgress);\r\n//   }\r\n//   xhr.onload = this.onContentUploadSuccess_.bind(this);\r\n//   xhr.onerror = this.onContentUploadError_.bind(this);\r\n//   xhr.send();\r\n// };\r\n//\r\n// MediaUploader.prototype.extractRange_ = function(xhr) {\r\n//   var range = xhr.getResponseHeader('Range');\r\n//   if (range) {\r\n//     this.offset = parseInt(range.match(/\\d+/g).pop(), 10) + 1;\r\n//   }\r\n// };\r\n//\r\n// MediaUploader.prototype.onContentUploadSuccess_ = function(e) {\r\n//   if (e.target.status == 200 || e.target.status == 201) {\r\n//     this.onComplete(e.target.response);\r\n//   } else if (e.target.status == 308) {\r\n//     this.extractRange_(e.target);\r\n//     this.retryHandler.reset();\r\n//     this.sendFile_();\r\n//   }\r\n// };\r\n//\r\n//\r\n// MediaUploader.prototype.onContentUploadError_ = function(e) {\r\n//   if (e.target.status && e.target.status < 500) {\r\n//     this.onError(e.target.response);\r\n//   } else {\r\n//     this.retryHandler.retry(this.resume_.bind(this));\r\n//   }\r\n// };\r\n//\r\n// MediaUploader.prototype.onUploadError_ = function(e) {\r\n//   this.onError(e.target.response); // TODO - Retries for initial upload\r\n// };\r\n//\r\n// MediaUploader.prototype.buildQuery_ = function(params) {\r\n//   params = params || {};\r\n//   return Object.keys(params).map(function(key) {\r\n//     return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n//   }).join('&');\r\n// };\r\n//\r\n// MediaUploader.prototype.buildUrl_ = function(id, params, baseUrl) {\r\n//   var url = baseUrl || DRIVE_UPLOAD_URL;\r\n//   if (id) {\r\n//     url += id;\r\n//   }\r\n//   var query = this.buildQuery_(params);\r\n//   if (query) {\r\n//     url += '?' + query;\r\n//   }\r\n//   return url;\r\n// };\r\n//\r\n// var chkFixSeeking = document.querySelector('#chk-fixSeeking');\r\n// chkFixSeeking.onchange = function() {\r\n//     if(this.checked === true) {\r\n//         localStorage.setItem(this.id, 'true');\r\n//     }\r\n//     else {\r\n//         localStorage.removeItem(this.id);\r\n//     }\r\n// };\r\n// if(localStorage.getItem(chkFixSeeking.id) === 'true') {\r\n//     chkFixSeeking.checked = true;\r\n// }\r\n// var chkTimeSlice = document.querySelector('#chk-timeSlice');\r\n// var timeSlice = false;\r\n//\r\n// if(typeof MediaRecorder === 'undefined') {\r\n//     chkTimeSlice.disabled = true;\r\n// }\r\n//\r\n// chkTimeSlice.addEventListener('change', function() {\r\n//     if(chkTimeSlice.checked === true) {\r\n//         var _timeSlice = prompt('Please enter timeSlice in milliseconds e.g. 1000 or 2000 or 3000.', 1000);\r\n//         _timeSlice = parseInt(_timeSlice);\r\n//         if(!_timeSlice || _timeSlice == NaN || typeof _timeSlice === 'undefined') {\r\n//             timeSlice = false;\r\n//             return;\r\n//         }\r\n//\r\n//         timeSlice = _timeSlice;\r\n//     }\r\n//     else {\r\n//         timeSlice = false;\r\n//     }\r\n// }, false);\r\n//\r\n// var btnPauseRecording = document.querySelector('#btn-pause-recording');\r\n// btnPauseRecording.onclick = function() {\r\n//     if(!btnStartRecording.recordRTC) {\r\n//         btnPauseRecording.style.display = 'none';\r\n//         return;\r\n//     }\r\n//\r\n//     btnPauseRecording.disabled = true;\r\n//     if(btnPauseRecording.innerHTML === 'Pause') {\r\n//         btnStartRecording.disabled = true;\r\n//         chkFixSeeking.parentNode.style.display = 'none';\r\n//         btnStartRecording.style.fontSize = '15px';\r\n//         btnStartRecording.recordRTC.pauseRecording();\r\n//         recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = 'Recording status: paused';\r\n//         recordingPlayer.pause();\r\n//\r\n//         btnPauseRecording.style.fontSize = 'inherit';\r\n//         setTimeout(function() {\r\n//             btnPauseRecording.innerHTML = 'Resume Recording';\r\n//             btnPauseRecording.disabled = false;\r\n//         }, 2000);\r\n//     }\r\n//\r\n//     if(btnPauseRecording.innerHTML === 'Resume Recording') {\r\n//         btnStartRecording.disabled = false;\r\n//         chkFixSeeking.parentNode.style.display = 'none';\r\n//         btnStartRecording.style.fontSize = 'inherit';\r\n//         btnStartRecording.recordRTC.resumeRecording();\r\n//         recordingPlayer.parentNode.parentNode.querySelector('h2').innerHTML = '<img src=\"https://cdn.webrtc-experiment.com/images/progress.gif\">';\r\n//         recordingPlayer.play();\r\n//\r\n//         btnPauseRecording.style.fontSize = '15px';\r\n//         btnPauseRecording.innerHTML = 'Pause';\r\n//         setTimeout(function() {\r\n//             btnPauseRecording.disabled = false;\r\n//         }, 2000);\r\n//     }\r\n// };\r\n"]},"sourceType":"script","hash":"9d1d23637f4171bd76376d3add5aca10e33a5be3"}
