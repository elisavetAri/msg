{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Sandbox\\test\\imports\\ui\\pages\\messenger\\RecordRTC.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/ui/pages/messenger/RecordRTC.js","filename":"C:\\Sandbox\\test\\imports\\ui\\pages\\messenger\\RecordRTC.js","passPerPreset":false,"envName":"development","cwd":"C:\\Sandbox\\test","root":"C:\\Sandbox\\test","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Sandbox\\test\\imports\\ui\\pages\\messenger\\RecordRTC.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/ui/pages/messenger/RecordRTC.js"}},"code":"'use strict'; // Last time updated: 2019-02-06 11:32:40 AM UTC\n// ________________\n// RecordRTC v5.5.4\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n// ____________\n// RecordRTC.js\n\n/**\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \n * @summary Record audio, video or screen inside the browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTC\n * @class\n * @example\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\n *     type: 'video', // audio or video or gif or canvas\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\n * });\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\n */\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nfunction RecordRTC(mediaStream, config) {\n  if (!mediaStream) {\n    throw 'First parameter is required.';\n  }\n\n  config = config || {\n    type: 'video'\n  };\n  config = new RecordRTCConfiguration(mediaStream, config); // a reference to user's recordRTC object\n\n  var self = this;\n\n  function startRecording(config2) {\n    if (!!config2) {\n      // allow users to set options using startRecording method\n      // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n      config = new RecordRTCConfiguration(mediaStream, config2);\n    }\n\n    if (!config.disableLogs) {\n      console.log('started recording ' + config.type + ' stream.');\n    }\n\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder.record();\n      setState('recording');\n\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n\n      return self;\n    }\n\n    initRecorder(function () {\n      if (self.recordingDuration) {\n        handleRecordingDuration();\n      }\n    });\n    return self;\n  }\n\n  function initRecorder(initCallback) {\n    if (initCallback) {\n      config.initCallback = function () {\n        initCallback();\n        initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n      };\n    }\n\n    var Recorder = new GetRecorderType(mediaStream, config);\n    mediaRecorder = new Recorder(mediaStream, config);\n    mediaRecorder.record();\n    setState('recording');\n\n    if (!config.disableLogs) {\n      console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n    }\n  }\n\n  function stopRecording(callback) {\n    callback = callback || function () {};\n\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state === 'paused') {\n      self.resumeRecording();\n      setTimeout(function () {\n        stopRecording(callback);\n      }, 1);\n      return;\n    }\n\n    if (self.state !== 'recording' && !config.disableLogs) {\n      console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n    }\n\n    if (!config.disableLogs) {\n      console.log('Stopped recording ' + config.type + ' stream.');\n    }\n\n    if (config.type !== 'gif') {\n      mediaRecorder.stop(_callback);\n    } else {\n      mediaRecorder.stop();\n\n      _callback();\n    }\n\n    setState('stopped');\n\n    function _callback(__blob) {\n      if (!mediaRecorder) {\n        if (typeof callback.call === 'function') {\n          callback.call(self, '');\n        } else {\n          callback('');\n        }\n\n        return;\n      }\n\n      Object.keys(mediaRecorder).forEach(function (key) {\n        if (typeof mediaRecorder[key] === 'function') {\n          return;\n        }\n\n        self[key] = mediaRecorder[key];\n      });\n      var blob = mediaRecorder.blob;\n\n      if (!blob) {\n        if (__blob) {\n          mediaRecorder.blob = blob = __blob;\n        } else {\n          throw 'Recording failed.';\n        }\n      }\n\n      if (blob && !config.disableLogs) {\n        console.log(blob.type, '->', bytesToSize(blob.size));\n      }\n\n      if (callback) {\n        var url;\n\n        try {\n          url = URL.createObjectURL(blob);\n        } catch (e) {}\n\n        if (typeof callback.call === 'function') {\n          callback.call(self, url);\n        } else {\n          callback(url);\n        }\n      }\n\n      if (!config.autoWriteToDisk) {\n        return;\n      }\n\n      getDataURL(function (dataURL) {\n        var parameter = {};\n        parameter[config.type + 'Blob'] = dataURL;\n        DiskStorage.Store(parameter);\n      });\n    }\n  }\n\n  function pauseRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state !== 'recording') {\n      if (!config.disableLogs) {\n        console.warn('Unable to pause the recording. Recording state: ', self.state);\n      }\n\n      return;\n    }\n\n    setState('paused');\n    mediaRecorder.pause();\n\n    if (!config.disableLogs) {\n      console.log('Paused recording.');\n    }\n  }\n\n  function resumeRecording() {\n    if (!mediaRecorder) {\n      warningLog();\n      return;\n    }\n\n    if (self.state !== 'paused') {\n      if (!config.disableLogs) {\n        console.warn('Unable to resume the recording. Recording state: ', self.state);\n      }\n\n      return;\n    }\n\n    setState('recording'); // not all libs have this method yet\n\n    mediaRecorder.resume();\n\n    if (!config.disableLogs) {\n      console.log('Resumed recording.');\n    }\n  }\n\n  function readFile(_blob) {\n    postMessage(new FileReaderSync().readAsDataURL(_blob));\n  }\n\n  function getDataURL(callback, _mediaRecorder) {\n    if (!callback) {\n      throw 'Pass a callback function over getDataURL.';\n    }\n\n    var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n    if (!blob) {\n      if (!config.disableLogs) {\n        console.warn('Blob encoder did not finish its job yet.');\n      }\n\n      setTimeout(function () {\n        getDataURL(callback, _mediaRecorder);\n      }, 1000);\n      return;\n    }\n\n    if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n      var webWorker = processInWebWorker(readFile);\n\n      webWorker.onmessage = function (event) {\n        callback(event.data);\n      };\n\n      webWorker.postMessage(blob);\n    } else {\n      var reader = new FileReader();\n      reader.readAsDataURL(blob);\n\n      reader.onload = function (event) {\n        callback(event.target.result);\n      };\n    }\n\n    function processInWebWorker(_function) {\n      try {\n        var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n          type: 'application/javascript'\n        }));\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n      } catch (e) {}\n    }\n  }\n\n  function handleRecordingDuration(counter) {\n    counter = counter || 0;\n\n    if (self.state === 'paused') {\n      setTimeout(function () {\n        handleRecordingDuration(counter);\n      }, 1000);\n      return;\n    }\n\n    if (self.state === 'stopped') {\n      return;\n    }\n\n    if (counter >= self.recordingDuration) {\n      stopRecording(self.onRecordingStopped);\n      return;\n    }\n\n    counter += 1000; // 1-second\n\n    setTimeout(function () {\n      handleRecordingDuration(counter);\n    }, 1000);\n  }\n\n  function setState(state) {\n    if (!self) {\n      return;\n    }\n\n    self.state = state;\n\n    if (typeof self.onStateChanged.call === 'function') {\n      self.onStateChanged.call(self, state);\n    } else {\n      self.onStateChanged(state);\n    }\n  }\n\n  var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n  function warningLog() {\n    if (config.disableLogs === true) {\n      return;\n    }\n\n    console.warn(WARNING);\n  }\n\n  var mediaRecorder;\n  var returnObject = {\n    /**\n     * This method starts the recording.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * var recorder = RecordRTC(mediaStream, {\n     *     type: 'video'\n     * });\n     * recorder.startRecording();\n     */\n    startRecording: startRecording,\n\n    /**\n     * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\n     * @param {function} callback - Callback to get the recorded blob.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.stopRecording(function() {\n     *     // use either \"this\" or \"recorder\" object; both are identical\n     *     video.src = this.toURL();\n     *     var blob = this.getBlob();\n     * });\n     */\n    stopRecording: stopRecording,\n\n    /**\n     * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @todo Firefox is unable to pause the recording. Fix it.\n     * @example\n     * recorder.pauseRecording();  // pause the recording\n     * recorder.resumeRecording(); // resume again\n     */\n    pauseRecording: pauseRecording,\n\n    /**\n     * This method resumes the recording.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.pauseRecording();  // first of all, pause the recording\n     * recorder.resumeRecording(); // now resume it\n     */\n    resumeRecording: resumeRecording,\n\n    /**\n     * This method initializes the recording.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @todo This method should be deprecated.\n     * @example\n     * recorder.initRecorder();\n     */\n    initRecorder: initRecorder,\n\n    /**\n     * Ask RecordRTC to auto-stop the recording after 5 minutes.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * var fiveMinutes = 5 * 1000 * 60;\n     * recorder.setRecordingDuration(fiveMinutes, function() {\n     *    var blob = this.getBlob();\n     *    video.src = this.toURL();\n     * });\n     * \n     * // or otherwise\n     * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\n     *    var blob = this.getBlob();\n     *    video.src = this.toURL();\n     * });\n     */\n    setRecordingDuration: function (recordingDuration, callback) {\n      if (typeof recordingDuration === 'undefined') {\n        throw 'recordingDuration is required.';\n      }\n\n      if (typeof recordingDuration !== 'number') {\n        throw 'recordingDuration must be a number.';\n      }\n\n      self.recordingDuration = recordingDuration;\n\n      self.onRecordingStopped = callback || function () {};\n\n      return {\n        onRecordingStopped: function (callback) {\n          self.onRecordingStopped = callback;\n        }\n      };\n    },\n\n    /**\n     * This method can be used to clear/reset all the recorded data.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\n     * @example\n     * recorder.clearRecordedData();\n     */\n    clearRecordedData: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      mediaRecorder.clearRecordedData();\n\n      if (!config.disableLogs) {\n        console.log('Cleared old recorded data.');\n      }\n    },\n\n    /**\n     * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.stopRecording(function() {\n     *     var blob = this.getBlob();\n     *\n     *     var file = new File([blob], 'filename.webm', {\n     *         type: 'video/webm'\n     *     });\n     *\n     *     var formData = new FormData();\n     *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\n     *     uploadToServer(formData);\n     * });\n     * @returns {Blob} Returns recorded data as \"Blob\" object.\n     */\n    getBlob: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      return mediaRecorder.blob;\n    },\n\n    /**\n     * Get data-URI instead of Blob.\n     * @param {function} callback - Callback to get the Data-URI.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.stopRecording(function() {\n     *     recorder.getDataURL(function(dataURI) {\n     *         video.src = dataURI;\n     *     });\n     * });\n     */\n    getDataURL: getDataURL,\n\n    /**\n     * Get virtual/temporary URL. Usage of this URL is limited to current tab.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.stopRecording(function() {\n     *     video.src = this.toURL();\n     * });\n     * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\n     */\n    toURL: function () {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      return URL.createObjectURL(mediaRecorder.blob);\n    },\n\n    /**\n     * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * if(internal instanceof MultiStreamRecorder) {\n     *     internal.addStreams([newAudioStream]);\n     *     internal.resetVideoStreams([screenStream]);\n     * }\n     * @returns {Object} Returns internal recording object.\n     */\n    getInternalRecorder: function () {\n      return mediaRecorder;\n    },\n\n    /**\n     * Invoke save-as dialog to save the recorded blob into your disk.\n     * @param {string} fileName - Set your own file name.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.stopRecording(function() {\n     *     this.save('file-name');\n     *\n     *     // or manually:\n     *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\n     * });\n     */\n    save: function (fileName) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      invokeSaveAsDialog(mediaRecorder.blob, fileName);\n    },\n\n    /**\n     * This method gets a blob from indexed-DB storage.\n     * @param {function} callback - Callback to get the recorded blob.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.getFromDisk(function(dataURL) {\n     *     video.src = dataURL;\n     * });\n     */\n    getFromDisk: function (callback) {\n      if (!mediaRecorder) {\n        warningLog();\n        return;\n      }\n\n      RecordRTC.getFromDisk(config.type, callback);\n    },\n\n    /**\n     * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\n     * @type {Array.<Array>}\n     * @param {Array} arrayOfWebPImages - Array of webp images.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @todo This method should be deprecated.\n     * @example\n     * var arrayOfWebPImages = [];\n     * arrayOfWebPImages.push({\n     *     duration: index,\n     *     image: 'data:image/webp;base64,...'\n     * });\n     * recorder.setAdvertisementArray(arrayOfWebPImages);\n     */\n    setAdvertisementArray: function (arrayOfWebPImages) {\n      config.advertisement = [];\n      var length = arrayOfWebPImages.length;\n\n      for (var i = 0; i < length; i++) {\n        config.advertisement.push({\n          duration: i,\n          image: arrayOfWebPImages[i]\n        });\n      }\n    },\n\n    /**\n     * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\n     * @property {Blob} blob - Recorded Blob can be accessed using this property.\n     * @memberof RecordRTC\n     * @instance\n     * @readonly\n     * @example\n     * recorder.stopRecording(function() {\n     *     var blob = this.blob;\n     *\n     *     // below one is recommended\n     *     var blob = this.getBlob();\n     * });\n     */\n    blob: null,\n\n    /**\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n     * @property {number} bufferSize - Buffer-size used to encode the WAV container\n     * @memberof RecordRTC\n     * @instance\n     * @readonly\n     * @example\n     * recorder.stopRecording(function() {\n     *     alert('Recorder used this buffer-size: ' + this.bufferSize);\n     * });\n     */\n    bufferSize: 0,\n\n    /**\n     * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n     * @property {number} sampleRate - Sample-rates used to encode the WAV container\n     * @memberof RecordRTC\n     * @instance\n     * @readonly\n     * @example\n     * recorder.stopRecording(function() {\n     *     alert('Recorder used these sample-rates: ' + this.sampleRate);\n     * });\n     */\n    sampleRate: 0,\n\n    /**\n     * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\n     * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n     * @memberof RecordRTC\n     * @instance\n     * @readonly\n     * @example\n     * recorder.stopRecording(function() {\n     *     var arrayBuffer = this.buffer;\n     *     alert(arrayBuffer.byteLength);\n     * });\n     */\n    buffer: null,\n\n    /**\n     * This method resets the recorder. So that you can reuse single recorder instance many times.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.reset();\n     * recorder.startRecording();\n     */\n    reset: function () {\n      if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n        mediaRecorder.clearRecordedData();\n      }\n\n      mediaRecorder = null;\n      setState('inactive');\n      self.blob = null;\n    },\n\n    /**\n     * This method is called whenever recorder's state changes. Use this as an \"event\".\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n     * @method\n     * @memberof RecordRTC\n     * @instance\n     * @example\n     * recorder.onStateChanged = function(state) {\n     *     console.log('Recorder state: ', state);\n     * };\n     */\n    onStateChanged: function (state) {\n      if (!config.disableLogs) {\n        console.log('Recorder state changed:', state);\n      }\n    },\n\n    /**\n     * A recorder can have inactive, recording, paused or stopped states.\n     * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n     * @memberof RecordRTC\n     * @static\n     * @readonly\n     * @example\n     * // this looper function will keep you updated about the recorder's states.\n     * (function looper() {\n     *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\n     *     if(recorder.state === 'stopped') return; // ignore+stop\n     *     setTimeout(looper, 1000); // update after every 3-seconds\n     * })();\n     * recorder.startRecording();\n     */\n    state: 'inactive',\n\n    /**\n     * Get recorder's readonly state.\n     * @method\n     * @memberof RecordRTC\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    getState: function () {\n      return self.state;\n    },\n\n    /**\n     * Destroy RecordRTC instance. Clear all recorders and objects.\n     * @method\n     * @memberof RecordRTC\n     * @example\n     * recorder.destroy();\n     */\n    destroy: function () {\n      var disableLogsCache = config.disableLogs;\n      config = {\n        disableLogs: true\n      };\n      self.reset();\n      setState('destroyed');\n      returnObject = self = null;\n\n      if (Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor.close();\n        Storage.AudioContextConstructor = null;\n      }\n\n      config.disableLogs = disableLogsCache;\n\n      if (!config.disableLogs) {\n        console.warn('RecordRTC is destroyed.');\n      }\n    },\n\n    /**\n     * RecordRTC version number\n     * @property {String} version - Release version number.\n     * @memberof RecordRTC\n     * @static\n     * @readonly\n     * @example\n     * alert(recorder.version);\n     */\n    version: '5.5.4'\n  };\n\n  if (!this) {\n    self = returnObject;\n    return returnObject;\n  } // if someone wants to use RecordRTC with the \"new\" keyword.\n\n\n  for (var prop in meteorBabelHelpers.sanitizeForInObject(returnObject)) {\n    this[prop] = returnObject[prop];\n  }\n\n  self = this;\n  return returnObject;\n}\n\nRecordRTC.version = '5.5.4';\n\nif (typeof module !== 'undefined'\n/* && !!module.exports*/\n) {\n    module.exports = RecordRTC;\n  }\n\nif (typeof define === 'function' && define.amd) {\n  define('RecordRTC', [], function () {\n    return RecordRTC;\n  });\n}\n\nRecordRTC.getFromDisk = function (type, callback) {\n  if (!callback) {\n    throw 'callback is mandatory.';\n  }\n\n  console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n  DiskStorage.Fetch(function (dataURL, _type) {\n    if (type !== 'all' && _type === type + 'Blob' && callback) {\n      callback(dataURL);\n    }\n\n    if (type === 'all' && callback) {\n      callback(dataURL, _type.replace('Blob', ''));\n    }\n  });\n};\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\n\n\nRecordRTC.writeToDisk = function (options) {\n  console.log('Writing recorded blob(s) to disk!');\n  options = options || {};\n\n  if (options.audio && options.video && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        options.gif.getDataURL(function (gifDataURL) {\n          DiskStorage.Store({\n            audioBlob: audioDataURL,\n            videoBlob: videoDataURL,\n            gifBlob: gifDataURL\n          });\n        });\n      });\n    });\n  } else if (options.audio && options.video) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.video.getDataURL(function (videoDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          videoBlob: videoDataURL\n        });\n      });\n    });\n  } else if (options.audio && options.gif) {\n    options.audio.getDataURL(function (audioDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          audioBlob: audioDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.video && options.gif) {\n    options.video.getDataURL(function (videoDataURL) {\n      options.gif.getDataURL(function (gifDataURL) {\n        DiskStorage.Store({\n          videoBlob: videoDataURL,\n          gifBlob: gifDataURL\n        });\n      });\n    });\n  } else if (options.audio) {\n    options.audio.getDataURL(function (audioDataURL) {\n      DiskStorage.Store({\n        audioBlob: audioDataURL\n      });\n    });\n  } else if (options.video) {\n    options.video.getDataURL(function (videoDataURL) {\n      DiskStorage.Store({\n        videoBlob: videoDataURL\n      });\n    });\n  } else if (options.gif) {\n    options.gif.getDataURL(function (gifDataURL) {\n      DiskStorage.Store({\n        gifBlob: gifDataURL\n      });\n    });\n  }\n}; // __________________________\n// RecordRTC-Configuration.js\n\n/**\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCConfiguration\n * @class\n * @example\n * var options = RecordRTCConfiguration(mediaStream, options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n */\n\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n  if (!config.recorderType && !config.type) {\n    if (!!config.audio && !!config.video) {\n      config.type = 'video';\n    } else if (!!config.audio && !config.video) {\n      config.type = 'audio';\n    }\n  }\n\n  if (config.recorderType && !config.type) {\n    if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder) {\n      config.type = 'video';\n    } else if (config.recorderType === GifRecorder) {\n      config.type = 'gif';\n    } else if (config.recorderType === StereoAudioRecorder) {\n      config.type = 'audio';\n    } else if (config.recorderType === MediaStreamRecorder) {\n      if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n        config.type = 'video';\n      } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n        config.type = 'audio';\n      } else {// config.type = 'UnKnown';\n      }\n    }\n  }\n\n  if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (!config.mimeType) {\n      config.mimeType = 'video/webm';\n    }\n\n    if (!config.type) {\n      config.type = config.mimeType.split('/')[0];\n    }\n\n    if (!config.bitsPerSecond) {// config.bitsPerSecond = 128000;\n    }\n  } // consider default type=audio\n\n\n  if (!config.type) {\n    if (config.mimeType) {\n      config.type = config.mimeType.split('/')[0];\n    }\n\n    if (!config.type) {\n      config.type = 'audio';\n    }\n  }\n\n  return config;\n} // __________________\n// GetRecorderType.js\n\n/**\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\n * @summary It returns best recorder-type available for your browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GetRecorderType\n * @class\n * @example\n * var RecorderType = GetRecorderType(options);\n * var recorder = new RecorderType(options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\n\nfunction GetRecorderType(mediaStream, config) {\n  var recorder; // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n  // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n\n  if (isChrome || isEdge || isOpera) {\n    // Media Stream Recording API has not been implemented in chrome yet;\n    // That's why using WebAudio API to record stereo audio in WAV format\n    recorder = StereoAudioRecorder;\n  }\n\n  if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n    recorder = MediaStreamRecorder;\n  } // video recorder (in WebM format)\n\n\n  if (config.type === 'video' && (isChrome || isOpera)) {\n    recorder = WhammyRecorder;\n\n    if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n      recorder = WebAssemblyRecorder;\n    }\n  } // video recorder (in Gif format)\n\n\n  if (config.type === 'gif') {\n    recorder = GifRecorder;\n  } // html2canvas recording!\n\n\n  if (config.type === 'canvas') {\n    recorder = CanvasRecorder;\n  }\n\n  if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n    if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n      // audio-only recording\n      if (config.type === 'audio') {\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n          recorder = MediaStreamRecorder;\n        } // else recorder = StereoAudioRecorder;\n\n      } else {\n        // video or screen tracks\n        if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n          recorder = MediaStreamRecorder;\n        }\n      }\n    }\n  }\n\n  if (mediaStream instanceof Array && mediaStream.length) {\n    recorder = MultiStreamRecorder;\n  }\n\n  if (config.recorderType) {\n    recorder = config.recorderType;\n  }\n\n  if (!config.disableLogs && !!recorder && !!recorder.name) {\n    console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n  }\n\n  if (!recorder && isSafari) {\n    recorder = MediaStreamRecorder;\n  }\n\n  return recorder;\n} // _____________\n// MRecordRTC.js\n\n/**\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MRecordRTC\n * @class\n * @example\n * var recorder = new MRecordRTC();\n * recorder.addStream(MediaStream);\n * recorder.mediaType = {\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n *     gif: true    // or GifRecorder\n * };\n * // mimeType is optional and should be set only in advance cases.\n * recorder.mimeType = {\n *     audio: 'audio/wav',\n *     video: 'video/webm',\n *     gif:   'image/gif'\n * };\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @requires {@link RecordRTC}\n */\n\n\nfunction MRecordRTC(mediaStream) {\n  /**\n   * This method attaches MediaStream object to {@link MRecordRTC}.\n   * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.addStream(MediaStream);\n   */\n  this.addStream = function (_mediaStream) {\n    if (_mediaStream) {\n      mediaStream = _mediaStream;\n    }\n  };\n  /**\n   * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n   * @property {object} mediaType - {audio: true, video: true, gif: true}\n   * @memberof MRecordRTC\n   * @example\n   * var recorder = new MRecordRTC();\n   * recorder.mediaType = {\n   *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n   *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n   *     gif  : true  // TRUE or GifRecorder\n   * };\n   */\n\n\n  this.mediaType = {\n    audio: true,\n    video: true\n  };\n  /**\n   * This method starts recording.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.startRecording();\n   */\n\n  this.startRecording = function () {\n    var mediaType = this.mediaType;\n    var recorderType;\n    var mimeType = this.mimeType || {\n      audio: null,\n      video: null,\n      gif: null\n    };\n\n    if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n      mediaType.audio = false;\n    }\n\n    if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.video = false;\n    }\n\n    if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n      mediaType.gif = false;\n    }\n\n    if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n      throw 'MediaStream must have either audio or video tracks.';\n    }\n\n    if (!!mediaType.audio) {\n      recorderType = null;\n\n      if (typeof mediaType.audio === 'function') {\n        recorderType = mediaType.audio;\n      }\n\n      this.audioRecorder = new RecordRTC(mediaStream, {\n        type: 'audio',\n        bufferSize: this.bufferSize,\n        sampleRate: this.sampleRate,\n        numberOfAudioChannels: this.numberOfAudioChannels || 2,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.audio,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp\n      });\n\n      if (!mediaType.video) {\n        this.audioRecorder.startRecording();\n      }\n    }\n\n    if (!!mediaType.video) {\n      recorderType = null;\n\n      if (typeof mediaType.video === 'function') {\n        recorderType = mediaType.video;\n      }\n\n      var newStream = mediaStream;\n\n      if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n        var videoTrack = getTracks(mediaStream, 'video')[0];\n\n        if (isFirefox) {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n\n          if (recorderType && recorderType === WhammyRecorder) {\n            // Firefox does NOT supports webp-encoding yet\n            // But Firefox do supports WebAssemblyRecorder\n            recorderType = MediaStreamRecorder;\n          }\n        } else {\n          newStream = new MediaStream();\n          newStream.addTrack(videoTrack);\n        }\n      }\n\n      this.videoRecorder = new RecordRTC(newStream, {\n        type: 'video',\n        video: this.video,\n        canvas: this.canvas,\n        frameInterval: this.frameInterval || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.video,\n        timeSlice: this.timeSlice,\n        onTimeStamp: this.onTimeStamp,\n        workerPath: this.workerPath,\n        webAssemblyPath: this.webAssemblyPath,\n        frameRate: this.frameRate,\n        // used by WebAssemblyRecorder; values: usually 30; accepts any.\n        bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n\n      });\n\n      if (!mediaType.audio) {\n        this.videoRecorder.startRecording();\n      }\n    }\n\n    if (!!mediaType.audio && !!mediaType.video) {\n      var self = this;\n      var isSingleRecorder = isMediaRecorderCompatible() === true;\n\n      if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n        isSingleRecorder = false;\n      } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n        isSingleRecorder = false;\n      }\n\n      if (isSingleRecorder === true) {\n        self.audioRecorder = null;\n        self.videoRecorder.startRecording();\n      } else {\n        self.videoRecorder.initRecorder(function () {\n          self.audioRecorder.initRecorder(function () {\n            // Both recorders are ready to record things accurately\n            self.videoRecorder.startRecording();\n            self.audioRecorder.startRecording();\n          });\n        });\n      }\n    }\n\n    if (!!mediaType.gif) {\n      recorderType = null;\n\n      if (typeof mediaType.gif === 'function') {\n        recorderType = mediaType.gif;\n      }\n\n      this.gifRecorder = new RecordRTC(mediaStream, {\n        type: 'gif',\n        frameRate: this.frameRate || 200,\n        quality: this.quality || 10,\n        disableLogs: this.disableLogs,\n        recorderType: recorderType,\n        mimeType: mimeType.gif\n      });\n      this.gifRecorder.startRecording();\n    }\n  };\n  /**\n   * This method stops recording.\n   * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.stopRecording(function(recording){\n   *     var audioBlob = recording.audio;\n   *     var videoBlob = recording.video;\n   *     var gifBlob   = recording.gif;\n   * });\n   */\n\n\n  this.stopRecording = function (callback) {\n    callback = callback || function () {};\n\n    if (this.audioRecorder) {\n      this.audioRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'audio');\n      });\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'video');\n      });\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.stopRecording(function (blobURL) {\n        callback(blobURL, 'gif');\n      });\n    }\n  };\n  /**\n   * This method pauses recording.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.pauseRecording();\n   */\n\n\n  this.pauseRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.pauseRecording();\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.pauseRecording();\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.pauseRecording();\n    }\n  };\n  /**\n   * This method resumes recording.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.resumeRecording();\n   */\n\n\n  this.resumeRecording = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.resumeRecording();\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.resumeRecording();\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.resumeRecording();\n    }\n  };\n  /**\n   * This method can be used to manually get all recorded blobs.\n   * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.getBlob(function(recording){\n   *     var audioBlob = recording.audio;\n   *     var videoBlob = recording.video;\n   *     var gifBlob   = recording.gif;\n   * });\n   * // or\n   * var audioBlob = recorder.getBlob().audio;\n   * var videoBlob = recorder.getBlob().video;\n   */\n\n\n  this.getBlob = function (callback) {\n    var output = {};\n\n    if (this.audioRecorder) {\n      output.audio = this.audioRecorder.getBlob();\n    }\n\n    if (this.videoRecorder) {\n      output.video = this.videoRecorder.getBlob();\n    }\n\n    if (this.gifRecorder) {\n      output.gif = this.gifRecorder.getBlob();\n    }\n\n    if (callback) {\n      callback(output);\n    }\n\n    return output;\n  };\n  /**\n   * Destroy all recorder instances.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.destroy();\n   */\n\n\n  this.destroy = function () {\n    if (this.audioRecorder) {\n      this.audioRecorder.destroy();\n      this.audioRecorder = null;\n    }\n\n    if (this.videoRecorder) {\n      this.videoRecorder.destroy();\n      this.videoRecorder = null;\n    }\n\n    if (this.gifRecorder) {\n      this.gifRecorder.destroy();\n      this.gifRecorder = null;\n    }\n  };\n  /**\n   * This method can be used to manually get all recorded blobs' DataURLs.\n   * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.getDataURL(function(recording){\n   *     var audioDataURL = recording.audio;\n   *     var videoDataURL = recording.video;\n   *     var gifDataURL   = recording.gif;\n   * });\n   */\n\n\n  this.getDataURL = function (callback) {\n    this.getBlob(function (blob) {\n      if (blob.audio && blob.video) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          getDataURL(blob.video, function (_videoDataURL) {\n            callback({\n              audio: _audioDataURL,\n              video: _videoDataURL\n            });\n          });\n        });\n      } else if (blob.audio) {\n        getDataURL(blob.audio, function (_audioDataURL) {\n          callback({\n            audio: _audioDataURL\n          });\n        });\n      } else if (blob.video) {\n        getDataURL(blob.video, function (_videoDataURL) {\n          callback({\n            video: _videoDataURL\n          });\n        });\n      }\n    });\n\n    function getDataURL(blob, callback00) {\n      if (typeof Worker !== 'undefined') {\n        var webWorker = processInWebWorker(function () {\n          function readFile(_blob) {\n            postMessage(new FileReaderSync().readAsDataURL(_blob));\n          }\n\n          return readFile;\n        }());\n\n        webWorker.onmessage = function (event) {\n          callback00(event.data);\n        };\n\n        webWorker.postMessage(blob);\n      } else {\n        var reader = new FileReader();\n        reader.readAsDataURL(blob);\n\n        reader.onload = function (event) {\n          callback00(event.target.result);\n        };\n      }\n    }\n\n    function processInWebWorker(_function) {\n      var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n        type: 'application/javascript'\n      }));\n      var worker = new Worker(blob);\n      var url;\n\n      if (typeof URL !== 'undefined') {\n        url = URL;\n      } else if (typeof webkitURL !== 'undefined') {\n        url = webkitURL;\n      } else {\n        throw 'Neither URL nor webkitURL detected.';\n      }\n\n      url.revokeObjectURL(blob);\n      return worker;\n    }\n  };\n  /**\n   * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.writeToDisk();\n   */\n\n\n  this.writeToDisk = function () {\n    RecordRTC.writeToDisk({\n      audio: this.audioRecorder,\n      video: this.videoRecorder,\n      gif: this.gifRecorder\n    });\n  };\n  /**\n   * This method can be used to invoke a save-as dialog for all recorded blobs.\n   * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n   * @method\n   * @memberof MRecordRTC\n   * @example\n   * recorder.save({\n   *     audio: 'audio-file-name',\n   *     video: 'video-file-name',\n   *     gif  : 'gif-file-name'\n   * });\n   */\n\n\n  this.save = function (args) {\n    args = args || {\n      audio: true,\n      video: true,\n      gif: true\n    };\n\n    if (!!args.audio && this.audioRecorder) {\n      this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n    }\n\n    if (!!args.video && this.videoRecorder) {\n      this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n    }\n\n    if (!!args.gif && this.gifRecorder) {\n      this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n    }\n  };\n}\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\n\n\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\n\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function (that) {\n  if (!that) {\n    return;\n  }\n\n  if (typeof window !== 'undefined') {\n    return;\n  }\n\n  if (typeof global === 'undefined') {\n    return;\n  }\n\n  global.navigator = {\n    userAgent: browserFakeUserAgent,\n    getUserMedia: function () {}\n  };\n\n  if (!global.console) {\n    global.console = {};\n  }\n\n  if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n    global.console.error = global.console.log = global.console.log || function () {\n      console.log(arguments);\n    };\n  }\n\n  if (typeof document === 'undefined') {\n    /*global document:true */\n    that.document = {};\n\n    document.createElement = document.captureStream = document.mozCaptureStream = function () {\n      var obj = {\n        getContext: function () {\n          return obj;\n        },\n        play: function () {},\n        pause: function () {},\n        drawImage: function () {},\n        toDataURL: function () {\n          return '';\n        }\n      };\n      return obj;\n    };\n\n    that.HTMLVideoElement = function () {};\n  }\n\n  if (typeof location === 'undefined') {\n    /*global location:true */\n    that.location = {\n      protocol: 'file:',\n      href: '',\n      hash: ''\n    };\n  }\n\n  if (typeof screen === 'undefined') {\n    /*global screen:true */\n    that.screen = {\n      width: 0,\n      height: 0\n    };\n  }\n\n  if (typeof URL === 'undefined') {\n    /*global screen:true */\n    that.URL = {\n      createObjectURL: function () {\n        return '';\n      },\n      revokeObjectURL: function () {\n        return '';\n      }\n    };\n  }\n  /*global window:true */\n\n\n  that.window = global;\n})(typeof global !== 'undefined' ? global : null); // _____________________________\n// Cross-Browser-Declarations.js\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\n\n\nvar requestAnimationFrame = window.requestAnimationFrame;\n\nif (typeof requestAnimationFrame === 'undefined') {\n  if (typeof webkitRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = webkitRequestAnimationFrame;\n  } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = mozRequestAnimationFrame;\n  } else if (typeof msRequestAnimationFrame !== 'undefined') {\n    /*global requestAnimationFrame:true */\n    requestAnimationFrame = msRequestAnimationFrame;\n  } else if (typeof requestAnimationFrame === 'undefined') {\n    // via: https://gist.github.com/paulirish/1579671\n    var lastTime = 0;\n    /*global requestAnimationFrame:true */\n\n    requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n}\n/*jshint -W079 */\n\n\nvar cancelAnimationFrame = window.cancelAnimationFrame;\n\nif (typeof cancelAnimationFrame === 'undefined') {\n  if (typeof webkitCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = webkitCancelAnimationFrame;\n  } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = mozCancelAnimationFrame;\n  } else if (typeof msCancelAnimationFrame !== 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = msCancelAnimationFrame;\n  } else if (typeof cancelAnimationFrame === 'undefined') {\n    /*global cancelAnimationFrame:true */\n    cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n} // WebAudio API representer\n\n\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n  if (typeof webkitAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = webkitAudioContext;\n  }\n\n  if (typeof mozAudioContext !== 'undefined') {\n    /*global AudioContext:true */\n    AudioContext = mozAudioContext;\n  }\n}\n/*jshint -W079 */\n\n\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n  /*global URL:true */\n  URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n  // maybe window.navigator?\n  if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.webkitGetUserMedia;\n  }\n\n  if (typeof navigator.mozGetUserMedia !== 'undefined') {\n    navigator.getUserMedia = navigator.mozGetUserMedia;\n  }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && 'netscape' in window && / rv:/.test(navigator.userAgent);\nvar isChrome = !isOpera && !isEdge && !!navigator.webkitGetUserMedia || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n  isSafari = false;\n  isChrome = true;\n}\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n  MediaStream = webkitMediaStream;\n}\n/*global MediaStream:true */\n\n\nif (typeof MediaStream !== 'undefined') {\n  // override \"stop\" method for all browsers\n  if (typeof MediaStream.prototype.stop === 'undefined') {\n    MediaStream.prototype.stop = function () {\n      this.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    };\n  }\n} // below function via: http://goo.gl/B3ae8c\n\n/**\n * Return human-readable file size.\n * @param {number} bytes - Pass bytes and get formatted string.\n * @returns {string} - formatted string\n * @example\n * bytesToSize(1024*1024*5) === '5 GB'\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nfunction bytesToSize(bytes) {\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n  return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n/**\n * @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nfunction invokeSaveAsDialog(file, fileName) {\n  if (!file) {\n    throw 'Blob object is required.';\n  }\n\n  if (!file.type) {\n    try {\n      file.type = 'video/webm';\n    } catch (e) {}\n  }\n\n  var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n  if (fileName && fileName.indexOf('.') !== -1) {\n    var splitted = fileName.split('.');\n    fileName = splitted[0];\n    fileExtension = splitted[1];\n  }\n\n  var fileFullName = (fileName || Math.round(Math.random() * 9999999999) + 888888888) + '.' + fileExtension;\n\n  if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n    return navigator.msSaveOrOpenBlob(file, fileFullName);\n  } else if (typeof navigator.msSaveBlob !== 'undefined') {\n    return navigator.msSaveBlob(file, fileFullName);\n  }\n\n  var hyperlink = document.createElement('a');\n  hyperlink.href = URL.createObjectURL(file);\n  hyperlink.download = fileFullName;\n  hyperlink.style = 'display:none;opacity:0;color:transparent;';\n  (document.body || document.documentElement).appendChild(hyperlink);\n\n  if (typeof hyperlink.click === 'function') {\n    hyperlink.click();\n  } else {\n    hyperlink.target = '_blank';\n    hyperlink.dispatchEvent(new MouseEvent('click', {\n      view: window,\n      bubbles: true,\n      cancelable: true\n    }));\n  }\n\n  URL.revokeObjectURL(hyperlink.href);\n}\n/**\n * from: https://github.com/cheton/is-electron/blob/master/index.js\n **/\n\n\nfunction isElectron() {\n  // Renderer process\n  if (typeof window !== 'undefined' && (0, _typeof2.default)(window.process) === 'object' && window.process.type === 'renderer') {\n    return true;\n  } // Main process\n\n\n  if (typeof process !== 'undefined' && (0, _typeof2.default)(process.versions) === 'object' && !!process.versions.electron) {\n    return true;\n  } // Detect the user agent when the `nodeIntegration` option is set to true\n\n\n  if ((typeof navigator === \"undefined\" ? \"undefined\" : (0, _typeof2.default)(navigator)) === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTracks(stream, kind) {\n  if (!stream || !stream.getTracks) {\n    return [];\n  }\n\n  return stream.getTracks().filter(function (t) {\n    return t.kind === (kind || 'audio');\n  });\n}\n\nfunction setSrcObject(stream, element) {\n  if ('srcObject' in element) {\n    element.srcObject = stream;\n  } else if ('mozSrcObject' in element) {\n    element.mozSrcObject = stream;\n  } else {\n    element.srcObject = stream;\n  }\n}\n/**\n * @param {Blob} file - File or Blob object.\n * @param {function} callback - Callback function.\n * @example\n * getSeekableBlob(blob or file, callback);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nfunction getSeekableBlob(inputBlob, callback) {\n  // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n  if (typeof EBML === 'undefined') {\n    throw new Error('Please link: https://cdn.webrtc-experiment.com/EBML.js');\n  }\n\n  var reader = new EBML.Reader();\n  var decoder = new EBML.Decoder();\n  var tools = EBML.tools;\n  var fileReader = new FileReader();\n\n  fileReader.onload = function (e) {\n    var ebmlElms = decoder.decode(this.result);\n    ebmlElms.forEach(function (element) {\n      reader.read(element);\n    });\n    reader.stop();\n    var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n    var body = this.result.slice(reader.metadataSize);\n    var newBlob = new Blob([refinedMetadataBuf, body], {\n      type: 'video/webm'\n    });\n    callback(newBlob);\n  };\n\n  fileReader.readAsArrayBuffer(inputBlob);\n} // __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * Storage.AudioContext === webkitAudioContext\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n  Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n  Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n  if (isFirefox || isSafari || isEdge) {\n    return true;\n  }\n\n  var nVer = navigator.appVersion;\n  var nAgt = navigator.userAgent;\n  var fullVersion = '' + parseFloat(navigator.appVersion);\n  var majorVersion = parseInt(navigator.appVersion, 10);\n  var nameOffset, verOffset, ix;\n\n  if (isChrome || isOpera) {\n    verOffset = nAgt.indexOf('Chrome');\n    fullVersion = nAgt.substring(verOffset + 7);\n  } // trim the fullVersion string at semicolon/space if present\n\n\n  if ((ix = fullVersion.indexOf(';')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n\n  if ((ix = fullVersion.indexOf(' ')) !== -1) {\n    fullVersion = fullVersion.substring(0, ix);\n  }\n\n  majorVersion = parseInt('' + fullVersion, 10);\n\n  if (isNaN(majorVersion)) {\n    fullVersion = '' + parseFloat(navigator.appVersion);\n    majorVersion = parseInt(navigator.appVersion, 10);\n  }\n\n  return majorVersion >= 49;\n} // ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ondataavailable: function() {} // get intervals based blobs\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\n\nfunction MediaStreamRecorder(mediaStream, config) {\n  var self = this;\n\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n\n  if (typeof MediaRecorder === 'undefined') {\n    throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n  }\n\n  config = config || {\n    // bitsPerSecond: 256 * 8 * 1024,\n    mimeType: 'video/webm'\n  };\n\n  if (config.type === 'audio') {\n    if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n      var stream;\n\n      if (!!navigator.mozGetUserMedia) {\n        stream = new MediaStream();\n        stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n      } else {\n        // webkitMediaStream\n        stream = new MediaStream(getTracks(mediaStream, 'audio'));\n      }\n\n      mediaStream = stream;\n    }\n\n    if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n      config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n    }\n\n    if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n      // forcing better codecs on Firefox (via #166)\n      config.mimeType = 'audio/ogg';\n    }\n  }\n\n  var arrayOfBlobs = [];\n  /**\n   * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * var arrayOfBlobs = recorder.getArrayOfBlobs();\n   * @returns {Array} Returns array of recorded blobs.\n   */\n\n  this.getArrayOfBlobs = function () {\n    return arrayOfBlobs;\n  };\n  /**\n   * This method records MediaStream.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.record();\n   */\n\n\n  this.record = function () {\n    // set defaults\n    self.blob = null;\n    self.clearRecordedData();\n    self.timestamps = [];\n    allStates = [];\n    arrayOfBlobs = [];\n    var recorderHints = config;\n\n    if (!config.disableLogs) {\n      console.log('Passing following config over MediaRecorder API.', recorderHints);\n    }\n\n    if (mediaRecorder) {\n      // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n      mediaRecorder = null;\n    }\n\n    if (isChrome && !isMediaRecorderCompatible()) {\n      // to support video-only recording on stable\n      recorderHints = 'video/vp8';\n    }\n\n    if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n      if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n        if (!config.disableLogs) {\n          console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n        }\n\n        recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n      }\n    } // using MediaRecorder API here\n\n\n    try {\n      mediaRecorder = new MediaRecorder(mediaStream, recorderHints); // reset\n\n      config.mimeType = recorderHints.mimeType;\n    } catch (e) {\n      // chrome-based fallback\n      mediaRecorder = new MediaRecorder(mediaStream);\n    } // old hack?\n\n\n    if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n      if (!config.disableLogs) {\n        console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n      }\n    } // Dispatching OnDataAvailable Handler\n\n\n    mediaRecorder.ondataavailable = function (e) {\n      if (e.data) {\n        allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n      }\n\n      if (typeof config.timeSlice === 'number') {\n        if (e.data && e.data.size && e.data.size > 100) {\n          arrayOfBlobs.push(e.data);\n          updateTimeStamp();\n\n          if (typeof config.ondataavailable === 'function') {\n            // intervals based blobs\n            var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n              type: getMimeType(recorderHints)\n            });\n            config.ondataavailable(blob);\n          }\n        }\n\n        return;\n      }\n\n      if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n        // make sure that stopRecording always getting fired\n        // even if there is invalid data\n        if (self.recordingCallback) {\n          self.recordingCallback(new Blob([], {\n            type: getMimeType(recorderHints)\n          }));\n          self.recordingCallback = null;\n        }\n\n        return;\n      }\n\n      self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n        type: getMimeType(recorderHints)\n      });\n\n      if (self.recordingCallback) {\n        self.recordingCallback(self.blob);\n        self.recordingCallback = null;\n      }\n    };\n\n    mediaRecorder.onstart = function () {\n      allStates.push('started');\n    };\n\n    mediaRecorder.onpause = function () {\n      allStates.push('paused');\n    };\n\n    mediaRecorder.onresume = function () {\n      allStates.push('resumed');\n    };\n\n    mediaRecorder.onstop = function () {\n      allStates.push('stopped');\n    };\n\n    mediaRecorder.onerror = function (error) {\n      if (!error) {\n        return;\n      }\n\n      if (!error.name) {\n        error.name = 'UnknownError';\n      }\n\n      allStates.push('error: ' + error);\n\n      if (!config.disableLogs) {\n        // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n        if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n          console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n          console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n        } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n          console.error('MediaRecorder security error', error);\n        } // older code below\n        else if (error.name === 'OutOfMemory') {\n            console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n          } else if (error.name === 'IllegalStreamModification') {\n            console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n          } else if (error.name === 'OtherRecordingError') {\n            console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n          } else if (error.name === 'GenericError') {\n            console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n          } else {\n            console.error('MediaRecorder Error', error);\n          }\n      }\n\n      (function (looper) {\n        if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n          delete config.timeslice; // 10 minutes, enough?\n\n          mediaRecorder.start(10 * 60 * 1000);\n          return;\n        }\n\n        setTimeout(looper, 1000);\n      })();\n\n      if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n        mediaRecorder.stop();\n      }\n    };\n\n    if (typeof config.timeSlice === 'number') {\n      updateTimeStamp();\n      mediaRecorder.start(config.timeSlice);\n    } else {\n      // default is 60 minutes; enough?\n      // use config => {timeSlice: 1000} otherwise\n      mediaRecorder.start(3.6e+6);\n    }\n\n    if (config.initCallback) {\n      config.initCallback(); // old code\n    }\n  };\n  /**\n   * @property {Array} timestamps - Array of time stamps\n   * @memberof MediaStreamRecorder\n   * @example\n   * console.log(recorder.timestamps);\n   */\n\n\n  this.timestamps = [];\n\n  function updateTimeStamp() {\n    self.timestamps.push(new Date().getTime());\n\n    if (typeof config.onTimeStamp === 'function') {\n      config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n    }\n  }\n\n  function getMimeType(secondObject) {\n    if (mediaRecorder && mediaRecorder.mimeType) {\n      return mediaRecorder.mimeType;\n    }\n\n    return secondObject.mimeType || 'video/webm';\n  }\n  /**\n   * This method stops recording MediaStream.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n    if (!mediaRecorder) {\n      return;\n    }\n\n    this.recordingCallback = callback;\n\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n    }\n\n    if (typeof config.timeSlice === 'number') {\n      setTimeout(function () {\n        self.blob = new Blob(arrayOfBlobs, {\n          type: getMimeType(config)\n        });\n        self.recordingCallback(self.blob);\n      }, 100);\n    }\n  };\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.pause();\n   */\n\n\n  this.pause = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    if (mediaRecorder.state === 'recording') {\n      mediaRecorder.pause();\n    }\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    if (mediaRecorder.state === 'paused') {\n      mediaRecorder.resume();\n    }\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      self.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    arrayOfBlobs = [];\n    mediaRecorder = null;\n    self.timestamps = [];\n  } // Reference to \"MediaRecorder\" object\n\n\n  var mediaRecorder;\n  /**\n   * Access to native MediaRecorder API\n   * @method\n   * @memberof MediaStreamRecorder\n   * @instance\n   * @example\n   * var internal = recorder.getInternalRecorder();\n   * internal.ondataavailable = function() {}; // override\n   * internal.stream, internal.onpause, internal.onstop, etc.\n   * @returns {Object} Returns internal recording object.\n   */\n\n  this.getInternalRecorder = function () {\n    return mediaRecorder;\n  };\n\n  function isMediaStreamActive() {\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\n   * @memberof MediaStreamRecorder\n   * @example\n   * recorder.stop(function() {\n   *     var blob = recorder.blob;\n   * });\n   */\n\n\n  this.blob = null;\n  /**\n   * Get MediaRecorder readonly state.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * var state = recorder.getState();\n   * @returns {String} Returns recording state.\n   */\n\n  this.getState = function () {\n    if (!mediaRecorder) {\n      return 'inactive';\n    }\n\n    return mediaRecorder.state || 'inactive';\n  }; // list of all recording states\n\n\n  var allStates = [];\n  /**\n   * Get MediaRecorder all recording states.\n   * @method\n   * @memberof MediaStreamRecorder\n   * @example\n   * var state = recorder.getAllStates();\n   * @returns {Array} Returns all recording states\n   */\n\n  this.getAllStates = function () {\n    return allStates;\n  }; // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n\n\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = false; // disable to minimize CPU usage\n  }\n\n  var self = this; // this method checks if media stream is stopped\n  // or if any track is ended.\n\n  (function () {\n    function looper() {\n      if (!mediaRecorder || config.checkForInactiveTracks === false) {\n        return;\n      }\n\n      if (isMediaStreamActive() === false) {\n        if (!config.disableLogs) {\n          console.log('MediaStream seems stopped.');\n        }\n\n        self.stop();\n        return;\n      }\n\n      setTimeout(looper, 1000); // check every second\n    }\n\n    return looper;\n  })()(); // for debugging\n\n  this.name = 'MediaStreamRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n} // source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n * @summary JavaScript standalone object for stereo audio recording.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef StereoAudioRecorder\n * @class\n * @example\n * var recorder = new StereoAudioRecorder(MediaStream, {\n *     sampleRate: 44100,\n *     bufferSize: 4096\n * });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n */\n\n\nfunction StereoAudioRecorder(mediaStream, config) {\n  if (!getTracks(mediaStream, 'audio').length) {\n    throw 'Your stream has no audio tracks.';\n  }\n\n  config = config || {};\n  var self = this; // variables\n\n  var leftchannel = [];\n  var rightchannel = [];\n  var recording = false;\n  var recordingLength = 0;\n  var jsAudioNode;\n  var numberOfAudioChannels = 2;\n  /**\n   * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\n   * @property {number} desiredSampRate - Desired Bits per sample * 1000\n   * @memberof StereoAudioRecorder\n   * @instance\n   * @example\n   * var recorder = StereoAudioRecorder(mediaStream, {\n   *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n   * });\n   */\n\n  var desiredSampRate = config.desiredSampRate; // backward compatibility\n\n  if (config.leftChannel === true) {\n    numberOfAudioChannels = 1;\n  }\n\n  if (config.numberOfAudioChannels === 1) {\n    numberOfAudioChannels = 1;\n  }\n\n  if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n    numberOfAudioChannels = 2;\n  }\n\n  if (!config.disableLogs) {\n    console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n  } // if any Track within the MediaStream is muted or not enabled at any time, \n  // the browser will only record black frames \n  // or silence since that is the content produced by the Track\n  // so we need to stopRecording as soon as any single track ends.\n\n\n  if (typeof config.checkForInactiveTracks === 'undefined') {\n    config.checkForInactiveTracks = true;\n  }\n\n  function isMediaStreamActive() {\n    if (config.checkForInactiveTracks === false) {\n      // always return \"true\"\n      return true;\n    }\n\n    if ('active' in mediaStream) {\n      if (!mediaStream.active) {\n        return false;\n      }\n    } else if ('ended' in mediaStream) {\n      // old hack\n      if (mediaStream.ended) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * This method records MediaStream.\n   * @method\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder.record();\n   */\n\n\n  this.record = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n\n    resetVariables();\n    isAudioProcessStarted = isPaused = false;\n    recording = true;\n\n    if (typeof config.timeSlice !== 'undefined') {\n      looper();\n    }\n  };\n\n  function mergeLeftRightBuffers(config, callback) {\n    function mergeAudioBuffers(config, cb) {\n      var numberOfAudioChannels = config.numberOfAudioChannels; // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n\n      var leftBuffers = config.leftBuffers.slice(0);\n      var rightBuffers = config.rightBuffers.slice(0);\n      var sampleRate = config.sampleRate;\n      var internalInterleavedLength = config.internalInterleavedLength;\n      var desiredSampRate = config.desiredSampRate;\n\n      if (numberOfAudioChannels === 2) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n        rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n          rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n        }\n      }\n\n      if (numberOfAudioChannels === 1) {\n        leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n\n        if (desiredSampRate) {\n          leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n        }\n      } // set sample rate as desired sample rate\n\n\n      if (desiredSampRate) {\n        sampleRate = desiredSampRate;\n      } // for changing the sampling rate, reference:\n      // http://stackoverflow.com/a/28977136/552182\n\n\n      function interpolateArray(data, newSampleRate, oldSampleRate) {\n        var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n        var newData = [];\n        var springFactor = Number((data.length - 1) / (fitCount - 1));\n        newData[0] = data[0];\n\n        for (var i = 1; i < fitCount - 1; i++) {\n          var tmp = i * springFactor;\n          var before = Number(Math.floor(tmp)).toFixed();\n          var after = Number(Math.ceil(tmp)).toFixed();\n          var atPoint = tmp - before;\n          newData[i] = linearInterpolate(data[before], data[after], atPoint);\n        }\n\n        newData[fitCount - 1] = data[data.length - 1];\n        return newData;\n      }\n\n      function linearInterpolate(before, after, atPoint) {\n        return before + (after - before) * atPoint;\n      }\n\n      function mergeBuffers(channelBuffer, rLength) {\n        var result = new Float64Array(rLength);\n        var offset = 0;\n        var lng = channelBuffer.length;\n\n        for (var i = 0; i < lng; i++) {\n          var buffer = channelBuffer[i];\n          result.set(buffer, offset);\n          offset += buffer.length;\n        }\n\n        return result;\n      }\n\n      function interleave(leftChannel, rightChannel) {\n        var length = leftChannel.length + rightChannel.length;\n        var result = new Float64Array(length);\n        var inputIndex = 0;\n\n        for (var index = 0; index < length;) {\n          result[index++] = leftChannel[inputIndex];\n          result[index++] = rightChannel[inputIndex];\n          inputIndex++;\n        }\n\n        return result;\n      }\n\n      function writeUTFBytes(view, offset, string) {\n        var lng = string.length;\n\n        for (var i = 0; i < lng; i++) {\n          view.setUint8(offset + i, string.charCodeAt(i));\n        }\n      } // interleave both channels together\n\n\n      var interleaved;\n\n      if (numberOfAudioChannels === 2) {\n        interleaved = interleave(leftBuffers, rightBuffers);\n      }\n\n      if (numberOfAudioChannels === 1) {\n        interleaved = leftBuffers;\n      }\n\n      var interleavedLength = interleaved.length; // create wav file\n\n      var resultingBufferLength = 44 + interleavedLength * 2;\n      var buffer = new ArrayBuffer(resultingBufferLength);\n      var view = new DataView(buffer); // RIFF chunk descriptor/identifier \n\n      writeUTFBytes(view, 0, 'RIFF'); // RIFF chunk length\n      // changed \"44\" to \"36\" via #401\n\n      view.setUint32(4, 36 + interleavedLength * 2, true); // RIFF type \n\n      writeUTFBytes(view, 8, 'WAVE'); // format chunk identifier \n      // FMT sub-chunk\n\n      writeUTFBytes(view, 12, 'fmt '); // format chunk length \n\n      view.setUint32(16, 16, true); // sample format (raw)\n\n      view.setUint16(20, 1, true); // stereo (2 channels)\n\n      view.setUint16(22, numberOfAudioChannels, true); // sample rate \n\n      view.setUint32(24, sampleRate, true); // byte rate (sample rate * block align)\n\n      view.setUint32(28, sampleRate * 2, true); // block align (channel count * bytes per sample) \n\n      view.setUint16(32, numberOfAudioChannels * 2, true); // bits per sample \n\n      view.setUint16(34, 16, true); // data sub-chunk\n      // data chunk identifier \n\n      writeUTFBytes(view, 36, 'data'); // data chunk length \n\n      view.setUint32(40, interleavedLength * 2, true); // write the PCM samples\n\n      var lng = interleavedLength;\n      var index = 44;\n      var volume = 1;\n\n      for (var i = 0; i < lng; i++) {\n        view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n        index += 2;\n      }\n\n      if (cb) {\n        return cb({\n          buffer: buffer,\n          view: view\n        });\n      }\n\n      postMessage({\n        buffer: buffer,\n        view: view\n      });\n    }\n\n    if (config.noWorker) {\n      mergeAudioBuffers(config, function (data) {\n        callback(data.buffer, data.view);\n      });\n      return;\n    }\n\n    var webWorker = processInWebWorker(mergeAudioBuffers);\n\n    webWorker.onmessage = function (event) {\n      callback(event.data.buffer, event.data.view); // release memory\n\n      URL.revokeObjectURL(webWorker.workerURL); // kill webworker (or Chrome will kill your page after ~25 calls)\n\n      webWorker.terminate();\n    };\n\n    webWorker.postMessage(config);\n  }\n\n  function processInWebWorker(_function) {\n    var workerURL = URL.createObjectURL(new Blob([_function.toString(), ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(workerURL);\n    worker.workerURL = workerURL;\n    return worker;\n  }\n  /**\n   * This method stops recording MediaStream.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {}; // stop recording\n\n\n    recording = false;\n    mergeLeftRightBuffers({\n      desiredSampRate: desiredSampRate,\n      sampleRate: sampleRate,\n      numberOfAudioChannels: numberOfAudioChannels,\n      internalInterleavedLength: recordingLength,\n      leftBuffers: leftchannel,\n      rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n      noWorker: config.noWorker\n    }, function (buffer, view) {\n      /**\n       * @property {Blob} blob - The recorded blob object.\n       * @memberof StereoAudioRecorder\n       * @example\n       * recorder.stop(function(){\n       *     var blob = recorder.blob;\n       * });\n       */\n      self.blob = new Blob([view], {\n        type: 'audio/wav'\n      });\n      /**\n       * @property {ArrayBuffer} buffer - The recorded buffer object.\n       * @memberof StereoAudioRecorder\n       * @example\n       * recorder.stop(function(){\n       *     var buffer = recorder.buffer;\n       * });\n       */\n\n      self.buffer = new ArrayBuffer(view.buffer.byteLength);\n      /**\n       * @property {DataView} view - The recorded data-view object.\n       * @memberof StereoAudioRecorder\n       * @example\n       * recorder.stop(function(){\n       *     var view = recorder.view;\n       * });\n       */\n\n      self.view = view;\n      self.sampleRate = desiredSampRate || sampleRate;\n      self.bufferSize = bufferSize; // recorded audio length\n\n      self.length = recordingLength;\n      isAudioProcessStarted = false;\n\n      if (callback) {\n        callback(self.blob);\n      }\n    });\n  };\n\n  if (typeof Storage === 'undefined') {\n    var Storage = {\n      AudioContextConstructor: null,\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    };\n  }\n\n  if (!Storage.AudioContextConstructor) {\n    Storage.AudioContextConstructor = new Storage.AudioContext();\n  }\n\n  var context = Storage.AudioContextConstructor; // creates an audio node from the microphone incoming stream\n\n  var audioInput = context.createMediaStreamSource(mediaStream);\n  var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n  /**\n   * From the spec: This value controls how frequently the audioprocess event is\n   * dispatched and how many sample-frames need to be processed each call.\n   * Lower values for buffer size will result in a lower (better) latency.\n   * Higher values will be necessary to avoid audio breakup and glitches\n   * The size of the buffer (in sample-frames) which needs to\n   * be processed each time onprocessaudio is called.\n   * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n   * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder = new StereoAudioRecorder(mediaStream, {\n   *     bufferSize: 4096\n   * });\n   */\n  // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n\n  var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n  if (legalBufferValues.indexOf(bufferSize) === -1) {\n    if (!config.disableLogs) {\n      console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n    }\n  }\n\n  if (context.createJavaScriptNode) {\n    jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else if (context.createScriptProcessor) {\n    jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n  } else {\n    throw 'WebAudio API has no support on this browser.';\n  } // connect the stream to the script processor\n\n\n  audioInput.connect(jsAudioNode);\n\n  if (!config.bufferSize) {\n    bufferSize = jsAudioNode.bufferSize; // device buffer-size\n  }\n  /**\n   * The sample rate (in sample-frames per second) at which the\n   * AudioContext handles audio. It is assumed that all AudioNodes\n   * in the context run at this rate. In making this assumption,\n   * sample-rate converters or \"varispeed\" processors are not supported\n   * in real-time processing.\n   * The sampleRate parameter describes the sample-rate of the\n   * linear PCM audio data in the buffer in sample-frames per second.\n   * An implementation must support sample-rates in at least\n   * the range 22050 to 96000.\n   * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder = new StereoAudioRecorder(mediaStream, {\n   *     sampleRate: 44100\n   * });\n   */\n\n\n  var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n  if (sampleRate < 22050 || sampleRate > 96000) {\n    // Ref: http://stackoverflow.com/a/26303918/552182\n    if (!config.disableLogs) {\n      console.log('sample-rate must be under range 22050 and 96000.');\n    }\n  }\n\n  if (!config.disableLogs) {\n    if (config.desiredSampRate) {\n      console.log('Desired sample-rate: ' + config.desiredSampRate);\n    }\n  }\n\n  var isPaused = false;\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder.pause();\n   */\n\n  this.pause = function () {\n    isPaused = true;\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    if (isMediaStreamActive() === false) {\n      throw 'Please make sure MediaStream is active.';\n    }\n\n    if (!recording) {\n      if (!config.disableLogs) {\n        console.log('Seems recording has been restarted.');\n      }\n\n      this.record();\n      return;\n    }\n\n    isPaused = false;\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof StereoAudioRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    config.checkForInactiveTracks = false;\n\n    if (recording) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function resetVariables() {\n    leftchannel = [];\n    rightchannel = [];\n    recordingLength = 0;\n    isAudioProcessStarted = false;\n    recording = false;\n    isPaused = false;\n    context = null;\n    self.leftchannel = leftchannel;\n    self.rightchannel = rightchannel;\n    self.numberOfAudioChannels = numberOfAudioChannels;\n    self.desiredSampRate = desiredSampRate;\n    self.sampleRate = sampleRate;\n    self.recordingLength = recordingLength;\n    intervalsBasedBuffers = {\n      left: [],\n      right: [],\n      recordingLength: 0\n    };\n  }\n\n  function clearRecordedDataCB() {\n    if (jsAudioNode) {\n      jsAudioNode.onaudioprocess = null;\n      jsAudioNode.disconnect();\n      jsAudioNode = null;\n    }\n\n    if (audioInput) {\n      audioInput.disconnect();\n      audioInput = null;\n    }\n\n    resetVariables();\n  } // for debugging\n\n\n  this.name = 'StereoAudioRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var isAudioProcessStarted = false;\n\n  function onAudioProcessDataAvailable(e) {\n    if (isPaused) {\n      return;\n    }\n\n    if (isMediaStreamActive() === false) {\n      if (!config.disableLogs) {\n        console.log('MediaStream seems stopped.');\n      }\n\n      jsAudioNode.disconnect();\n      recording = false;\n    }\n\n    if (!recording) {\n      if (audioInput) {\n        audioInput.disconnect();\n        audioInput = null;\n      }\n\n      return;\n    }\n    /**\n     * This method is called on \"onaudioprocess\" event's first invocation.\n     * @method {function} onAudioProcessStarted\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.onAudioProcessStarted: function() { };\n     */\n\n\n    if (!isAudioProcessStarted) {\n      isAudioProcessStarted = true;\n\n      if (config.onAudioProcessStarted) {\n        config.onAudioProcessStarted();\n      }\n\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    }\n\n    var left = e.inputBuffer.getChannelData(0); // we clone the samples\n\n    var chLeft = new Float32Array(left);\n    leftchannel.push(chLeft);\n\n    if (numberOfAudioChannels === 2) {\n      var right = e.inputBuffer.getChannelData(1);\n      var chRight = new Float32Array(right);\n      rightchannel.push(chRight);\n    }\n\n    recordingLength += bufferSize; // export raw PCM\n\n    self.recordingLength = recordingLength;\n\n    if (typeof config.timeSlice !== 'undefined') {\n      intervalsBasedBuffers.recordingLength += bufferSize;\n      intervalsBasedBuffers.left.push(chLeft);\n\n      if (numberOfAudioChannels === 2) {\n        intervalsBasedBuffers.right.push(chRight);\n      }\n    }\n  }\n\n  jsAudioNode.onaudioprocess = onAudioProcessDataAvailable; // to prevent self audio to be connected with speakers\n\n  if (context.createMediaStreamDestination) {\n    jsAudioNode.connect(context.createMediaStreamDestination());\n  } else {\n    jsAudioNode.connect(context.destination);\n  } // export raw PCM\n\n\n  this.leftchannel = leftchannel;\n  this.rightchannel = rightchannel;\n  this.numberOfAudioChannels = numberOfAudioChannels;\n  this.desiredSampRate = desiredSampRate;\n  this.sampleRate = sampleRate;\n  self.recordingLength = recordingLength; // helper for intervals based blobs\n\n  var intervalsBasedBuffers = {\n    left: [],\n    right: [],\n    recordingLength: 0\n  }; // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n\n  function looper() {\n    if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n      return;\n    }\n\n    if (intervalsBasedBuffers.left.length) {\n      mergeLeftRightBuffers({\n        desiredSampRate: desiredSampRate,\n        sampleRate: sampleRate,\n        numberOfAudioChannels: numberOfAudioChannels,\n        internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n        leftBuffers: intervalsBasedBuffers.left,\n        rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n      }, function (buffer, view) {\n        var blob = new Blob([view], {\n          type: 'audio/wav'\n        });\n        config.ondataavailable(blob);\n        setTimeout(looper, config.timeSlice);\n      });\n      intervalsBasedBuffers = {\n        left: [],\n        right: [],\n        recordingLength: 0\n      };\n    } else {\n      setTimeout(looper, config.timeSlice);\n    }\n  }\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n} // _________________\n// CanvasRecorder.js\n\n/**\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\n * @summary HTML2Canvas recording into video WebM.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef CanvasRecorder\n * @class\n * @example\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\n * @param {object} config - {disableLogs:true, initCallback: function}\n */\n\n\nfunction CanvasRecorder(htmlElement, config) {\n  if (typeof html2canvas === 'undefined') {\n    throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\n  }\n\n  config = config || {};\n\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  } // via DetectRTC.js\n\n\n  var isCanvasSupportsStreamCapturing = false;\n  ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function (item) {\n    if (item in document.createElement('canvas')) {\n      isCanvasSupportsStreamCapturing = true;\n    }\n  });\n\n  var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n  var chromeVersion = 50;\n  var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\n  if (_isChrome && matchArray && matchArray[2]) {\n    chromeVersion = parseInt(matchArray[2], 10);\n  }\n\n  if (_isChrome && chromeVersion < 52) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n\n  if (config.useWhammyRecorder) {\n    isCanvasSupportsStreamCapturing = false;\n  }\n\n  var globalCanvas, mediaStreamRecorder;\n\n  if (isCanvasSupportsStreamCapturing) {\n    if (!config.disableLogs) {\n      console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n    }\n\n    if (htmlElement instanceof HTMLCanvasElement) {\n      globalCanvas = htmlElement;\n    } else if (htmlElement instanceof CanvasRenderingContext2D) {\n      globalCanvas = htmlElement.canvas;\n    } else {\n      throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n    }\n  } else if (!!navigator.mozGetUserMedia) {\n    if (!config.disableLogs) {\n      console.error('Canvas recording is NOT supported in Firefox.');\n    }\n  }\n\n  var isRecording;\n  /**\n   * This method records Canvas.\n   * @method\n   * @memberof CanvasRecorder\n   * @example\n   * recorder.record();\n   */\n\n  this.record = function () {\n    isRecording = true;\n\n    if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n      // CanvasCaptureMediaStream\n      var canvasMediaStream;\n\n      if ('captureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n      } else if ('mozCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.mozCaptureStream(25);\n      } else if ('webkitCaptureStream' in globalCanvas) {\n        canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n      }\n\n      try {\n        var mdStream = new MediaStream();\n        mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n        canvasMediaStream = mdStream;\n      } catch (e) {}\n\n      if (!canvasMediaStream) {\n        throw 'captureStream API are NOT available.';\n      } // Note: Jan 18, 2016 status is that, \n      // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n\n\n      mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n        mimeType: config.mimeType || 'video/webm'\n      });\n      mediaStreamRecorder.record();\n    } else {\n      whammy.frames = [];\n      lastTime = new Date().getTime();\n      drawCanvasFrame();\n    }\n\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n\n  this.getWebPImages = function (callback) {\n    if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n      callback();\n      return;\n    }\n\n    var framesLength = whammy.frames.length;\n    whammy.frames.forEach(function (frame, idx) {\n      var framesRemaining = framesLength - idx;\n\n      if (!config.disableLogs) {\n        console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n      }\n\n      if (config.onEncodingCallback) {\n        config.onEncodingCallback(framesRemaining, framesLength);\n      }\n\n      var webp = frame.image.toDataURL('image/webp', 1);\n      whammy.frames[idx].image = webp;\n    });\n\n    if (!config.disableLogs) {\n      console.log('Generating WebM');\n    }\n\n    callback();\n  };\n  /**\n   * This method stops recording Canvas.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof CanvasRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n\n  this.stop = function (callback) {\n    isRecording = false;\n    var that = this;\n\n    if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n      mediaStreamRecorder.stop(callback);\n      return;\n    }\n\n    this.getWebPImages(function () {\n      /**\n       * @property {Blob} blob - Recorded frames in video/webm blob.\n       * @memberof CanvasRecorder\n       * @example\n       * recorder.stop(function() {\n       *     var blob = recorder.blob;\n       * });\n       */\n      whammy.compile(function (blob) {\n        if (!config.disableLogs) {\n          console.log('Recording finished!');\n        }\n\n        that.blob = blob;\n\n        if (that.blob.forEach) {\n          that.blob = new Blob([], {\n            type: 'video/webm'\n          });\n        }\n\n        if (callback) {\n          callback(that.blob);\n        }\n\n        whammy.frames = [];\n      });\n    });\n  };\n\n  var isPausedRecording = false;\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof CanvasRecorder\n   * @example\n   * recorder.pause();\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.pause();\n      return;\n    }\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof CanvasRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n\n    if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n      mediaStreamRecorder.resume();\n      return;\n    }\n\n    if (!isRecording) {\n      this.record();\n    }\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof CanvasRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    if (isRecording) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isRecording = false;\n    isPausedRecording = false;\n  } // for debugging\n\n\n  this.name = 'CanvasRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  function cloneCanvas() {\n    //create a new canvas\n    var newCanvas = document.createElement('canvas');\n    var context = newCanvas.getContext('2d'); //set dimensions\n\n    newCanvas.width = htmlElement.width;\n    newCanvas.height = htmlElement.height; //apply the old canvas to the new one\n\n    context.drawImage(htmlElement, 0, 0); //return the new canvas\n\n    return newCanvas;\n  }\n\n  function drawCanvasFrame() {\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawCanvasFrame, 500);\n    }\n\n    if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n      var duration = new Date().getTime() - lastTime; // via #206, by Jack i.e. @Seymourr\n\n      lastTime = new Date().getTime();\n      whammy.frames.push({\n        image: cloneCanvas(),\n        duration: duration\n      });\n\n      if (isRecording) {\n        setTimeout(drawCanvasFrame, config.frameInterval);\n      }\n\n      return;\n    }\n\n    html2canvas(htmlElement, {\n      grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n      onrendered: function (canvas) {\n        var duration = new Date().getTime() - lastTime;\n\n        if (!duration) {\n          return setTimeout(drawCanvasFrame, config.frameInterval);\n        } // via #206, by Jack i.e. @Seymourr\n\n\n        lastTime = new Date().getTime();\n        whammy.frames.push({\n          image: canvas.toDataURL('image/webp', 1),\n          duration: duration\n        });\n\n        if (isRecording) {\n          setTimeout(drawCanvasFrame, config.frameInterval);\n        }\n      }\n    });\n  }\n\n  var lastTime = new Date().getTime();\n  var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.CanvasRecorder = CanvasRecorder;\n} // _________________\n// WhammyRecorder.js\n\n/**\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\n * @summary Video recording feature in Chrome.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WhammyRecorder\n * @class\n * @example\n * var recorder = new WhammyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n */\n\n\nfunction WhammyRecorder(mediaStream, config) {\n  config = config || {};\n\n  if (!config.frameInterval) {\n    config.frameInterval = 10;\n  }\n\n  if (!config.disableLogs) {\n    console.log('Using frames-interval:', config.frameInterval);\n  }\n  /**\n   * This method records video.\n   * @method\n   * @memberof WhammyRecorder\n   * @example\n   * recorder.record();\n   */\n\n\n  this.record = function () {\n    if (!config.width) {\n      config.width = 320;\n    }\n\n    if (!config.height) {\n      config.height = 240;\n    }\n\n    if (!config.video) {\n      config.video = {\n        width: config.width,\n        height: config.height\n      };\n    }\n\n    if (!config.canvas) {\n      config.canvas = {\n        width: config.width,\n        height: config.height\n      };\n    }\n\n    canvas.width = config.canvas.width || 320;\n    canvas.height = config.canvas.height || 240;\n    context = canvas.getContext('2d'); // setting defaults\n\n    if (config.video && config.video instanceof HTMLVideoElement) {\n      video = config.video.cloneNode();\n\n      if (config.initCallback) {\n        config.initCallback();\n      }\n    } else {\n      video = document.createElement('video');\n      setSrcObject(mediaStream, video);\n\n      video.onloadedmetadata = function () {\n        // \"onloadedmetadata\" may NOT work in FF?\n        if (config.initCallback) {\n          config.initCallback();\n        }\n      };\n\n      video.width = config.video.width;\n      video.height = config.video.height;\n    }\n\n    video.muted = true;\n    video.play();\n    lastTime = new Date().getTime();\n    whammy = new Whammy.Video();\n\n    if (!config.disableLogs) {\n      console.log('canvas resolutions', canvas.width, '*', canvas.height);\n      console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n    }\n\n    drawFrames(config.frameInterval);\n  };\n  /**\n   * Draw and push frames to Whammy\n   * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\n   */\n\n\n  function drawFrames(frameInterval) {\n    frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n    var duration = new Date().getTime() - lastTime;\n\n    if (!duration) {\n      return setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n\n    if (isPausedRecording) {\n      lastTime = new Date().getTime();\n      return setTimeout(drawFrames, 100);\n    } // via #206, by Jack i.e. @Seymourr\n\n\n    lastTime = new Date().getTime();\n\n    if (video.paused) {\n      // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n      // Tweak for Android Chrome\n      video.play();\n    }\n\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    whammy.frames.push({\n      duration: duration,\n      image: canvas.toDataURL('image/webp')\n    });\n\n    if (!isStopDrawing) {\n      setTimeout(drawFrames, frameInterval, frameInterval);\n    }\n  }\n\n  function asyncLoop(o) {\n    var i = -1,\n        length = o.length;\n    (function () {\n      function loop() {\n        i++;\n\n        if (i === length) {\n          o.callback();\n          return;\n        } // \"setTimeout\" added by Jim McLeod\n\n\n        setTimeout(function () {\n          o.functionToLoop(loop, i);\n        }, 1);\n      }\n\n      return loop;\n    })()();\n  }\n  /**\n   * remove black frames from the beginning to the specified frame\n   * @param {Array} _frames - array of frames to be checked\n   * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\n   * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\n   * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\n   * @returns {Array} - array of frames\n   */\n  // pull#293 by @volodalexey\n\n\n  function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n    var localCanvas = document.createElement('canvas');\n    localCanvas.width = canvas.width;\n    localCanvas.height = canvas.height;\n    var context2d = localCanvas.getContext('2d');\n    var resultFrames = [];\n    var checkUntilNotBlack = _framesToCheck === -1;\n    var endCheckFrame = _framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length ? _framesToCheck : _frames.length;\n    var sampleColor = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var maxColorDifference = Math.sqrt(Math.pow(255, 2) + Math.pow(255, 2) + Math.pow(255, 2));\n    var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n    var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n    var doNotCheckNext = false;\n    asyncLoop({\n      length: endCheckFrame,\n      functionToLoop: function (loop, f) {\n        var matchPixCount, endPixCheck, maxPixCount;\n\n        var finishImage = function () {\n          if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {// console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n          } else {\n            // console.log('frame is passed : ' + f);\n            if (checkUntilNotBlack) {\n              doNotCheckNext = true;\n            }\n\n            resultFrames.push(_frames[f]);\n          }\n\n          loop();\n        };\n\n        if (!doNotCheckNext) {\n          var image = new Image();\n\n          image.onload = function () {\n            context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n            var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n            matchPixCount = 0;\n            endPixCheck = imageData.data.length;\n            maxPixCount = imageData.data.length / 4;\n\n            for (var pix = 0; pix < endPixCheck; pix += 4) {\n              var currentColor = {\n                r: imageData.data[pix],\n                g: imageData.data[pix + 1],\n                b: imageData.data[pix + 2]\n              };\n              var colorDifference = Math.sqrt(Math.pow(currentColor.r - sampleColor.r, 2) + Math.pow(currentColor.g - sampleColor.g, 2) + Math.pow(currentColor.b - sampleColor.b, 2)); // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n\n              if (colorDifference <= maxColorDifference * pixTolerance) {\n                matchPixCount++;\n              }\n            }\n\n            finishImage();\n          };\n\n          image.src = _frames[f].image;\n        } else {\n          finishImage();\n        }\n      },\n      callback: function () {\n        resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n        if (resultFrames.length <= 0) {\n          // at least one last frame should be available for next manipulation\n          // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n          resultFrames.push(_frames[_frames.length - 1]);\n        }\n\n        callback(resultFrames);\n      }\n    });\n  }\n\n  var isStopDrawing = false;\n  /**\n   * This method stops recording video.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof WhammyRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    isStopDrawing = true;\n\n    var _this = this; // analyse of all frames takes some time!\n\n\n    setTimeout(function () {\n      // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n      // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n      // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n      dropBlackFrames(whammy.frames, -1, null, null, function (frames) {\n        whammy.frames = frames; // to display advertisement images!\n\n        if (config.advertisement && config.advertisement.length) {\n          whammy.frames = config.advertisement.concat(whammy.frames);\n        }\n        /**\n         * @property {Blob} blob - Recorded frames in video/webm blob.\n         * @memberof WhammyRecorder\n         * @example\n         * recorder.stop(function() {\n         *     var blob = recorder.blob;\n         * });\n         */\n\n\n        whammy.compile(function (blob) {\n          _this.blob = blob;\n\n          if (_this.blob.forEach) {\n            _this.blob = new Blob([], {\n              type: 'video/webm'\n            });\n          }\n\n          if (callback) {\n            callback(_this.blob);\n          }\n        });\n      });\n    }, 10);\n  };\n\n  var isPausedRecording = false;\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof WhammyRecorder\n   * @example\n   * recorder.pause();\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof WhammyRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n\n    if (isStopDrawing) {\n      this.record();\n    }\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof WhammyRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    if (!isStopDrawing) {\n      this.stop(clearRecordedDataCB);\n    }\n\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    whammy.frames = [];\n    isStopDrawing = true;\n    isPausedRecording = false;\n  } // for debugging\n\n\n  this.name = 'WhammyRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var video;\n  var lastTime;\n  var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WhammyRecorder = WhammyRecorder;\n} // https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar Whammy = function () {\n  // a more abstract-ish API\n  function WhammyVideo(duration) {\n    this.frames = [];\n    this.duration = duration || 1;\n    this.quality = 0.8;\n  }\n  /**\n   * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n   * @method\n   * @memberof Whammy\n   * @example\n   * recorder = new Whammy().Video(0.8, 100);\n   * recorder.add(canvas || context || 'image/webp');\n   * @param {string} frame - Canvas || Context || image/webp\n   * @param {number} duration - Stick a duration (in milliseconds)\n   */\n\n\n  WhammyVideo.prototype.add = function (frame, duration) {\n    if ('canvas' in frame) {\n      //CanvasRenderingContext2D\n      frame = frame.canvas;\n    }\n\n    if ('toDataURL' in frame) {\n      frame = frame.toDataURL('image/webp', this.quality);\n    }\n\n    if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n      throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n    }\n\n    this.frames.push({\n      image: frame,\n      duration: duration || this.duration\n    });\n  };\n\n  function processInWebWorker(_function) {\n    var blob = URL.createObjectURL(new Blob([_function.toString(), 'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'], {\n      type: 'application/javascript'\n    }));\n    var worker = new Worker(blob);\n    URL.revokeObjectURL(blob);\n    return worker;\n  }\n\n  function whammyInWebWorker(frames) {\n    function ArrayToWebM(frames) {\n      var info = checkFrames(frames);\n\n      if (!info) {\n        return [];\n      }\n\n      var clusterMaxDuration = 30000;\n      var EBML = [{\n        'id': 0x1a45dfa3,\n        // EBML\n        'data': [{\n          'data': 1,\n          'id': 0x4286 // EBMLVersion\n\n        }, {\n          'data': 1,\n          'id': 0x42f7 // EBMLReadVersion\n\n        }, {\n          'data': 4,\n          'id': 0x42f2 // EBMLMaxIDLength\n\n        }, {\n          'data': 8,\n          'id': 0x42f3 // EBMLMaxSizeLength\n\n        }, {\n          'data': 'webm',\n          'id': 0x4282 // DocType\n\n        }, {\n          'data': 2,\n          'id': 0x4287 // DocTypeVersion\n\n        }, {\n          'data': 2,\n          'id': 0x4285 // DocTypeReadVersion\n\n        }]\n      }, {\n        'id': 0x18538067,\n        // Segment\n        'data': [{\n          'id': 0x1549a966,\n          // Info\n          'data': [{\n            'data': 1e6,\n            //do things in millisecs (num of nanosecs for duration scale)\n            'id': 0x2ad7b1 // TimecodeScale\n\n          }, {\n            'data': 'whammy',\n            'id': 0x4d80 // MuxingApp\n\n          }, {\n            'data': 'whammy',\n            'id': 0x5741 // WritingApp\n\n          }, {\n            'data': doubleToString(info.duration),\n            'id': 0x4489 // Duration\n\n          }]\n        }, {\n          'id': 0x1654ae6b,\n          // Tracks\n          'data': [{\n            'id': 0xae,\n            // TrackEntry\n            'data': [{\n              'data': 1,\n              'id': 0xd7 // TrackNumber\n\n            }, {\n              'data': 1,\n              'id': 0x73c5 // TrackUID\n\n            }, {\n              'data': 0,\n              'id': 0x9c // FlagLacing\n\n            }, {\n              'data': 'und',\n              'id': 0x22b59c // Language\n\n            }, {\n              'data': 'V_VP8',\n              'id': 0x86 // CodecID\n\n            }, {\n              'data': 'VP8',\n              'id': 0x258688 // CodecName\n\n            }, {\n              'data': 1,\n              'id': 0x83 // TrackType\n\n            }, {\n              'id': 0xe0,\n              // Video\n              'data': [{\n                'data': info.width,\n                'id': 0xb0 // PixelWidth\n\n              }, {\n                'data': info.height,\n                'id': 0xba // PixelHeight\n\n              }]\n            }]\n          }]\n        }]\n      }]; //Generate clusters (max duration)\n\n      var frameNumber = 0;\n      var clusterTimecode = 0;\n\n      while (frameNumber < frames.length) {\n        var clusterFrames = [];\n        var clusterDuration = 0;\n\n        do {\n          clusterFrames.push(frames[frameNumber]);\n          clusterDuration += frames[frameNumber].duration;\n          frameNumber++;\n        } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n        var clusterCounter = 0;\n        var cluster = {\n          'id': 0x1f43b675,\n          // Cluster\n          'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n        }; //Add cluster to segment\n\n        EBML[1].data.push(cluster);\n        clusterTimecode += clusterDuration;\n      }\n\n      return generateEBML(EBML);\n    }\n\n    function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n      return [{\n        'data': clusterTimecode,\n        'id': 0xe7 // Timecode\n\n      }].concat(clusterFrames.map(function (webp) {\n        var block = makeSimpleBlock({\n          discardable: 0,\n          frame: webp.data.slice(4),\n          invisible: 0,\n          keyframe: 1,\n          lacing: 0,\n          trackNum: 1,\n          timecode: Math.round(clusterCounter)\n        });\n        clusterCounter += webp.duration;\n        return {\n          data: block,\n          id: 0xa3\n        };\n      }));\n    } // sums the lengths of all the frames and gets the duration\n\n\n    function checkFrames(frames) {\n      if (!frames[0]) {\n        postMessage({\n          error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n        });\n        return;\n      }\n\n      var width = frames[0].width,\n          height = frames[0].height,\n          duration = frames[0].duration;\n\n      for (var i = 1; i < frames.length; i++) {\n        duration += frames[i].duration;\n      }\n\n      return {\n        duration: duration,\n        width: width,\n        height: height\n      };\n    }\n\n    function numToBuffer(num) {\n      var parts = [];\n\n      while (num > 0) {\n        parts.push(num & 0xff);\n        num = num >> 8;\n      }\n\n      return new Uint8Array(parts.reverse());\n    }\n\n    function strToBuffer(str) {\n      return new Uint8Array(str.split('').map(function (e) {\n        return e.charCodeAt(0);\n      }));\n    }\n\n    function bitsToBuffer(bits) {\n      var data = [];\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n\n      for (var i = 0; i < bits.length; i += 8) {\n        data.push(parseInt(bits.substr(i, 8), 2));\n      }\n\n      return new Uint8Array(data);\n    }\n\n    function generateEBML(json) {\n      var ebml = [];\n\n      for (var i = 0; i < json.length; i++) {\n        var data = json[i].data;\n\n        if ((0, _typeof2.default)(data) === 'object') {\n          data = generateEBML(data);\n        }\n\n        if (typeof data === 'number') {\n          data = bitsToBuffer(data.toString(2));\n        }\n\n        if (typeof data === 'string') {\n          data = strToBuffer(data);\n        }\n\n        var len = data.size || data.byteLength || data.length;\n        var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n        var sizeToString = len.toString(2);\n        var padded = new Array(zeroes * 7 + 7 + 1 - sizeToString.length).join('0') + sizeToString;\n        var size = new Array(zeroes).join('0') + '1' + padded;\n        ebml.push(numToBuffer(json[i].id));\n        ebml.push(bitsToBuffer(size));\n        ebml.push(data);\n      }\n\n      return new Blob(ebml, {\n        type: 'video/webm'\n      });\n    }\n\n    function toBinStrOld(bits) {\n      var data = '';\n      var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n      bits = pad + bits;\n\n      for (var i = 0; i < bits.length; i += 8) {\n        data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n      }\n\n      return data;\n    }\n\n    function makeSimpleBlock(data) {\n      var flags = 0;\n\n      if (data.keyframe) {\n        flags |= 128;\n      }\n\n      if (data.invisible) {\n        flags |= 8;\n      }\n\n      if (data.lacing) {\n        flags |= data.lacing << 1;\n      }\n\n      if (data.discardable) {\n        flags |= 1;\n      }\n\n      if (data.trackNum > 127) {\n        throw 'TrackNumber > 127 not supported';\n      }\n\n      var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n        return String.fromCharCode(e);\n      }).join('') + data.frame;\n      return out;\n    }\n\n    function parseWebP(riff) {\n      var VP8 = riff.RIFF[0].WEBP[0];\n      var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n\n      for (var i = 0, c = []; i < 4; i++) {\n        c[i] = VP8.charCodeAt(frameStart + 3 + i);\n      }\n\n      var width, height, tmp; //the code below is literally copied verbatim from the bitstream spec\n\n      tmp = c[1] << 8 | c[0];\n      width = tmp & 0x3FFF;\n      tmp = c[3] << 8 | c[2];\n      height = tmp & 0x3FFF;\n      return {\n        width: width,\n        height: height,\n        data: VP8,\n        riff: riff\n      };\n    }\n\n    function getStrLength(string, offset) {\n      return parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n        var unpadded = i.charCodeAt(0).toString(2);\n        return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n      }).join(''), 2);\n    }\n\n    function parseRIFF(string) {\n      var offset = 0;\n      var chunks = {};\n\n      while (offset < string.length) {\n        var id = string.substr(offset, 4);\n        var len = getStrLength(string, offset);\n        var data = string.substr(offset + 4 + 4, len);\n        offset += 4 + 4 + len;\n        chunks[id] = chunks[id] || [];\n\n        if (id === 'RIFF' || id === 'LIST') {\n          chunks[id].push(parseRIFF(data));\n        } else {\n          chunks[id].push(data);\n        }\n      }\n\n      return chunks;\n    }\n\n    function doubleToString(num) {\n      return [].slice.call(new Uint8Array(new Float64Array([num]).buffer), 0).map(function (e) {\n        return String.fromCharCode(e);\n      }).reverse().join('');\n    }\n\n    var webm = new ArrayToWebM(frames.map(function (frame) {\n      var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n      webp.duration = frame.duration;\n      return webp;\n    }));\n    postMessage(webm);\n  }\n  /**\n   * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof Whammy\n   * @example\n   * recorder = new Whammy().Video(0.8, 100);\n   * recorder.compile(function(blob) {\n   *    // blob.size - blob.type\n   * });\n   */\n\n\n  WhammyVideo.prototype.compile = function (callback) {\n    var webWorker = processInWebWorker(whammyInWebWorker);\n\n    webWorker.onmessage = function (event) {\n      if (event.data.error) {\n        console.error(event.data.error);\n        return;\n      }\n\n      callback(event.data);\n    };\n\n    webWorker.postMessage(this.frames);\n  };\n\n  return {\n    /**\n     * A more abstract-ish API.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * @param {?number} speed - 0.8\n     * @param {?number} quality - 100\n     */\n    Video: WhammyVideo\n  };\n}();\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.Whammy = Whammy;\n} // ______________ (indexed-db)\n// DiskStorage.js\n\n/**\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\n * @summary Writing blobs into IndexedDB.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * DiskStorage.Store({\n *     audioBlob: yourAudioBlob,\n *     videoBlob: yourVideoBlob,\n *     gifBlob  : yourGifBlob\n * });\n * DiskStorage.Fetch(function(dataURL, type) {\n *     if(type === 'audioBlob') { }\n *     if(type === 'videoBlob') { }\n *     if(type === 'gifBlob')   { }\n * });\n * // DiskStorage.dataStoreName = 'recordRTC';\n * // DiskStorage.onError = function(error) { };\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\n * @property {function} Store - This method stores blobs in IndexedDB.\n * @property {function} onError - This function is invoked for any known/unknown error.\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar DiskStorage = {\n  /**\n   * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n   * @method\n   * @memberof DiskStorage\n   * @internal\n   * @example\n   * DiskStorage.init();\n   */\n  init: function () {\n    var self = this;\n\n    if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n      console.error('IndexedDB API are not available in this browser.');\n      return;\n    }\n\n    var dbVersion = 1;\n    var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n        db;\n    var request = indexedDB.open(dbName, dbVersion);\n\n    function createObjectStore(dataBase) {\n      dataBase.createObjectStore(self.dataStoreName);\n    }\n\n    function putInDB() {\n      var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n      if (self.videoBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n      }\n\n      if (self.gifBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n      }\n\n      if (self.audioBlob) {\n        transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n      }\n\n      function getFromStore(portionName) {\n        transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function (event) {\n          if (self.callback) {\n            self.callback(event.target.result, portionName);\n          }\n        };\n      }\n\n      getFromStore('audioBlob');\n      getFromStore('videoBlob');\n      getFromStore('gifBlob');\n    }\n\n    request.onerror = self.onError;\n\n    request.onsuccess = function () {\n      db = request.result;\n      db.onerror = self.onError;\n\n      if (db.setVersion) {\n        if (db.version !== dbVersion) {\n          var setVersion = db.setVersion(dbVersion);\n\n          setVersion.onsuccess = function () {\n            createObjectStore(db);\n            putInDB();\n          };\n        } else {\n          putInDB();\n        }\n      } else {\n        putInDB();\n      }\n    };\n\n    request.onupgradeneeded = function (event) {\n      createObjectStore(event.target.result);\n    };\n  },\n\n  /**\n   * This method fetches stored blobs from IndexedDB.\n   * @method\n   * @memberof DiskStorage\n   * @internal\n   * @example\n   * DiskStorage.Fetch(function(dataURL, type) {\n   *     if(type === 'audioBlob') { }\n   *     if(type === 'videoBlob') { }\n   *     if(type === 'gifBlob')   { }\n   * });\n   */\n  Fetch: function (callback) {\n    this.callback = callback;\n    this.init();\n    return this;\n  },\n\n  /**\n   * This method stores blobs in IndexedDB.\n   * @method\n   * @memberof DiskStorage\n   * @internal\n   * @example\n   * DiskStorage.Store({\n   *     audioBlob: yourAudioBlob,\n   *     videoBlob: yourVideoBlob,\n   *     gifBlob  : yourGifBlob\n   * });\n   */\n  Store: function (config) {\n    this.audioBlob = config.audioBlob;\n    this.videoBlob = config.videoBlob;\n    this.gifBlob = config.gifBlob;\n    this.init();\n    return this;\n  },\n\n  /**\n   * This function is invoked for any known/unknown error.\n   * @method\n   * @memberof DiskStorage\n   * @internal\n   * @example\n   * DiskStorage.onError = function(error){\n   *     alerot( JSON.stringify(error) );\n   * };\n   */\n  onError: function (error) {\n    console.error(JSON.stringify(error, null, '\\t'));\n  },\n\n  /**\n   * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n   * @memberof DiskStorage\n   * @internal\n   * @example\n   * DiskStorage.dataStoreName = 'recordRTC';\n   */\n  dataStoreName: 'recordRTC',\n  dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.DiskStorage = DiskStorage;\n} // ______________\n// GifRecorder.js\n\n/**\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GifRecorder\n * @class\n * @example\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     img.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\n */\n\n\nfunction GifRecorder(mediaStream, config) {\n  if (typeof GIFEncoder === 'undefined') {\n    var script = document.createElement('script');\n    script.src = 'https://cdn.webrtc-experiment.com/gif-recorder.js';\n    (document.body || document.documentElement).appendChild(script);\n  }\n\n  config = config || {};\n  var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n  /**\n   * This method records MediaStream.\n   * @method\n   * @memberof GifRecorder\n   * @example\n   * recorder.record();\n   */\n\n  this.record = function () {\n    if (typeof GIFEncoder === 'undefined') {\n      setTimeout(self.record, 1000);\n      return;\n    }\n\n    if (!isLoadedMetaData) {\n      setTimeout(self.record, 1000);\n      return;\n    }\n\n    if (!isHTMLObject) {\n      if (!config.width) {\n        config.width = video.offsetWidth || 320;\n      }\n\n      if (!config.height) {\n        config.height = video.offsetHeight || 240;\n      }\n\n      if (!config.video) {\n        config.video = {\n          width: config.width,\n          height: config.height\n        };\n      }\n\n      if (!config.canvas) {\n        config.canvas = {\n          width: config.width,\n          height: config.height\n        };\n      }\n\n      canvas.width = config.canvas.width || 320;\n      canvas.height = config.canvas.height || 240;\n      video.width = config.video.width || 320;\n      video.height = config.video.height || 240;\n    } // external library to record as GIF images\n\n\n    gifEncoder = new GIFEncoder(); // void setRepeat(int iter) \n    // Sets the number of times the set of GIF frames should be played. \n    // Default is 1; 0 means play indefinitely.\n\n    gifEncoder.setRepeat(0); // void setFrameRate(Number fps) \n    // Sets frame rate in frames per second. \n    // Equivalent to setDelay(1000/fps).\n    // Using \"setDelay\" instead of \"setFrameRate\"\n\n    gifEncoder.setDelay(config.frameRate || 200); // void setQuality(int quality) \n    // Sets quality of color quantization (conversion of images to the \n    // maximum 256 colors allowed by the GIF specification). \n    // Lower values (minimum = 1) produce better colors, \n    // but slow processing significantly. 10 is the default, \n    // and produces good color mapping at reasonable speeds. \n    // Values greater than 20 do not yield significant improvements in speed.\n\n    gifEncoder.setQuality(config.quality || 10); // Boolean start() \n    // This writes the GIF Header and returns false if it fails.\n\n    gifEncoder.start();\n\n    if (typeof config.onGifRecordingStarted === 'function') {\n      config.onGifRecordingStarted();\n    }\n\n    startTime = Date.now();\n\n    function drawVideoFrame(time) {\n      if (self.clearedRecordedData === true) {\n        return;\n      }\n\n      if (isPausedRecording) {\n        return setTimeout(function () {\n          drawVideoFrame(time);\n        }, 100);\n      }\n\n      lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n      if ((0, _typeof2.default)(lastFrameTime) === undefined) {\n        lastFrameTime = time;\n      } // ~10 fps\n\n\n      if (time - lastFrameTime < 90) {\n        return;\n      }\n\n      if (!isHTMLObject && video.paused) {\n        // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n        // Tweak for Android Chrome\n        video.play();\n      }\n\n      if (!isHTMLObject) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      }\n\n      if (config.onGifPreview) {\n        config.onGifPreview(canvas.toDataURL('image/png'));\n      }\n\n      gifEncoder.addFrame(context);\n      lastFrameTime = time;\n    }\n\n    lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n    if (config.initCallback) {\n      config.initCallback();\n    }\n  };\n  /**\n   * This method stops recording MediaStream.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof GifRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     img.src = URL.createObjectURL(blob);\n   * });\n   */\n\n\n  this.stop = function (callback) {\n    callback = callback || function () {};\n\n    if (lastAnimationFrame) {\n      cancelAnimationFrame(lastAnimationFrame);\n    }\n\n    endTime = Date.now();\n    /**\n     * @property {Blob} blob - The recorded blob object.\n     * @memberof GifRecorder\n     * @example\n     * recorder.stop(function(){\n     *     var blob = recorder.blob;\n     * });\n     */\n\n    this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n      type: 'image/gif'\n    });\n    callback(this.blob); // bug: find a way to clear old recorded blobs\n\n    gifEncoder.stream().bin = [];\n  };\n\n  var isPausedRecording = false;\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof GifRecorder\n   * @example\n   * recorder.pause();\n   */\n\n  this.pause = function () {\n    isPausedRecording = true;\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof GifRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    isPausedRecording = false;\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof GifRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    self.clearedRecordedData = true;\n    clearRecordedDataCB();\n  };\n\n  function clearRecordedDataCB() {\n    if (gifEncoder) {\n      gifEncoder.stream().bin = [];\n    }\n  } // for debugging\n\n\n  this.name = 'GifRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n\n  if (isHTMLObject) {\n    if (mediaStream instanceof CanvasRenderingContext2D) {\n      context = mediaStream;\n      canvas = context.canvas;\n    } else if (mediaStream instanceof HTMLCanvasElement) {\n      context = mediaStream.getContext('2d');\n      canvas = mediaStream;\n    }\n  }\n\n  var isLoadedMetaData = true;\n\n  if (!isHTMLObject) {\n    var video = document.createElement('video');\n    video.muted = true;\n    video.autoplay = true;\n    isLoadedMetaData = false;\n\n    video.onloadedmetadata = function () {\n      isLoadedMetaData = true;\n    };\n\n    setSrcObject(mediaStream, video);\n    video.play();\n  }\n\n  var lastAnimationFrame = null;\n  var startTime, endTime, lastFrameTime;\n  var gifEncoder;\n  var self = this;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.GifRecorder = GifRecorder;\n} // Last time updated: 2018-12-22 9:13:29 AM UTC\n// ________________________\n// MultiStreamsMixer v1.0.7\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n\nfunction MultiStreamsMixer(arrayOfMediaStreams) {\n  // requires: chrome://flags/#enable-experimental-web-platform-features\n  var videos = [];\n  var isStopDrawingFrames = false;\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000; margin-top:-1000000000;margin-left:-1000000000;';\n  (document.body || document.documentElement).appendChild(canvas);\n  this.disableLogs = false;\n  this.frameInterval = 10;\n  this.width = 360;\n  this.height = 240; // use gain node to prevent echo\n\n  this.useGainNode = true;\n  var self = this; // _____________________________\n  // Cross-Browser-Declarations.js\n  // WebAudio API representer\n\n  var AudioContext = window.AudioContext;\n\n  if (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n      /*global AudioContext:true */\n      AudioContext = mozAudioContext;\n    }\n  }\n  /*jshint -W079 */\n\n\n  var URL = window.URL;\n\n  if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n  }\n\n  if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') {\n    // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n      navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n  }\n\n  var MediaStream = window.MediaStream;\n\n  if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n  }\n  /*global MediaStream:true */\n\n\n  if (typeof MediaStream !== 'undefined') {\n    // override \"stop\" method for all browsers\n    if (typeof MediaStream.prototype.stop === 'undefined') {\n      MediaStream.prototype.stop = function () {\n        this.getTracks().forEach(function (track) {\n          track.stop();\n        });\n      };\n    }\n  }\n\n  var Storage = {};\n\n  if (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n  } else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n  }\n\n  function setSrcObject(stream, element) {\n    if ('srcObject' in element) {\n      element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n      element.mozSrcObject = stream;\n    } else {\n      element.srcObject = stream;\n    }\n  }\n\n  this.startDrawingFrames = function () {\n    drawVideosToCanvas();\n  };\n\n  function drawVideosToCanvas() {\n    if (isStopDrawingFrames) {\n      return;\n    }\n\n    var videosLength = videos.length;\n    var fullcanvas = false;\n    var remaining = [];\n    videos.forEach(function (video) {\n      if (!video.stream) {\n        video.stream = {};\n      }\n\n      if (video.stream.fullcanvas) {\n        fullcanvas = video;\n      } else {\n        remaining.push(video);\n      }\n    });\n\n    if (fullcanvas) {\n      canvas.width = fullcanvas.stream.width;\n      canvas.height = fullcanvas.stream.height;\n    } else if (remaining.length) {\n      canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n      var height = 1;\n\n      if (videosLength === 3 || videosLength === 4) {\n        height = 2;\n      }\n\n      if (videosLength === 5 || videosLength === 6) {\n        height = 3;\n      }\n\n      if (videosLength === 7 || videosLength === 8) {\n        height = 4;\n      }\n\n      if (videosLength === 9 || videosLength === 10) {\n        height = 5;\n      }\n\n      canvas.height = remaining[0].height * height;\n    } else {\n      canvas.width = self.width || 360;\n      canvas.height = self.height || 240;\n    }\n\n    if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n      drawImage(fullcanvas);\n    }\n\n    remaining.forEach(function (video, idx) {\n      drawImage(video, idx);\n    });\n    setTimeout(drawVideosToCanvas, self.frameInterval);\n  }\n\n  function drawImage(video, idx) {\n    if (isStopDrawingFrames) {\n      return;\n    }\n\n    var x = 0;\n    var y = 0;\n    var width = video.width;\n    var height = video.height;\n\n    if (idx === 1) {\n      x = video.width;\n    }\n\n    if (idx === 2) {\n      y = video.height;\n    }\n\n    if (idx === 3) {\n      x = video.width;\n      y = video.height;\n    }\n\n    if (idx === 4) {\n      y = video.height * 2;\n    }\n\n    if (idx === 5) {\n      x = video.width;\n      y = video.height * 2;\n    }\n\n    if (idx === 6) {\n      y = video.height * 3;\n    }\n\n    if (idx === 7) {\n      x = video.width;\n      y = video.height * 3;\n    }\n\n    if (typeof video.stream.left !== 'undefined') {\n      x = video.stream.left;\n    }\n\n    if (typeof video.stream.top !== 'undefined') {\n      y = video.stream.top;\n    }\n\n    if (typeof video.stream.width !== 'undefined') {\n      width = video.stream.width;\n    }\n\n    if (typeof video.stream.height !== 'undefined') {\n      height = video.stream.height;\n    }\n\n    context.drawImage(video, x, y, width, height);\n\n    if (typeof video.stream.onRender === 'function') {\n      video.stream.onRender(context, x, y, width, height, idx);\n    }\n  }\n\n  function getMixedStream() {\n    isStopDrawingFrames = false;\n    var mixedVideoStream = getMixedVideoStream();\n    var mixedAudioStream = getMixedAudioStream();\n\n    if (mixedAudioStream) {\n      mixedAudioStream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).forEach(function (track) {\n        mixedVideoStream.addTrack(track);\n      });\n    }\n\n    var fullcanvas;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (stream.fullcanvas) {\n        fullcanvas = true;\n      }\n    });\n    return mixedVideoStream;\n  }\n\n  function getMixedVideoStream() {\n    resetVideoStreams();\n    var capturedStream;\n\n    if ('captureStream' in canvas) {\n      capturedStream = canvas.captureStream();\n    } else if ('mozCaptureStream' in canvas) {\n      capturedStream = canvas.mozCaptureStream();\n    } else if (!self.disableLogs) {\n      console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n    }\n\n    var videoStream = new MediaStream();\n    capturedStream.getTracks().filter(function (t) {\n      return t.kind === 'video';\n    }).forEach(function (track) {\n      videoStream.addTrack(track);\n    });\n    canvas.stream = videoStream;\n    return videoStream;\n  }\n\n  function getMixedAudioStream() {\n    // via: @pehrsons\n    if (!Storage.AudioContextConstructor) {\n      Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n\n    self.audioContext = Storage.AudioContextConstructor;\n    self.audioSources = [];\n\n    if (self.useGainNode === true) {\n      self.gainNode = self.audioContext.createGain();\n      self.gainNode.connect(self.audioContext.destination);\n      self.gainNode.gain.value = 0; // don't hear self\n    }\n\n    var audioTracksLength = 0;\n    arrayOfMediaStreams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length) {\n        return;\n      }\n\n      audioTracksLength++;\n      var audioSource = self.audioContext.createMediaStreamSource(stream);\n\n      if (self.useGainNode === true) {\n        audioSource.connect(self.gainNode);\n      }\n\n      self.audioSources.push(audioSource);\n    });\n\n    if (!audioTracksLength) {\n      return;\n    }\n\n    self.audioDestination = self.audioContext.createMediaStreamDestination();\n    self.audioSources.forEach(function (audioSource) {\n      audioSource.connect(self.audioDestination);\n    });\n    return self.audioDestination.stream;\n  }\n\n  function getVideo(stream) {\n    var video = document.createElement('video');\n    setSrcObject(stream, video);\n    video.muted = true;\n    video.volume = 0;\n    video.width = stream.width || self.width || 360;\n    video.height = stream.height || self.height || 240;\n    video.play();\n    return video;\n  }\n\n  this.appendStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    arrayOfMediaStreams.concat(streams);\n    streams.forEach(function (stream) {\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        var video = getVideo(stream);\n        video.stream = stream;\n        videos.push(video);\n      }\n\n      if (stream.getTracks().filter(function (t) {\n        return t.kind === 'audio';\n      }).length && self.audioContext) {\n        var audioSource = self.audioContext.createMediaStreamSource(stream);\n        audioSource.connect(self.audioDestination);\n        self.audioSources.push(audioSource);\n      }\n    });\n  };\n\n  this.releaseStreams = function () {\n    videos = [];\n    isStopDrawingFrames = true;\n\n    if (self.gainNode) {\n      self.gainNode.disconnect();\n      self.gainNode = null;\n    }\n\n    if (self.audioSources.length) {\n      self.audioSources.forEach(function (source) {\n        source.disconnect();\n      });\n      self.audioSources = [];\n    }\n\n    if (self.audioDestination) {\n      self.audioDestination.disconnect();\n      self.audioDestination = null;\n    }\n\n    if (self.audioContext) {\n      self.audioContext.close();\n    }\n\n    self.audioContext = null;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (canvas.stream) {\n      canvas.stream.stop();\n      canvas.stream = null;\n    }\n  };\n\n  this.resetVideoStreams = function (streams) {\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    resetVideoStreams(streams);\n  };\n\n  function resetVideoStreams(streams) {\n    videos = [];\n    streams = streams || arrayOfMediaStreams; // via: @adrian-ber\n\n    streams.forEach(function (stream) {\n      if (!stream.getTracks().filter(function (t) {\n        return t.kind === 'video';\n      }).length) {\n        return;\n      }\n\n      var video = getVideo(stream);\n      video.stream = stream;\n      videos.push(video);\n    });\n  } // for debugging\n\n\n  this.name = 'MultiStreamsMixer';\n\n  this.toString = function () {\n    return this.name;\n  };\n\n  this.getMixedStream = getMixedStream;\n} // ______________________\n// MultiStreamRecorder.js\n\n/*\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n */\n\n/**\n * MultiStreamRecorder can record multiple videos in single container.\n * @summary Multi-videos recorder.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MultiStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm'\n * }\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\n */\n\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n  arrayOfMediaStreams = arrayOfMediaStreams || [];\n  var self = this;\n  var mixer;\n  var mediaRecorder;\n  options = options || {\n    mimeType: 'video/webm',\n    video: {\n      width: 360,\n      height: 240\n    }\n  };\n\n  if (!options.frameInterval) {\n    options.frameInterval = 10;\n  }\n\n  if (!options.video) {\n    options.video = {};\n  }\n\n  if (!options.video.width) {\n    options.video.width = 360;\n  }\n\n  if (!options.video.height) {\n    options.video.height = 240;\n  }\n  /**\n   * This method records all MediaStreams.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @example\n   * recorder.record();\n   */\n\n\n  this.record = function () {\n    // github/muaz-khan/MultiStreamsMixer\n    mixer = new MultiStreamsMixer(arrayOfMediaStreams);\n\n    if (getAllVideoTracks().length) {\n      mixer.frameInterval = options.frameInterval || 10;\n      mixer.width = options.video.width || 360;\n      mixer.height = options.video.height || 240;\n      mixer.startDrawingFrames();\n    }\n\n    if (options.previewStream && typeof options.previewStream === 'function') {\n      options.previewStream(mixer.getMixedStream());\n    } // record using MediaRecorder API\n\n\n    mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n    mediaRecorder.record();\n  };\n\n  function getAllVideoTracks() {\n    var tracks = [];\n    arrayOfMediaStreams.forEach(function (stream) {\n      getTracks(stream, 'video').forEach(function (track) {\n        tracks.push(track);\n      });\n    });\n    return tracks;\n  }\n  /**\n   * This method stops recording MediaStream.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n\n  this.stop = function (callback) {\n    if (!mediaRecorder) {\n      return;\n    }\n\n    mediaRecorder.stop(function (blob) {\n      self.blob = blob;\n      callback(blob);\n      self.clearRecordedData();\n    });\n  };\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @example\n   * recorder.pause();\n   */\n\n\n  this.pause = function () {\n    if (mediaRecorder) {\n      mediaRecorder.pause();\n    }\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    if (mediaRecorder) {\n      mediaRecorder.resume();\n    }\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    if (mediaRecorder) {\n      mediaRecorder.clearRecordedData();\n      mediaRecorder = null;\n    }\n\n    if (mixer) {\n      mixer.releaseStreams();\n      mixer = null;\n    }\n  };\n  /**\n   * Add extra media-streams to existing recordings.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\n   * @example\n   * recorder.addStreams([newAudioStream, newVideoStream]);\n   */\n\n\n  this.addStreams = function (streams) {\n    if (!streams) {\n      throw 'First parameter is required.';\n    }\n\n    if (!(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    arrayOfMediaStreams.concat(streams);\n\n    if (!mediaRecorder || !mixer) {\n      return;\n    }\n\n    mixer.appendStreams(streams);\n  };\n  /**\n   * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\n   * @method\n   * @memberof MultiStreamRecorder\n   * @param {MediaStreams} mediaStreams - Array of MediaStreams\n   * @example\n   * recorder.resetVideoStreams([newVideo1, newVideo2]);\n   */\n\n\n  this.resetVideoStreams = function (streams) {\n    if (!mixer) {\n      return;\n    }\n\n    if (streams && !(streams instanceof Array)) {\n      streams = [streams];\n    }\n\n    mixer.resetVideoStreams(streams);\n  }; // for debugging\n\n\n  this.name = 'MultiStreamRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n} // _____________________\n// RecordRTC.promises.js\n\n/**\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\n * @summary Promises for {@link RecordRTC}\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCPromisesHandler\n * @class\n * @example\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\n * recorder.startRecording()\n *         .then(successCB)\n *         .catch(errorCB);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\n * @requires {@link RecordRTC}\n */\n\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n  if (!this) {\n    throw 'Use \"new RecordRTCPromisesHandler()\"';\n  }\n\n  if (typeof mediaStream === 'undefined') {\n    throw 'First argument \"MediaStream\" is required.';\n  }\n\n  var self = this;\n  /**\n   * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * var internal = recorder.recordRTC.getInternalRecorder();\n   * alert(internal instanceof MediaStreamRecorder);\n   */\n\n  self.recordRTC = new RecordRTC(mediaStream, options);\n  /**\n   * This method records MediaStream.\n   * @method\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * recorder.startRecording()\n   *         .then(successCB)\n   *         .catch(errorCB);\n   */\n\n  this.startRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.startRecording();\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * This method stops the recording.\n   * @method\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * recorder.stopRecording().then(function() {\n   *     var blob = recorder.getBlob();\n   * }).catch(errorCB);\n   */\n\n\n  this.stopRecording = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.stopRecording(function (url) {\n          self.blob = self.recordRTC.getBlob();\n\n          if (!self.blob || !self.blob.size) {\n            reject('Empty blob.', self.blob);\n            return;\n          }\n\n          resolve(url);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * This method returns data-url for the recorded blob.\n   * @method\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * recorder.stopRecording().then(function() {\n   *     recorder.getDataURL().then(function(dataURL) {\n   *         window.open(dataURL);\n   *     }).catch(errorCB);;\n   * }).catch(errorCB);\n   */\n\n\n  this.getDataURL = function (callback) {\n    return new Promise(function (resolve, reject) {\n      try {\n        self.recordRTC.getDataURL(function (dataURL) {\n          resolve(dataURL);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * This method returns the recorded blob.\n   * @method\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * recorder.stopRecording().then(function() {\n   *     recorder.getBlob().then(function(blob) {})\n   * }).catch(errorCB);\n   */\n\n\n  this.getBlob = function () {\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(self.recordRTC.getBlob());\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * @property {Blob} blob - Recorded data as \"Blob\" object.\n   * @memberof RecordRTCPromisesHandler\n   * @example\n   * recorder.stopRecording().then(function() {\n   *     var blob = recorder.getBlob();\n   * }).catch(errorCB);\n   */\n\n\n  this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n} // ______________________\n// WebAssemblyRecorder.js\n\n/**\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WebAssemblyRecorder\n * @class\n * @example\n * var recorder = new WebAssemblyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024}\n */\n\n\nfunction WebAssemblyRecorder(stream, config) {\n  // based on: github.com/GoogleChromeLabs/webm-wasm\n  if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n    // because it fixes readable/writable streams issues\n    console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n  }\n\n  config = config || {};\n  config.width = config.width || 640;\n  config.height = config.height || 480;\n  config.frameRate = config.frameRate || 30;\n  config.bitrate = config.bitrate || 1200;\n\n  function createBufferURL(buffer, type) {\n    return URL.createObjectURL(new Blob([buffer], {\n      type: type || ''\n    }));\n  }\n\n  function cameraStream() {\n    return new ReadableStream({\n      start: function (controller) {\n        var cvs = document.createElement('canvas');\n        var video = document.createElement('video');\n        video.srcObject = stream;\n\n        video.onplaying = function () {\n          cvs.width = config.width;\n          cvs.height = config.height;\n          var ctx = cvs.getContext('2d');\n          var frameTimeout = 1000 / config.frameRate;\n          setTimeout(function () {\n            function f() {\n              ctx.drawImage(video, 0, 0);\n              controller.enqueue(ctx.getImageData(0, 0, config.width, config.height));\n              setTimeout(f, frameTimeout);\n            }\n\n            return f;\n          }(), frameTimeout);\n        };\n\n        video.play();\n      }\n    });\n  }\n\n  var worker;\n\n  function startRecording(stream, buffer) {\n    if (!config.workerPath && !buffer) {\n      // is it safe to use @latest ?\n      fetch('https://unpkg.com/webm-wasm@latest/dist/webm-worker.js').then(function (r) {\n        r.arrayBuffer().then(function (buffer) {\n          startRecording(stream, buffer);\n        });\n      });\n      return;\n    }\n\n    if (!config.workerPath && buffer instanceof ArrayBuffer) {\n      var blob = new Blob([buffer], {\n        type: 'text/javascript'\n      });\n      config.workerPath = URL.createObjectURL(blob);\n    }\n\n    if (!config.workerPath) {\n      console.error('workerPath parameter is missing.');\n    }\n\n    worker = new Worker(config.workerPath);\n    worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n    worker.addEventListener('message', function (event) {\n      if (event.data === 'READY') {\n        worker.postMessage({\n          width: config.width,\n          height: config.height,\n          bitrate: config.bitrate || 1200,\n          timebaseDen: config.frameRate || 30,\n          realtime: true\n        });\n        cameraStream().pipeTo(new WritableStream({\n          write: function (image) {\n            if (!worker) {\n              return;\n            }\n\n            worker.postMessage(image.data.buffer, [image.data.buffer]);\n          }\n        }));\n      } else if (!!event.data) {\n        if (!isPaused) {\n          arrayOfBuffers.push(event.data);\n        }\n      }\n    });\n  }\n  /**\n   * This method records video.\n   * @method\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.record();\n   */\n\n\n  this.record = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null;\n    startRecording(stream);\n\n    if (typeof config.initCallback === 'function') {\n      config.initCallback();\n    }\n  };\n\n  var isPaused;\n  /**\n   * This method pauses the recording process.\n   * @method\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.pause();\n   */\n\n  this.pause = function () {\n    isPaused = true;\n  };\n  /**\n   * This method resumes the recording process.\n   * @method\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.resume();\n   */\n\n\n  this.resume = function () {\n    isPaused = false;\n  };\n\n  function terminate() {\n    if (!worker) {\n      return;\n    }\n\n    worker.postMessage(null);\n    worker.terminate();\n    worker = null;\n  }\n\n  var arrayOfBuffers = [];\n  /**\n   * This method stops recording video.\n   * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n   * @method\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.stop(function(blob) {\n   *     video.src = URL.createObjectURL(blob);\n   * });\n   */\n\n  this.stop = function (callback) {\n    terminate();\n    this.blob = new Blob(arrayOfBuffers, {\n      type: 'video/webm'\n    });\n    callback(this.blob);\n  }; // for debugging\n\n\n  this.name = 'WebAssemblyRecorder';\n\n  this.toString = function () {\n    return this.name;\n  };\n  /**\n   * This method resets currently recorded data.\n   * @method\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.clearRecordedData();\n   */\n\n\n  this.clearRecordedData = function () {\n    arrayOfBuffers = [];\n    isPaused = false;\n    this.blob = null; // todo: if recording-ON then STOP it first\n  };\n  /**\n   * @property {Blob} blob - The recorded blob object.\n   * @memberof WebAssemblyRecorder\n   * @example\n   * recorder.stop(function(){\n   *     var blob = recorder.blob;\n   * });\n   */\n\n\n  this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n  RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n}","map":{"version":3,"sources":["imports/ui/pages/messenger/RecordRTC.js"],"names":["RecordRTC","mediaStream","config","type","RecordRTCConfiguration","self","startRecording","config2","disableLogs","console","log","mediaRecorder","clearRecordedData","record","setState","recordingDuration","handleRecordingDuration","initRecorder","initCallback","Recorder","GetRecorderType","constructor","name","stopRecording","callback","warningLog","state","resumeRecording","setTimeout","warn","stop","_callback","__blob","call","Object","keys","forEach","key","blob","bytesToSize","size","url","URL","createObjectURL","e","autoWriteToDisk","getDataURL","dataURL","parameter","DiskStorage","Store","pauseRecording","pause","resume","readFile","_blob","postMessage","FileReaderSync","readAsDataURL","_mediaRecorder","Worker","navigator","mozGetUserMedia","webWorker","processInWebWorker","onmessage","event","data","reader","FileReader","onload","target","result","_function","Blob","toString","worker","revokeObjectURL","counter","onRecordingStopped","onStateChanged","WARNING","returnObject","setRecordingDuration","getBlob","toURL","getInternalRecorder","save","fileName","invokeSaveAsDialog","getFromDisk","setAdvertisementArray","arrayOfWebPImages","advertisement","length","i","push","duration","image","bufferSize","sampleRate","buffer","reset","getState","destroy","disableLogsCache","Storage","AudioContextConstructor","close","version","prop","module","exports","define","amd","Fetch","_type","replace","writeToDisk","options","audio","video","gif","audioDataURL","videoDataURL","gifDataURL","audioBlob","videoBlob","gifBlob","recorderType","WhammyRecorder","CanvasRecorder","WebAssemblyRecorder","GifRecorder","StereoAudioRecorder","MediaStreamRecorder","getTracks","MediaRecorder","prototype","mimeType","split","bitsPerSecond","recorder","isChrome","isEdge","isOpera","ReadableStream","isMediaRecorderCompatible","isTypeSupported","Array","MultiStreamRecorder","isSafari","MRecordRTC","addStream","_mediaStream","mediaType","audioRecorder","numberOfAudioChannels","timeSlice","onTimeStamp","newStream","videoTrack","isFirefox","MediaStream","addTrack","videoRecorder","canvas","frameInterval","workerPath","webAssemblyPath","frameRate","bitrate","isSingleRecorder","gifRecorder","quality","blobURL","output","_audioDataURL","_videoDataURL","callback00","webkitURL","args","browserFakeUserAgent","that","window","global","userAgent","getUserMedia","error","arguments","document","createElement","captureStream","mozCaptureStream","obj","getContext","play","drawImage","toDataURL","HTMLVideoElement","location","protocol","href","hash","screen","width","height","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","lastTime","element","currTime","Date","getTime","timeToCall","Math","max","id","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","AudioContext","webkitAudioContext","mozAudioContext","webkitGetUserMedia","indexOf","msSaveBlob","msSaveOrOpenBlob","opera","toLowerCase","test","isElectron","webkitMediaStream","track","bytes","k","sizes","parseInt","floor","pow","toPrecision","file","fileExtension","splitted","fileFullName","round","random","hyperlink","download","style","body","documentElement","appendChild","click","dispatchEvent","MouseEvent","view","bubbles","cancelable","process","versions","electron","stream","kind","filter","t","setSrcObject","srcObject","mozSrcObject","getSeekableBlob","inputBlob","EBML","Error","Reader","decoder","Decoder","tools","fileReader","ebmlElms","decode","read","refinedMetadataBuf","makeMetadataSeekable","metadatas","cues","slice","metadataSize","newBlob","readAsArrayBuffer","nVer","appVersion","nAgt","fullVersion","parseFloat","majorVersion","nameOffset","verOffset","ix","substring","isNaN","arrayOfBlobs","getArrayOfBlobs","timestamps","allStates","recorderHints","canRecordMimeType","ondataavailable","updateTimeStamp","getNativeBlob","getMimeType","recordingCallback","onstart","onpause","onresume","onstop","onerror","looper","manuallyStopped","timeslice","start","secondObject","clearRecordedDataCB","isMediaStreamActive","active","ended","getAllStates","checkForInactiveTracks","leftchannel","rightchannel","recording","recordingLength","jsAudioNode","desiredSampRate","leftChannel","resetVariables","isAudioProcessStarted","isPaused","mergeLeftRightBuffers","mergeAudioBuffers","cb","leftBuffers","rightBuffers","internalInterleavedLength","mergeBuffers","interpolateArray","newSampleRate","oldSampleRate","fitCount","newData","springFactor","Number","tmp","before","toFixed","after","ceil","atPoint","linearInterpolate","channelBuffer","rLength","Float64Array","offset","lng","set","interleave","rightChannel","inputIndex","index","writeUTFBytes","string","setUint8","charCodeAt","interleaved","interleavedLength","resultingBufferLength","ArrayBuffer","DataView","setUint32","setUint16","volume","setInt16","noWorker","workerURL","terminate","byteLength","context","audioInput","createMediaStreamSource","legalBufferValues","JSON","stringify","createJavaScriptNode","createScriptProcessor","connect","intervalsBasedBuffers","left","right","onaudioprocess","disconnect","onAudioProcessDataAvailable","onAudioProcessStarted","inputBuffer","getChannelData","chLeft","Float32Array","chRight","createMediaStreamDestination","destination","htmlElement","html2canvas","isCanvasSupportsStreamCapturing","item","_isChrome","webkitRTCPeerConnection","chrome","chromeVersion","matchArray","match","useWhammyRecorder","globalCanvas","mediaStreamRecorder","HTMLCanvasElement","CanvasRenderingContext2D","isRecording","canvasMediaStream","webkitCaptureStream","mdStream","whammy","frames","drawCanvasFrame","getWebPImages","nodeName","framesLength","frame","idx","framesRemaining","onEncodingCallback","webp","compile","isPausedRecording","cloneCanvas","newCanvas","grabMouse","showMousePointer","onrendered","Whammy","Video","cloneNode","onloadedmetadata","muted","drawFrames","paused","isStopDrawing","asyncLoop","o","loop","functionToLoop","dropBlackFrames","_frames","_framesToCheck","_pixTolerance","_frameTolerance","localCanvas","context2d","resultFrames","checkUntilNotBlack","endCheckFrame","sampleColor","r","g","b","maxColorDifference","sqrt","pixTolerance","frameTolerance","doNotCheckNext","f","matchPixCount","endPixCheck","maxPixCount","finishImage","Image","imageData","getImageData","pix","currentColor","colorDifference","src","concat","_this","WhammyVideo","add","whammyInWebWorker","ArrayToWebM","info","checkFrames","clusterMaxDuration","doubleToString","frameNumber","clusterTimecode","clusterFrames","clusterDuration","clusterCounter","cluster","getClusterData","generateEBML","map","block","makeSimpleBlock","discardable","invisible","keyframe","lacing","trackNum","timecode","numToBuffer","num","parts","Uint8Array","reverse","strToBuffer","str","bitsToBuffer","bits","pad","join","substr","json","ebml","len","zeroes","sizeToString","padded","toBinStrOld","String","fromCharCode","flags","out","parseWebP","riff","VP8","RIFF","WEBP","frameStart","c","getStrLength","unpadded","parseRIFF","chunks","webm","atob","init","indexedDB","open","dbVersion","dbName","db","request","createObjectStore","dataBase","dataStoreName","putInDB","transaction","objectStore","put","getFromStore","portionName","get","onsuccess","onError","setVersion","onupgradeneeded","GIFEncoder","script","isHTMLObject","isLoadedMetaData","offsetWidth","offsetHeight","gifEncoder","setRepeat","setDelay","setQuality","onGifRecordingStarted","startTime","now","drawVideoFrame","time","clearedRecordedData","lastAnimationFrame","lastFrameTime","undefined","onGifPreview","addFrame","endTime","bin","autoplay","MultiStreamsMixer","arrayOfMediaStreams","videos","isStopDrawingFrames","useGainNode","startDrawingFrames","drawVideosToCanvas","videosLength","fullcanvas","remaining","x","y","top","onRender","getMixedStream","mixedVideoStream","getMixedVideoStream","mixedAudioStream","getMixedAudioStream","resetVideoStreams","capturedStream","videoStream","audioContext","audioSources","gainNode","createGain","gain","value","audioTracksLength","audioSource","audioDestination","getVideo","appendStreams","streams","releaseStreams","source","clearRect","mixer","getAllVideoTracks","previewStream","tracks","addStreams","RecordRTCPromisesHandler","recordRTC","Promise","resolve","reject","WritableStream","createBufferURL","cameraStream","controller","cvs","onplaying","ctx","frameTimeout","enqueue","fetch","then","arrayBuffer","addEventListener","timebaseDen","realtime","pipeTo","write","arrayOfBuffers"],"mappings":"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","sourcesContent":["'use strict';\n\n// Last time updated: 2019-02-06 11:32:40 AM UTC\n\n// ________________\n// RecordRTC v5.5.4\n\n// Open-Sourced: https://github.com/muaz-khan/RecordRTC\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\n// ____________\n// RecordRTC.js\n\n/**\n * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \n * @summary Record audio, video or screen inside the browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTC\n * @class\n * @example\n * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\n *     type: 'video', // audio or video or gif or canvas\n *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\n * });\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\n */\n\nfunction RecordRTC(mediaStream, config) {\n    if (!mediaStream) {\n        throw 'First parameter is required.';\n    }\n\n    config = config || {\n        type: 'video'\n    };\n\n    config = new RecordRTCConfiguration(mediaStream, config);\n\n    // a reference to user's recordRTC object\n    var self = this;\n\n    function startRecording(config2) {\n        if (!!config2) {\n            // allow users to set options using startRecording method\n            // config2 is similar to main \"config\" object (second parameter over RecordRTC constructor)\n            config = new RecordRTCConfiguration(mediaStream, config2);\n        }\n\n        if (!config.disableLogs) {\n            console.log('started recording ' + config.type + ' stream.');\n        }\n\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder.record();\n\n            setState('recording');\n\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n            return self;\n        }\n\n        initRecorder(function() {\n            if (self.recordingDuration) {\n                handleRecordingDuration();\n            }\n        });\n\n        return self;\n    }\n\n    function initRecorder(initCallback) {\n        if (initCallback) {\n            config.initCallback = function() {\n                initCallback();\n                initCallback = config.initCallback = null; // recorder.initRecorder should be call-backed once.\n            };\n        }\n\n        var Recorder = new GetRecorderType(mediaStream, config);\n\n        mediaRecorder = new Recorder(mediaStream, config);\n        mediaRecorder.record();\n\n        setState('recording');\n\n        if (!config.disableLogs) {\n            console.log('Initialized recorderType:', mediaRecorder.constructor.name, 'for output-type:', config.type);\n        }\n    }\n\n    function stopRecording(callback) {\n        callback = callback || function() {};\n\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state === 'paused') {\n            self.resumeRecording();\n\n            setTimeout(function() {\n                stopRecording(callback);\n            }, 1);\n            return;\n        }\n\n        if (self.state !== 'recording' && !config.disableLogs) {\n            console.warn('Recording state should be: \"recording\", however current state is: ', self.state);\n        }\n\n        if (!config.disableLogs) {\n            console.log('Stopped recording ' + config.type + ' stream.');\n        }\n\n        if (config.type !== 'gif') {\n            mediaRecorder.stop(_callback);\n        } else {\n            mediaRecorder.stop();\n            _callback();\n        }\n\n        setState('stopped');\n\n        function _callback(__blob) {\n            if (!mediaRecorder) {\n                if (typeof callback.call === 'function') {\n                    callback.call(self, '');\n                } else {\n                    callback('');\n                }\n                return;\n            }\n\n            Object.keys(mediaRecorder).forEach(function(key) {\n                if (typeof mediaRecorder[key] === 'function') {\n                    return;\n                }\n\n                self[key] = mediaRecorder[key];\n            });\n\n            var blob = mediaRecorder.blob;\n\n            if (!blob) {\n                if (__blob) {\n                    mediaRecorder.blob = blob = __blob;\n                } else {\n                    throw 'Recording failed.';\n                }\n            }\n\n            if (blob && !config.disableLogs) {\n                console.log(blob.type, '->', bytesToSize(blob.size));\n            }\n\n            if (callback) {\n                var url;\n\n                try {\n                    url = URL.createObjectURL(blob);\n                } catch (e) {}\n\n                if (typeof callback.call === 'function') {\n                    callback.call(self, url);\n                } else {\n                    callback(url);\n                }\n            }\n\n            if (!config.autoWriteToDisk) {\n                return;\n            }\n\n            getDataURL(function(dataURL) {\n                var parameter = {};\n                parameter[config.type + 'Blob'] = dataURL;\n                DiskStorage.Store(parameter);\n            });\n        }\n    }\n\n    function pauseRecording() {\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state !== 'recording') {\n            if (!config.disableLogs) {\n                console.warn('Unable to pause the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('paused');\n\n        mediaRecorder.pause();\n\n        if (!config.disableLogs) {\n            console.log('Paused recording.');\n        }\n    }\n\n    function resumeRecording() {\n        if (!mediaRecorder) {\n            warningLog();\n            return;\n        }\n\n        if (self.state !== 'paused') {\n            if (!config.disableLogs) {\n                console.warn('Unable to resume the recording. Recording state: ', self.state);\n            }\n            return;\n        }\n\n        setState('recording');\n\n        // not all libs have this method yet\n        mediaRecorder.resume();\n\n        if (!config.disableLogs) {\n            console.log('Resumed recording.');\n        }\n    }\n\n    function readFile(_blob) {\n        postMessage(new FileReaderSync().readAsDataURL(_blob));\n    }\n\n    function getDataURL(callback, _mediaRecorder) {\n        if (!callback) {\n            throw 'Pass a callback function over getDataURL.';\n        }\n\n        var blob = _mediaRecorder ? _mediaRecorder.blob : (mediaRecorder || {}).blob;\n\n        if (!blob) {\n            if (!config.disableLogs) {\n                console.warn('Blob encoder did not finish its job yet.');\n            }\n\n            setTimeout(function() {\n                getDataURL(callback, _mediaRecorder);\n            }, 1000);\n            return;\n        }\n\n        if (typeof Worker !== 'undefined' && !navigator.mozGetUserMedia) {\n            var webWorker = processInWebWorker(readFile);\n\n            webWorker.onmessage = function(event) {\n                callback(event.data);\n            };\n\n            webWorker.postMessage(blob);\n        } else {\n            var reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload = function(event) {\n                callback(event.target.result);\n            };\n        }\n\n        function processInWebWorker(_function) {\n            try {\n                var blob = URL.createObjectURL(new Blob([_function.toString(),\n                    'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n                ], {\n                    type: 'application/javascript'\n                }));\n\n                var worker = new Worker(blob);\n                URL.revokeObjectURL(blob);\n                return worker;\n            } catch (e) {}\n        }\n    }\n\n    function handleRecordingDuration(counter) {\n        counter = counter || 0;\n\n        if (self.state === 'paused') {\n            setTimeout(function() {\n                handleRecordingDuration(counter);\n            }, 1000);\n            return;\n        }\n\n        if (self.state === 'stopped') {\n            return;\n        }\n\n        if (counter >= self.recordingDuration) {\n            stopRecording(self.onRecordingStopped);\n            return;\n        }\n\n        counter += 1000; // 1-second\n\n        setTimeout(function() {\n            handleRecordingDuration(counter);\n        }, 1000);\n    }\n\n    function setState(state) {\n        if (!self) {\n            return;\n        }\n\n        self.state = state;\n\n        if (typeof self.onStateChanged.call === 'function') {\n            self.onStateChanged.call(self, state);\n        } else {\n            self.onStateChanged(state);\n        }\n    }\n\n    var WARNING = 'It seems that recorder is destroyed or \"startRecording\" is not invoked for ' + config.type + ' recorder.';\n\n    function warningLog() {\n        if (config.disableLogs === true) {\n            return;\n        }\n\n        console.warn(WARNING);\n    }\n\n    var mediaRecorder;\n\n    var returnObject = {\n        /**\n         * This method starts the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var recorder = RecordRTC(mediaStream, {\n         *     type: 'video'\n         * });\n         * recorder.startRecording();\n         */\n        startRecording: startRecording,\n\n        /**\n         * This method stops the recording. It is strongly recommended to get \"blob\" or \"URI\" inside the callback to make sure all recorders finished their job.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     // use either \"this\" or \"recorder\" object; both are identical\n         *     video.src = this.toURL();\n         *     var blob = this.getBlob();\n         * });\n         */\n        stopRecording: stopRecording,\n\n        /**\n         * This method pauses the recording. You can resume recording using \"resumeRecording\" method.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Firefox is unable to pause the recording. Fix it.\n         * @example\n         * recorder.pauseRecording();  // pause the recording\n         * recorder.resumeRecording(); // resume again\n         */\n        pauseRecording: pauseRecording,\n\n        /**\n         * This method resumes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.pauseRecording();  // first of all, pause the recording\n         * recorder.resumeRecording(); // now resume it\n         */\n        resumeRecording: resumeRecording,\n\n        /**\n         * This method initializes the recording.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * recorder.initRecorder();\n         */\n        initRecorder: initRecorder,\n\n        /**\n         * Ask RecordRTC to auto-stop the recording after 5 minutes.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var fiveMinutes = 5 * 1000 * 60;\n         * recorder.setRecordingDuration(fiveMinutes, function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         * \n         * // or otherwise\n         * recorder.setRecordingDuration(fiveMinutes).onRecordingStopped(function() {\n         *    var blob = this.getBlob();\n         *    video.src = this.toURL();\n         * });\n         */\n        setRecordingDuration: function(recordingDuration, callback) {\n            if (typeof recordingDuration === 'undefined') {\n                throw 'recordingDuration is required.';\n            }\n\n            if (typeof recordingDuration !== 'number') {\n                throw 'recordingDuration must be a number.';\n            }\n\n            self.recordingDuration = recordingDuration;\n            self.onRecordingStopped = callback || function() {};\n\n            return {\n                onRecordingStopped: function(callback) {\n                    self.onRecordingStopped = callback;\n                }\n            };\n        },\n\n        /**\n         * This method can be used to clear/reset all the recorded data.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo Figure out the difference between \"reset\" and \"clearRecordedData\" methods.\n         * @example\n         * recorder.clearRecordedData();\n         */\n        clearRecordedData: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            mediaRecorder.clearRecordedData();\n\n            if (!config.disableLogs) {\n                console.log('Cleared old recorded data.');\n            }\n        },\n\n        /**\n         * Get the recorded blob. Use this method inside the \"stopRecording\" callback.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.getBlob();\n         *\n         *     var file = new File([blob], 'filename.webm', {\n         *         type: 'video/webm'\n         *     });\n         *\n         *     var formData = new FormData();\n         *     formData.append('file', file); // upload \"File\" object rather than a \"Blob\"\n         *     uploadToServer(formData);\n         * });\n         * @returns {Blob} Returns recorded data as \"Blob\" object.\n         */\n        getBlob: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            return mediaRecorder.blob;\n        },\n\n        /**\n         * Get data-URI instead of Blob.\n         * @param {function} callback - Callback to get the Data-URI.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     recorder.getDataURL(function(dataURI) {\n         *         video.src = dataURI;\n         *     });\n         * });\n         */\n        getDataURL: getDataURL,\n\n        /**\n         * Get virtual/temporary URL. Usage of this URL is limited to current tab.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     video.src = this.toURL();\n         * });\n         * @returns {String} Returns a virtual/temporary URL for the recorded \"Blob\".\n         */\n        toURL: function() {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            return URL.createObjectURL(mediaRecorder.blob);\n        },\n\n        /**\n         * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * var internal = recorder.getInternalRecorder();\n         * if(internal instanceof MultiStreamRecorder) {\n         *     internal.addStreams([newAudioStream]);\n         *     internal.resetVideoStreams([screenStream]);\n         * }\n         * @returns {Object} Returns internal recording object.\n         */\n        getInternalRecorder: function() {\n            return mediaRecorder;\n        },\n\n        /**\n         * Invoke save-as dialog to save the recorded blob into your disk.\n         * @param {string} fileName - Set your own file name.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.stopRecording(function() {\n         *     this.save('file-name');\n         *\n         *     // or manually:\n         *     invokeSaveAsDialog(this.getBlob(), 'filename.webm');\n         * });\n         */\n        save: function(fileName) {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            invokeSaveAsDialog(mediaRecorder.blob, fileName);\n        },\n\n        /**\n         * This method gets a blob from indexed-DB storage.\n         * @param {function} callback - Callback to get the recorded blob.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.getFromDisk(function(dataURL) {\n         *     video.src = dataURL;\n         * });\n         */\n        getFromDisk: function(callback) {\n            if (!mediaRecorder) {\n                warningLog();\n                return;\n            }\n\n            RecordRTC.getFromDisk(config.type, callback);\n        },\n\n        /**\n         * This method appends an array of webp images to the recorded video-blob. It takes an \"array\" object.\n         * @type {Array.<Array>}\n         * @param {Array} arrayOfWebPImages - Array of webp images.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @todo This method should be deprecated.\n         * @example\n         * var arrayOfWebPImages = [];\n         * arrayOfWebPImages.push({\n         *     duration: index,\n         *     image: 'data:image/webp;base64,...'\n         * });\n         * recorder.setAdvertisementArray(arrayOfWebPImages);\n         */\n        setAdvertisementArray: function(arrayOfWebPImages) {\n            config.advertisement = [];\n\n            var length = arrayOfWebPImages.length;\n            for (var i = 0; i < length; i++) {\n                config.advertisement.push({\n                    duration: i,\n                    image: arrayOfWebPImages[i]\n                });\n            }\n        },\n\n        /**\n         * It is equivalent to <code class=\"str\">\"recorder.getBlob()\"</code> method. Usage of \"getBlob\" is recommended, though.\n         * @property {Blob} blob - Recorded Blob can be accessed using this property.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var blob = this.blob;\n         *\n         *     // below one is recommended\n         *     var blob = this.getBlob();\n         * });\n         */\n        blob: null,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} bufferSize - Buffer-size used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used this buffer-size: ' + this.bufferSize);\n         * });\n         */\n        bufferSize: 0,\n\n        /**\n         * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n         * @property {number} sampleRate - Sample-rates used to encode the WAV container\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     alert('Recorder used these sample-rates: ' + this.sampleRate);\n         * });\n         */\n        sampleRate: 0,\n\n        /**\n         * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\n         * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n         * @memberof RecordRTC\n         * @instance\n         * @readonly\n         * @example\n         * recorder.stopRecording(function() {\n         *     var arrayBuffer = this.buffer;\n         *     alert(arrayBuffer.byteLength);\n         * });\n         */\n        buffer: null,\n\n        /**\n         * This method resets the recorder. So that you can reuse single recorder instance many times.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.reset();\n         * recorder.startRecording();\n         */\n        reset: function() {\n            if (mediaRecorder && typeof mediaRecorder.clearRecordedData === 'function') {\n                mediaRecorder.clearRecordedData();\n            }\n            mediaRecorder = null;\n            setState('inactive');\n            self.blob = null;\n        },\n\n        /**\n         * This method is called whenever recorder's state changes. Use this as an \"event\".\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @method\n         * @memberof RecordRTC\n         * @instance\n         * @example\n         * recorder.onStateChanged = function(state) {\n         *     console.log('Recorder state: ', state);\n         * };\n         */\n        onStateChanged: function(state) {\n            if (!config.disableLogs) {\n                console.log('Recorder state changed:', state);\n            }\n        },\n\n        /**\n         * A recorder can have inactive, recording, paused or stopped states.\n         * @property {String} state - A recorder's state can be: recording, paused, stopped or inactive.\n         * @memberof RecordRTC\n         * @static\n         * @readonly\n         * @example\n         * // this looper function will keep you updated about the recorder's states.\n         * (function looper() {\n         *     document.querySelector('h1').innerHTML = 'Recorder\\'s state is: ' + recorder.state;\n         *     if(recorder.state === 'stopped') return; // ignore+stop\n         *     setTimeout(looper, 1000); // update after every 3-seconds\n         * })();\n         * recorder.startRecording();\n         */\n        state: 'inactive',\n\n        /**\n         * Get recorder's readonly state.\n         * @method\n         * @memberof RecordRTC\n         * @example\n         * var state = recorder.getState();\n         * @returns {String} Returns recording state.\n         */\n        getState: function() {\n            return self.state;\n        },\n\n        /**\n         * Destroy RecordRTC instance. Clear all recorders and objects.\n         * @method\n         * @memberof RecordRTC\n         * @example\n         * recorder.destroy();\n         */\n        destroy: function() {\n            var disableLogsCache = config.disableLogs;\n\n            config = {\n                disableLogs: true\n            };\n            self.reset();\n            setState('destroyed');\n            returnObject = self = null;\n\n            if (Storage.AudioContextConstructor) {\n                Storage.AudioContextConstructor.close();\n                Storage.AudioContextConstructor = null;\n            }\n\n            config.disableLogs = disableLogsCache;\n\n            if (!config.disableLogs) {\n                console.warn('RecordRTC is destroyed.');\n            }\n        },\n\n        /**\n         * RecordRTC version number\n         * @property {String} version - Release version number.\n         * @memberof RecordRTC\n         * @static\n         * @readonly\n         * @example\n         * alert(recorder.version);\n         */\n        version: '5.5.4'\n    };\n\n    if (!this) {\n        self = returnObject;\n        return returnObject;\n    }\n\n    // if someone wants to use RecordRTC with the \"new\" keyword.\n    for (var prop in returnObject) {\n        this[prop] = returnObject[prop];\n    }\n\n    self = this;\n\n    return returnObject;\n}\n\nRecordRTC.version = '5.5.4';\n\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n    module.exports = RecordRTC;\n}\n\nif (typeof define === 'function' && define.amd) {\n    define('RecordRTC', [], function() {\n        return RecordRTC;\n    });\n}\n\nRecordRTC.getFromDisk = function(type, callback) {\n    if (!callback) {\n        throw 'callback is mandatory.';\n    }\n\n    console.log('Getting recorded ' + (type === 'all' ? 'blobs' : type + ' blob ') + ' from disk!');\n    DiskStorage.Fetch(function(dataURL, _type) {\n        if (type !== 'all' && _type === type + 'Blob' && callback) {\n            callback(dataURL);\n        }\n\n        if (type === 'all' && callback) {\n            callback(dataURL, _type.replace('Blob', ''));\n        }\n    });\n};\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof RecordRTC\n * @example\n * RecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nRecordRTC.writeToDisk = function(options) {\n    console.log('Writing recorded blob(s) to disk!');\n    options = options || {};\n    if (options.audio && options.video && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                options.gif.getDataURL(function(gifDataURL) {\n                    DiskStorage.Store({\n                        audioBlob: audioDataURL,\n                        videoBlob: videoDataURL,\n                        gifBlob: gifDataURL\n                    });\n                });\n            });\n        });\n    } else if (options.audio && options.video) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.video.getDataURL(function(videoDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    videoBlob: videoDataURL\n                });\n            });\n        });\n    } else if (options.audio && options.gif) {\n        options.audio.getDataURL(function(audioDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    audioBlob: audioDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.video && options.gif) {\n        options.video.getDataURL(function(videoDataURL) {\n            options.gif.getDataURL(function(gifDataURL) {\n                DiskStorage.Store({\n                    videoBlob: videoDataURL,\n                    gifBlob: gifDataURL\n                });\n            });\n        });\n    } else if (options.audio) {\n        options.audio.getDataURL(function(audioDataURL) {\n            DiskStorage.Store({\n                audioBlob: audioDataURL\n            });\n        });\n    } else if (options.video) {\n        options.video.getDataURL(function(videoDataURL) {\n            DiskStorage.Store({\n                videoBlob: videoDataURL\n            });\n        });\n    } else if (options.gif) {\n        options.gif.getDataURL(function(gifDataURL) {\n            DiskStorage.Store({\n                gifBlob: gifDataURL\n            });\n        });\n    }\n};\n\n// __________________________\n// RecordRTC-Configuration.js\n\n/**\n * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.\n * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid \"config\" object.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCConfiguration\n * @class\n * @example\n * var options = RecordRTCConfiguration(mediaStream, options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n */\n\nfunction RecordRTCConfiguration(mediaStream, config) {\n    if (!config.recorderType && !config.type) {\n        if (!!config.audio && !!config.video) {\n            config.type = 'video';\n        } else if (!!config.audio && !config.video) {\n            config.type = 'audio';\n        }\n    }\n\n    if (config.recorderType && !config.type) {\n        if (config.recorderType === WhammyRecorder || config.recorderType === CanvasRecorder || (typeof WebAssemblyRecorder !== 'undefined' && config.recorderType === WebAssemblyRecorder)) {\n            config.type = 'video';\n        } else if (config.recorderType === GifRecorder) {\n            config.type = 'gif';\n        } else if (config.recorderType === StereoAudioRecorder) {\n            config.type = 'audio';\n        } else if (config.recorderType === MediaStreamRecorder) {\n            if (getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n            } else if (!getTracks(mediaStream, 'audio').length && getTracks(mediaStream, 'video').length) {\n                config.type = 'video';\n            } else if (getTracks(mediaStream, 'audio').length && !getTracks(mediaStream, 'video').length) {\n                config.type = 'audio';\n            } else {\n                // config.type = 'UnKnown';\n            }\n        }\n    }\n\n    if (typeof MediaStreamRecorder !== 'undefined' && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (!config.mimeType) {\n            config.mimeType = 'video/webm';\n        }\n\n        if (!config.type) {\n            config.type = config.mimeType.split('/')[0];\n        }\n\n        if (!config.bitsPerSecond) {\n            // config.bitsPerSecond = 128000;\n        }\n    }\n\n    // consider default type=audio\n    if (!config.type) {\n        if (config.mimeType) {\n            config.type = config.mimeType.split('/')[0];\n        }\n        if (!config.type) {\n            config.type = 'audio';\n        }\n    }\n\n    return config;\n}\n\n// __________________\n// GetRecorderType.js\n\n/**\n * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.\n * @summary It returns best recorder-type available for your browser.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GetRecorderType\n * @class\n * @example\n * var RecorderType = GetRecorderType(options);\n * var recorder = new RecorderType(options);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n */\n\nfunction GetRecorderType(mediaStream, config) {\n    var recorder;\n\n    // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n    // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n    if (isChrome || isEdge || isOpera) {\n        // Media Stream Recording API has not been implemented in chrome yet;\n        // That's why using WebAudio API to record stereo audio in WAV format\n        recorder = StereoAudioRecorder;\n    }\n\n    if (typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype && !isChrome) {\n        recorder = MediaStreamRecorder;\n    }\n\n    // video recorder (in WebM format)\n    if (config.type === 'video' && (isChrome || isOpera)) {\n        recorder = WhammyRecorder;\n\n        if (typeof WebAssemblyRecorder !== 'undefined' && typeof ReadableStream !== 'undefined') {\n            recorder = WebAssemblyRecorder;\n        }\n    }\n\n    // video recorder (in Gif format)\n    if (config.type === 'gif') {\n        recorder = GifRecorder;\n    }\n\n    // html2canvas recording!\n    if (config.type === 'canvas') {\n        recorder = CanvasRecorder;\n    }\n\n    if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n        if (getTracks(mediaStream, 'video').length || getTracks(mediaStream, 'audio').length) {\n            // audio-only recording\n            if (config.type === 'audio') {\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n                // else recorder = StereoAudioRecorder;\n            } else {\n                // video or screen tracks\n                if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('video/webm')) {\n                    recorder = MediaStreamRecorder;\n                }\n            }\n        }\n    }\n\n    if (mediaStream instanceof Array && mediaStream.length) {\n        recorder = MultiStreamRecorder;\n    }\n\n    if (config.recorderType) {\n        recorder = config.recorderType;\n    }\n\n    if (!config.disableLogs && !!recorder && !!recorder.name) {\n        console.log('Using recorderType:', recorder.name || recorder.constructor.name);\n    }\n\n    if (!recorder && isSafari) {\n        recorder = MediaStreamRecorder;\n    }\n\n    return recorder;\n}\n\n// _____________\n// MRecordRTC.js\n\n/**\n * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.\n * @summary MRecordRTC stands for \"Multiple-RecordRTC\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MRecordRTC\n * @class\n * @example\n * var recorder = new MRecordRTC();\n * recorder.addStream(MediaStream);\n * recorder.mediaType = {\n *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n *     gif: true    // or GifRecorder\n * };\n * // mimeType is optional and should be set only in advance cases.\n * recorder.mimeType = {\n *     audio: 'audio/wav',\n *     video: 'video/webm',\n *     gif:   'image/gif'\n * };\n * recorder.startRecording();\n * @see For further information:\n * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @requires {@link RecordRTC}\n */\n\nfunction MRecordRTC(mediaStream) {\n\n    /**\n     * This method attaches MediaStream object to {@link MRecordRTC}.\n     * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.addStream(MediaStream);\n     */\n    this.addStream = function(_mediaStream) {\n        if (_mediaStream) {\n            mediaStream = _mediaStream;\n        }\n    };\n\n    /**\n     * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n     * @property {object} mediaType - {audio: true, video: true, gif: true}\n     * @memberof MRecordRTC\n     * @example\n     * var recorder = new MRecordRTC();\n     * recorder.mediaType = {\n     *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n     *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder\n     *     gif  : true  // TRUE or GifRecorder\n     * };\n     */\n    this.mediaType = {\n        audio: true,\n        video: true\n    };\n\n    /**\n     * This method starts recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.startRecording();\n     */\n    this.startRecording = function() {\n        var mediaType = this.mediaType;\n        var recorderType;\n        var mimeType = this.mimeType || {\n            audio: null,\n            video: null,\n            gif: null\n        };\n\n        if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'audio').length) {\n            mediaType.audio = false;\n        }\n\n        if (typeof mediaType.video !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n            mediaType.video = false;\n        }\n\n        if (typeof mediaType.gif !== 'function' && isMediaRecorderCompatible() && !getTracks(mediaStream, 'video').length) {\n            mediaType.gif = false;\n        }\n\n        if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n            throw 'MediaStream must have either audio or video tracks.';\n        }\n\n        if (!!mediaType.audio) {\n            recorderType = null;\n            if (typeof mediaType.audio === 'function') {\n                recorderType = mediaType.audio;\n            }\n\n            this.audioRecorder = new RecordRTC(mediaStream, {\n                type: 'audio',\n                bufferSize: this.bufferSize,\n                sampleRate: this.sampleRate,\n                numberOfAudioChannels: this.numberOfAudioChannels || 2,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.audio,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp\n            });\n\n            if (!mediaType.video) {\n                this.audioRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.video) {\n            recorderType = null;\n            if (typeof mediaType.video === 'function') {\n                recorderType = mediaType.video;\n            }\n\n            var newStream = mediaStream;\n\n            if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n                var videoTrack = getTracks(mediaStream, 'video')[0];\n\n                if (isFirefox) {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n\n                    if (recorderType && recorderType === WhammyRecorder) {\n                        // Firefox does NOT supports webp-encoding yet\n                        // But Firefox do supports WebAssemblyRecorder\n                        recorderType = MediaStreamRecorder;\n                    }\n                } else {\n                    newStream = new MediaStream();\n                    newStream.addTrack(videoTrack);\n                }\n            }\n\n            this.videoRecorder = new RecordRTC(newStream, {\n                type: 'video',\n                video: this.video,\n                canvas: this.canvas,\n                frameInterval: this.frameInterval || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.video,\n                timeSlice: this.timeSlice,\n                onTimeStamp: this.onTimeStamp,\n                workerPath: this.workerPath,\n                webAssemblyPath: this.webAssemblyPath,\n                frameRate: this.frameRate, // used by WebAssemblyRecorder; values: usually 30; accepts any.\n                bitrate: this.bitrate // used by WebAssemblyRecorder; values: 0 to 1000+\n            });\n\n            if (!mediaType.audio) {\n                this.videoRecorder.startRecording();\n            }\n        }\n\n        if (!!mediaType.audio && !!mediaType.video) {\n            var self = this;\n\n            var isSingleRecorder = isMediaRecorderCompatible() === true;\n\n            if (mediaType.audio instanceof StereoAudioRecorder && !!mediaType.video) {\n                isSingleRecorder = false;\n            } else if (mediaType.audio !== true && mediaType.video !== true && mediaType.audio !== mediaType.video) {\n                isSingleRecorder = false;\n            }\n\n            if (isSingleRecorder === true) {\n                self.audioRecorder = null;\n                self.videoRecorder.startRecording();\n            } else {\n                self.videoRecorder.initRecorder(function() {\n                    self.audioRecorder.initRecorder(function() {\n                        // Both recorders are ready to record things accurately\n                        self.videoRecorder.startRecording();\n                        self.audioRecorder.startRecording();\n                    });\n                });\n            }\n        }\n\n        if (!!mediaType.gif) {\n            recorderType = null;\n            if (typeof mediaType.gif === 'function') {\n                recorderType = mediaType.gif;\n            }\n            this.gifRecorder = new RecordRTC(mediaStream, {\n                type: 'gif',\n                frameRate: this.frameRate || 200,\n                quality: this.quality || 10,\n                disableLogs: this.disableLogs,\n                recorderType: recorderType,\n                mimeType: mimeType.gif\n            });\n            this.gifRecorder.startRecording();\n        }\n    };\n\n    /**\n     * This method stops recording.\n     * @param {function} callback - Callback function is invoked when all encoders finished their jobs.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.stopRecording(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     */\n    this.stopRecording = function(callback) {\n        callback = callback || function() {};\n\n        if (this.audioRecorder) {\n            this.audioRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'audio');\n            });\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'video');\n            });\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.stopRecording(function(blobURL) {\n                callback(blobURL, 'gif');\n            });\n        }\n    };\n\n    /**\n     * This method pauses recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.pauseRecording();\n     */\n    this.pauseRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.pauseRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.pauseRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.pauseRecording();\n        }\n    };\n\n    /**\n     * This method resumes recording.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.resumeRecording();\n     */\n    this.resumeRecording = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.resumeRecording();\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.resumeRecording();\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.resumeRecording();\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs.\n     * @param {function} callback - All recorded blobs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getBlob(function(recording){\n     *     var audioBlob = recording.audio;\n     *     var videoBlob = recording.video;\n     *     var gifBlob   = recording.gif;\n     * });\n     * // or\n     * var audioBlob = recorder.getBlob().audio;\n     * var videoBlob = recorder.getBlob().video;\n     */\n    this.getBlob = function(callback) {\n        var output = {};\n\n        if (this.audioRecorder) {\n            output.audio = this.audioRecorder.getBlob();\n        }\n\n        if (this.videoRecorder) {\n            output.video = this.videoRecorder.getBlob();\n        }\n\n        if (this.gifRecorder) {\n            output.gif = this.gifRecorder.getBlob();\n        }\n\n        if (callback) {\n            callback(output);\n        }\n\n        return output;\n    };\n\n    /**\n     * Destroy all recorder instances.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.destroy();\n     */\n    this.destroy = function() {\n        if (this.audioRecorder) {\n            this.audioRecorder.destroy();\n            this.audioRecorder = null;\n        }\n\n        if (this.videoRecorder) {\n            this.videoRecorder.destroy();\n            this.videoRecorder = null;\n        }\n\n        if (this.gifRecorder) {\n            this.gifRecorder.destroy();\n            this.gifRecorder = null;\n        }\n    };\n\n    /**\n     * This method can be used to manually get all recorded blobs' DataURLs.\n     * @param {function} callback - All recorded blobs' DataURLs are passed back to the \"callback\" function.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.getDataURL(function(recording){\n     *     var audioDataURL = recording.audio;\n     *     var videoDataURL = recording.video;\n     *     var gifDataURL   = recording.gif;\n     * });\n     */\n    this.getDataURL = function(callback) {\n        this.getBlob(function(blob) {\n            if (blob.audio && blob.video) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    getDataURL(blob.video, function(_videoDataURL) {\n                        callback({\n                            audio: _audioDataURL,\n                            video: _videoDataURL\n                        });\n                    });\n                });\n            } else if (blob.audio) {\n                getDataURL(blob.audio, function(_audioDataURL) {\n                    callback({\n                        audio: _audioDataURL\n                    });\n                });\n            } else if (blob.video) {\n                getDataURL(blob.video, function(_videoDataURL) {\n                    callback({\n                        video: _videoDataURL\n                    });\n                });\n            }\n        });\n\n        function getDataURL(blob, callback00) {\n            if (typeof Worker !== 'undefined') {\n                var webWorker = processInWebWorker(function readFile(_blob) {\n                    postMessage(new FileReaderSync().readAsDataURL(_blob));\n                });\n\n                webWorker.onmessage = function(event) {\n                    callback00(event.data);\n                };\n\n                webWorker.postMessage(blob);\n            } else {\n                var reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onload = function(event) {\n                    callback00(event.target.result);\n                };\n            }\n        }\n\n        function processInWebWorker(_function) {\n            var blob = URL.createObjectURL(new Blob([_function.toString(),\n                'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n            ], {\n                type: 'application/javascript'\n            }));\n\n            var worker = new Worker(blob);\n            var url;\n            if (typeof URL !== 'undefined') {\n                url = URL;\n            } else if (typeof webkitURL !== 'undefined') {\n                url = webkitURL;\n            } else {\n                throw 'Neither URL nor webkitURL detected.';\n            }\n            url.revokeObjectURL(blob);\n            return worker;\n        }\n    };\n\n    /**\n     * This method can be used to ask {@link MRecordRTC} to write all recorded blobs into IndexedDB storage.\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.writeToDisk();\n     */\n    this.writeToDisk = function() {\n        RecordRTC.writeToDisk({\n            audio: this.audioRecorder,\n            video: this.videoRecorder,\n            gif: this.gifRecorder\n        });\n    };\n\n    /**\n     * This method can be used to invoke a save-as dialog for all recorded blobs.\n     * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n     * @method\n     * @memberof MRecordRTC\n     * @example\n     * recorder.save({\n     *     audio: 'audio-file-name',\n     *     video: 'video-file-name',\n     *     gif  : 'gif-file-name'\n     * });\n     */\n    this.save = function(args) {\n        args = args || {\n            audio: true,\n            video: true,\n            gif: true\n        };\n\n        if (!!args.audio && this.audioRecorder) {\n            this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n        }\n\n        if (!!args.video && this.videoRecorder) {\n            this.videoRecorder.save(typeof args.video === 'string' ? args.video : '');\n        }\n        if (!!args.gif && this.gifRecorder) {\n            this.gifRecorder.save(typeof args.gif === 'string' ? args.gif : '');\n        }\n    };\n}\n\n/**\n * This method can be used to get all recorded blobs from IndexedDB storage.\n * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n * @param {function} callback - Callback function to get all stored blobs.\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.getFromDisk('all', function(dataURL, type){\n *     if(type === 'audio') { }\n *     if(type === 'video') { }\n *     if(type === 'gif')   { }\n * });\n */\nMRecordRTC.getFromDisk = RecordRTC.getFromDisk;\n\n/**\n * This method can be used to store recorded blobs into IndexedDB storage.\n * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n * @method\n * @memberof MRecordRTC\n * @example\n * MRecordRTC.writeToDisk({\n *     audio: audioBlob,\n *     video: videoBlob,\n *     gif  : gifBlob\n * });\n */\nMRecordRTC.writeToDisk = RecordRTC.writeToDisk;\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MRecordRTC = MRecordRTC;\n}\n\nvar browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n(function(that) {\n    if (!that) {\n        return;\n    }\n\n    if (typeof window !== 'undefined') {\n        return;\n    }\n\n    if (typeof global === 'undefined') {\n        return;\n    }\n\n    global.navigator = {\n        userAgent: browserFakeUserAgent,\n        getUserMedia: function() {}\n    };\n\n    if (!global.console) {\n        global.console = {};\n    }\n\n    if (typeof global.console.log === 'undefined' || typeof global.console.error === 'undefined') {\n        global.console.error = global.console.log = global.console.log || function() {\n            console.log(arguments);\n        };\n    }\n\n    if (typeof document === 'undefined') {\n        /*global document:true */\n        that.document = {};\n\n        document.createElement = document.captureStream = document.mozCaptureStream = function() {\n            var obj = {\n                getContext: function() {\n                    return obj;\n                },\n                play: function() {},\n                pause: function() {},\n                drawImage: function() {},\n                toDataURL: function() {\n                    return '';\n                }\n            };\n            return obj;\n        };\n\n        that.HTMLVideoElement = function() {};\n    }\n\n    if (typeof location === 'undefined') {\n        /*global location:true */\n        that.location = {\n            protocol: 'file:',\n            href: '',\n            hash: ''\n        };\n    }\n\n    if (typeof screen === 'undefined') {\n        /*global screen:true */\n        that.screen = {\n            width: 0,\n            height: 0\n        };\n    }\n\n    if (typeof URL === 'undefined') {\n        /*global screen:true */\n        that.URL = {\n            createObjectURL: function() {\n                return '';\n            },\n            revokeObjectURL: function() {\n                return '';\n            }\n        };\n    }\n\n    /*global window:true */\n    that.window = global;\n})(typeof global !== 'undefined' ? global : null);\n\n// _____________________________\n// Cross-Browser-Declarations.js\n\n// animation-frame used in WebM recording\n\n/*jshint -W079 */\nvar requestAnimationFrame = window.requestAnimationFrame;\nif (typeof requestAnimationFrame === 'undefined') {\n    if (typeof webkitRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = webkitRequestAnimationFrame;\n    } else if (typeof mozRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = mozRequestAnimationFrame;\n    } else if (typeof msRequestAnimationFrame !== 'undefined') {\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = msRequestAnimationFrame;\n    } else if (typeof requestAnimationFrame === 'undefined') {\n        // via: https://gist.github.com/paulirish/1579671\n        var lastTime = 0;\n\n        /*global requestAnimationFrame:true */\n        requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n}\n\n/*jshint -W079 */\nvar cancelAnimationFrame = window.cancelAnimationFrame;\nif (typeof cancelAnimationFrame === 'undefined') {\n    if (typeof webkitCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = webkitCancelAnimationFrame;\n    } else if (typeof mozCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = mozCancelAnimationFrame;\n    } else if (typeof msCancelAnimationFrame !== 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = msCancelAnimationFrame;\n    } else if (typeof cancelAnimationFrame === 'undefined') {\n        /*global cancelAnimationFrame:true */\n        cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n}\n\n// WebAudio API representer\nvar AudioContext = window.AudioContext;\n\nif (typeof AudioContext === 'undefined') {\n    if (typeof webkitAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = webkitAudioContext;\n    }\n\n    if (typeof mozAudioContext !== 'undefined') {\n        /*global AudioContext:true */\n        AudioContext = mozAudioContext;\n    }\n}\n\n/*jshint -W079 */\nvar URL = window.URL;\n\nif (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n    /*global URL:true */\n    URL = webkitURL;\n}\n\nif (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n    if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.webkitGetUserMedia;\n    }\n\n    if (typeof navigator.mozGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = navigator.mozGetUserMedia;\n    }\n}\n\nvar isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveBlob || !!navigator.msSaveOrOpenBlob);\nvar isOpera = !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1 && ('netscape' in window) && / rv:/.test(navigator.userAgent);\nvar isChrome = (!isOpera && !isEdge && !!navigator.webkitGetUserMedia) || isElectron() || navigator.userAgent.toLowerCase().indexOf('chrome/') !== -1;\n\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nif (isSafari && !isChrome && navigator.userAgent.indexOf('CriOS') !== -1) {\n    isSafari = false;\n    isChrome = true;\n}\n\nvar MediaStream = window.MediaStream;\n\nif (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n    MediaStream = webkitMediaStream;\n}\n\n/*global MediaStream:true */\nif (typeof MediaStream !== 'undefined') {\n    // override \"stop\" method for all browsers\n    if (typeof MediaStream.prototype.stop === 'undefined') {\n        MediaStream.prototype.stop = function() {\n            this.getTracks().forEach(function(track) {\n                track.stop();\n            });\n        };\n    }\n}\n\n// below function via: http://goo.gl/B3ae8c\n/**\n * Return human-readable file size.\n * @param {number} bytes - Pass bytes and get formatted string.\n * @returns {string} - formatted string\n * @example\n * bytesToSize(1024*1024*5) === '5 GB'\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction bytesToSize(bytes) {\n    var k = 1000;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);\n    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n}\n\n/**\n * @param {Blob} file - File or Blob object. This parameter is required.\n * @param {string} fileName - Optional file name e.g. \"Recorded-Video.webm\"\n * @example\n * invokeSaveAsDialog(blob or file, [optional] fileName);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction invokeSaveAsDialog(file, fileName) {\n    if (!file) {\n        throw 'Blob object is required.';\n    }\n\n    if (!file.type) {\n        try {\n            file.type = 'video/webm';\n        } catch (e) {}\n    }\n\n    var fileExtension = (file.type || 'video/webm').split('/')[1];\n\n    if (fileName && fileName.indexOf('.') !== -1) {\n        var splitted = fileName.split('.');\n        fileName = splitted[0];\n        fileExtension = splitted[1];\n    }\n\n    var fileFullName = (fileName || (Math.round(Math.random() * 9999999999) + 888888888)) + '.' + fileExtension;\n\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\n        return navigator.msSaveOrOpenBlob(file, fileFullName);\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\n        return navigator.msSaveBlob(file, fileFullName);\n    }\n\n    var hyperlink = document.createElement('a');\n    hyperlink.href = URL.createObjectURL(file);\n    hyperlink.download = fileFullName;\n\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\n    (document.body || document.documentElement).appendChild(hyperlink);\n\n    if (typeof hyperlink.click === 'function') {\n        hyperlink.click();\n    } else {\n        hyperlink.target = '_blank';\n        hyperlink.dispatchEvent(new MouseEvent('click', {\n            view: window,\n            bubbles: true,\n            cancelable: true\n        }));\n    }\n\n    URL.revokeObjectURL(hyperlink.href);\n}\n\n/**\n * from: https://github.com/cheton/is-electron/blob/master/index.js\n **/\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to true\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction getTracks(stream, kind) {\n    if (!stream || !stream.getTracks) {\n        return [];\n    }\n\n    return stream.getTracks().filter(function(t) {\n        return t.kind === (kind || 'audio');\n    });\n}\n\nfunction setSrcObject(stream, element) {\n    if ('srcObject' in element) {\n        element.srcObject = stream;\n    } else if ('mozSrcObject' in element) {\n        element.mozSrcObject = stream;\n    } else {\n        element.srcObject = stream;\n    }\n}\n\n/**\n * @param {Blob} file - File or Blob object.\n * @param {function} callback - Callback function.\n * @example\n * getSeekableBlob(blob or file, callback);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\nfunction getSeekableBlob(inputBlob, callback) {\n    // EBML.js copyrights goes to: https://github.com/legokichi/ts-ebml\n    if (typeof EBML === 'undefined') {\n        throw new Error('Please link: https://cdn.webrtc-experiment.com/EBML.js');\n    }\n\n    var reader = new EBML.Reader();\n    var decoder = new EBML.Decoder();\n    var tools = EBML.tools;\n\n    var fileReader = new FileReader();\n    fileReader.onload = function(e) {\n        var ebmlElms = decoder.decode(this.result);\n        ebmlElms.forEach(function(element) {\n            reader.read(element);\n        });\n        reader.stop();\n        var refinedMetadataBuf = tools.makeMetadataSeekable(reader.metadatas, reader.duration, reader.cues);\n        var body = this.result.slice(reader.metadataSize);\n        var newBlob = new Blob([refinedMetadataBuf, body], {\n            type: 'video/webm'\n        });\n\n        callback(newBlob);\n    };\n    fileReader.readAsArrayBuffer(inputBlob);\n}\n\n// __________ (used to handle stuff like http://goo.gl/xmE5eg) issue #129\n// Storage.js\n\n/**\n * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * Storage.AudioContext === webkitAudioContext\n * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Storage = {};\n\nif (typeof AudioContext !== 'undefined') {\n    Storage.AudioContext = AudioContext;\n} else if (typeof webkitAudioContext !== 'undefined') {\n    Storage.AudioContext = webkitAudioContext;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Storage = Storage;\n}\n\nfunction isMediaRecorderCompatible() {\n    if (isFirefox || isSafari || isEdge) {\n        return true;\n    }\n\n    var nVer = navigator.appVersion;\n    var nAgt = navigator.userAgent;\n    var fullVersion = '' + parseFloat(navigator.appVersion);\n    var majorVersion = parseInt(navigator.appVersion, 10);\n    var nameOffset, verOffset, ix;\n\n    if (isChrome || isOpera) {\n        verOffset = nAgt.indexOf('Chrome');\n        fullVersion = nAgt.substring(verOffset + 7);\n    }\n\n    // trim the fullVersion string at semicolon/space if present\n    if ((ix = fullVersion.indexOf(';')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    if ((ix = fullVersion.indexOf(' ')) !== -1) {\n        fullVersion = fullVersion.substring(0, ix);\n    }\n\n    majorVersion = parseInt('' + fullVersion, 10);\n\n    if (isNaN(majorVersion)) {\n        fullVersion = '' + parseFloat(navigator.appVersion);\n        majorVersion = parseInt(navigator.appVersion, 10);\n    }\n\n    return majorVersion >= 49;\n}\n\n// ______________________\n// MediaStreamRecorder.js\n\n/**\n * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.\n * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link https://github.com/muaz-khan|Muaz Khan}\n * @typedef MediaStreamRecorder\n * @class\n * @example\n * var config = {\n *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n *     audioBitsPerSecond : 256 * 8 * 1024,\n *     videoBitsPerSecond : 256 * 8 * 1024,\n *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n *     checkForInactiveTracks: true,\n *     timeSlice: 1000, // concatenate intervals based blobs\n *     ondataavailable: function() {} // get intervals based blobs\n * }\n * var recorder = new MediaStreamRecorder(mediaStream, config);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n */\n\nfunction MediaStreamRecorder(mediaStream, config) {\n    var self = this;\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    if (typeof MediaRecorder === 'undefined') {\n        throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n    }\n\n    config = config || {\n        // bitsPerSecond: 256 * 8 * 1024,\n        mimeType: 'video/webm'\n    };\n\n    if (config.type === 'audio') {\n        if (getTracks(mediaStream, 'video').length && getTracks(mediaStream, 'audio').length) {\n            var stream;\n            if (!!navigator.mozGetUserMedia) {\n                stream = new MediaStream();\n                stream.addTrack(getTracks(mediaStream, 'audio')[0]);\n            } else {\n                // webkitMediaStream\n                stream = new MediaStream(getTracks(mediaStream, 'audio'));\n            }\n            mediaStream = stream;\n        }\n\n        if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n            config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n        }\n\n        if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n            // forcing better codecs on Firefox (via #166)\n            config.mimeType = 'audio/ogg';\n        }\n    }\n\n    var arrayOfBlobs = [];\n\n    /**\n     * This method returns array of blobs. Use only with \"timeSlice\". Its useful to preview recording anytime, without using the \"stop\" method.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var arrayOfBlobs = recorder.getArrayOfBlobs();\n     * @returns {Array} Returns array of recorded blobs.\n     */\n    this.getArrayOfBlobs = function() {\n        return arrayOfBlobs;\n    };\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // set defaults\n        self.blob = null;\n        self.clearRecordedData();\n        self.timestamps = [];\n        allStates = [];\n        arrayOfBlobs = [];\n\n        var recorderHints = config;\n\n        if (!config.disableLogs) {\n            console.log('Passing following config over MediaRecorder API.', recorderHints);\n        }\n\n        if (mediaRecorder) {\n            // mandatory to make sure Firefox doesn't fails to record streams 3-4 times without reloading the page.\n            mediaRecorder = null;\n        }\n\n        if (isChrome && !isMediaRecorderCompatible()) {\n            // to support video-only recording on stable\n            recorderHints = 'video/vp8';\n        }\n\n        if (typeof MediaRecorder.isTypeSupported === 'function' && recorderHints.mimeType) {\n            if (!MediaRecorder.isTypeSupported(recorderHints.mimeType)) {\n                if (!config.disableLogs) {\n                    console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n                }\n\n                recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n            }\n        }\n\n        // using MediaRecorder API here\n        try {\n            mediaRecorder = new MediaRecorder(mediaStream, recorderHints);\n\n            // reset\n            config.mimeType = recorderHints.mimeType;\n        } catch (e) {\n            // chrome-based fallback\n            mediaRecorder = new MediaRecorder(mediaStream);\n        }\n\n        // old hack?\n        if (recorderHints.mimeType && !MediaRecorder.isTypeSupported && 'canRecordMimeType' in mediaRecorder && mediaRecorder.canRecordMimeType(recorderHints.mimeType) === false) {\n            if (!config.disableLogs) {\n                console.warn('MediaRecorder API seems unable to record mimeType:', recorderHints.mimeType);\n            }\n        }\n\n        // Dispatching OnDataAvailable Handler\n        mediaRecorder.ondataavailable = function(e) {\n            if (e.data) {\n                allStates.push('ondataavailable: ' + bytesToSize(e.data.size));\n            }\n\n            if (typeof config.timeSlice === 'number') {\n                if (e.data && e.data.size && e.data.size > 100) {\n                    arrayOfBlobs.push(e.data);\n                    updateTimeStamp();\n\n                    if (typeof config.ondataavailable === 'function') {\n                        // intervals based blobs\n                        var blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                            type: getMimeType(recorderHints)\n                        });\n                        config.ondataavailable(blob);\n                    }\n                }\n                return;\n            }\n\n            if (!e.data || !e.data.size || e.data.size < 100 || self.blob) {\n                // make sure that stopRecording always getting fired\n                // even if there is invalid data\n                if (self.recordingCallback) {\n                    self.recordingCallback(new Blob([], {\n                        type: getMimeType(recorderHints)\n                    }));\n                    self.recordingCallback = null;\n                }\n                return;\n            }\n\n            self.blob = config.getNativeBlob ? e.data : new Blob([e.data], {\n                type: getMimeType(recorderHints)\n            });\n\n            if (self.recordingCallback) {\n                self.recordingCallback(self.blob);\n                self.recordingCallback = null;\n            }\n        };\n\n        mediaRecorder.onstart = function() {\n            allStates.push('started');\n        };\n\n        mediaRecorder.onpause = function() {\n            allStates.push('paused');\n        };\n\n        mediaRecorder.onresume = function() {\n            allStates.push('resumed');\n        };\n\n        mediaRecorder.onstop = function() {\n            allStates.push('stopped');\n        };\n\n        mediaRecorder.onerror = function(error) {\n            if (!error) {\n                return;\n            }\n\n            if (!error.name) {\n                error.name = 'UnknownError';\n            }\n\n            allStates.push('error: ' + error);\n\n            if (!config.disableLogs) {\n                // via: https://w3c.github.io/mediacapture-record/MediaRecorder.html#exception-summary\n                if (error.name.toString().toLowerCase().indexOf('invalidstate') !== -1) {\n                    console.error('The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('notsupported') !== -1) {\n                    console.error('MIME type (', recorderHints.mimeType, ') is not supported.', error);\n                } else if (error.name.toString().toLowerCase().indexOf('security') !== -1) {\n                    console.error('MediaRecorder security error', error);\n                }\n\n                // older code below\n                else if (error.name === 'OutOfMemory') {\n                    console.error('The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'IllegalStreamModification') {\n                    console.error('A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'OtherRecordingError') {\n                    console.error('Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.', error);\n                } else if (error.name === 'GenericError') {\n                    console.error('The UA cannot provide the codec or recording option that has been requested.', error);\n                } else {\n                    console.error('MediaRecorder Error', error);\n                }\n            }\n\n            (function(looper) {\n                if (!self.manuallyStopped && mediaRecorder && mediaRecorder.state === 'inactive') {\n                    delete config.timeslice;\n\n                    // 10 minutes, enough?\n                    mediaRecorder.start(10 * 60 * 1000);\n                    return;\n                }\n\n                setTimeout(looper, 1000);\n            })();\n\n            if (mediaRecorder.state !== 'inactive' && mediaRecorder.state !== 'stopped') {\n                mediaRecorder.stop();\n            }\n        };\n\n        if (typeof config.timeSlice === 'number') {\n            updateTimeStamp();\n            mediaRecorder.start(config.timeSlice);\n        } else {\n            // default is 60 minutes; enough?\n            // use config => {timeSlice: 1000} otherwise\n\n            mediaRecorder.start(3.6e+6);\n        }\n\n        if (config.initCallback) {\n            config.initCallback(); // old code\n        }\n    };\n\n    /**\n     * @property {Array} timestamps - Array of time stamps\n     * @memberof MediaStreamRecorder\n     * @example\n     * console.log(recorder.timestamps);\n     */\n    this.timestamps = [];\n\n    function updateTimeStamp() {\n        self.timestamps.push(new Date().getTime());\n\n        if (typeof config.onTimeStamp === 'function') {\n            config.onTimeStamp(self.timestamps[self.timestamps.length - 1], self.timestamps);\n        }\n    }\n\n    function getMimeType(secondObject) {\n        if (mediaRecorder && mediaRecorder.mimeType) {\n            return mediaRecorder.mimeType;\n        }\n\n        return secondObject.mimeType || 'video/webm';\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        self.manuallyStopped = true; // used inside the mediaRecorder.onerror\n\n        if (!mediaRecorder) {\n            return;\n        }\n\n        this.recordingCallback = callback;\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n        }\n\n        if (typeof config.timeSlice === 'number') {\n            setTimeout(function() {\n                self.blob = new Blob(arrayOfBlobs, {\n                    type: getMimeType(config)\n                });\n\n                self.recordingCallback(self.blob);\n            }, 100);\n        }\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'recording') {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        if (mediaRecorder.state === 'paused') {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder && mediaRecorder.state === 'recording') {\n            self.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        arrayOfBlobs = [];\n        mediaRecorder = null;\n        self.timestamps = [];\n    }\n\n    // Reference to \"MediaRecorder\" object\n    var mediaRecorder;\n\n    /**\n     * Access to native MediaRecorder API\n     * @method\n     * @memberof MediaStreamRecorder\n     * @instance\n     * @example\n     * var internal = recorder.getInternalRecorder();\n     * internal.ondataavailable = function() {}; // override\n     * internal.stream, internal.onpause, internal.onstop, etc.\n     * @returns {Object} Returns internal recording object.\n     */\n    this.getInternalRecorder = function() {\n        return mediaRecorder;\n    };\n\n    function isMediaStreamActive() {\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof MediaStreamRecorder\n     * @example\n     * recorder.stop(function() {\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n\n\n    /**\n     * Get MediaRecorder readonly state.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getState();\n     * @returns {String} Returns recording state.\n     */\n    this.getState = function() {\n        if (!mediaRecorder) {\n            return 'inactive';\n        }\n\n        return mediaRecorder.state || 'inactive';\n    };\n\n    // list of all recording states\n    var allStates = [];\n\n    /**\n     * Get MediaRecorder all recording states.\n     * @method\n     * @memberof MediaStreamRecorder\n     * @example\n     * var state = recorder.getAllStates();\n     * @returns {Array} Returns all recording states\n     */\n    this.getAllStates = function() {\n        return allStates;\n    };\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = false; // disable to minimize CPU usage\n    }\n\n    var self = this;\n\n    // this method checks if media stream is stopped\n    // or if any track is ended.\n    (function looper() {\n        if (!mediaRecorder || config.checkForInactiveTracks === false) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            self.stop();\n            return;\n        }\n\n        setTimeout(looper, 1000); // check every second\n    })();\n\n    // for debugging\n    this.name = 'MediaStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MediaStreamRecorder = MediaStreamRecorder;\n}\n\n// source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n// https://github.com/mattdiamond/Recorderjs#license-mit\n// ______________________\n// StereoAudioRecorder.js\n\n/**\n * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n * @summary JavaScript standalone object for stereo audio recording.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef StereoAudioRecorder\n * @class\n * @example\n * var recorder = new StereoAudioRecorder(MediaStream, {\n *     sampleRate: 44100,\n *     bufferSize: 4096\n * });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n */\n\nfunction StereoAudioRecorder(mediaStream, config) {\n    if (!getTracks(mediaStream, 'audio').length) {\n        throw 'Your stream has no audio tracks.';\n    }\n\n    config = config || {};\n\n    var self = this;\n\n    // variables\n    var leftchannel = [];\n    var rightchannel = [];\n    var recording = false;\n    var recordingLength = 0;\n    var jsAudioNode;\n\n    var numberOfAudioChannels = 2;\n\n    /**\n     * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\n     * @property {number} desiredSampRate - Desired Bits per sample * 1000\n     * @memberof StereoAudioRecorder\n     * @instance\n     * @example\n     * var recorder = StereoAudioRecorder(mediaStream, {\n     *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n     * });\n     */\n    var desiredSampRate = config.desiredSampRate;\n\n    // backward compatibility\n    if (config.leftChannel === true) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (config.numberOfAudioChannels === 1) {\n        numberOfAudioChannels = 1;\n    }\n\n    if (!numberOfAudioChannels || numberOfAudioChannels < 1) {\n        numberOfAudioChannels = 2;\n    }\n\n    if (!config.disableLogs) {\n        console.log('StereoAudioRecorder is set to record number of channels: ' + numberOfAudioChannels);\n    }\n\n    // if any Track within the MediaStream is muted or not enabled at any time, \n    // the browser will only record black frames \n    // or silence since that is the content produced by the Track\n    // so we need to stopRecording as soon as any single track ends.\n    if (typeof config.checkForInactiveTracks === 'undefined') {\n        config.checkForInactiveTracks = true;\n    }\n\n    function isMediaStreamActive() {\n        if (config.checkForInactiveTracks === false) {\n            // always return \"true\"\n            return true;\n        }\n\n        if ('active' in mediaStream) {\n            if (!mediaStream.active) {\n                return false;\n            }\n        } else if ('ended' in mediaStream) { // old hack\n            if (mediaStream.ended) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        resetVariables();\n\n        isAudioProcessStarted = isPaused = false;\n        recording = true;\n\n        if (typeof config.timeSlice !== 'undefined') {\n            looper();\n        }\n    };\n\n    function mergeLeftRightBuffers(config, callback) {\n        function mergeAudioBuffers(config, cb) {\n            var numberOfAudioChannels = config.numberOfAudioChannels;\n\n            // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n            var leftBuffers = config.leftBuffers.slice(0);\n            var rightBuffers = config.rightBuffers.slice(0);\n            var sampleRate = config.sampleRate;\n            var internalInterleavedLength = config.internalInterleavedLength;\n            var desiredSampRate = config.desiredSampRate;\n\n            if (numberOfAudioChannels === 2) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n                rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                    rightBuffers = interpolateArray(rightBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            if (numberOfAudioChannels === 1) {\n                leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n\n                if (desiredSampRate) {\n                    leftBuffers = interpolateArray(leftBuffers, desiredSampRate, sampleRate);\n                }\n            }\n\n            // set sample rate as desired sample rate\n            if (desiredSampRate) {\n                sampleRate = desiredSampRate;\n            }\n\n            // for changing the sampling rate, reference:\n            // http://stackoverflow.com/a/28977136/552182\n            function interpolateArray(data, newSampleRate, oldSampleRate) {\n                var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));\n                var newData = [];\n                var springFactor = Number((data.length - 1) / (fitCount - 1));\n                newData[0] = data[0];\n                for (var i = 1; i < fitCount - 1; i++) {\n                    var tmp = i * springFactor;\n                    var before = Number(Math.floor(tmp)).toFixed();\n                    var after = Number(Math.ceil(tmp)).toFixed();\n                    var atPoint = tmp - before;\n                    newData[i] = linearInterpolate(data[before], data[after], atPoint);\n                }\n                newData[fitCount - 1] = data[data.length - 1];\n                return newData;\n            }\n\n            function linearInterpolate(before, after, atPoint) {\n                return before + (after - before) * atPoint;\n            }\n\n            function mergeBuffers(channelBuffer, rLength) {\n                var result = new Float64Array(rLength);\n                var offset = 0;\n                var lng = channelBuffer.length;\n\n                for (var i = 0; i < lng; i++) {\n                    var buffer = channelBuffer[i];\n                    result.set(buffer, offset);\n                    offset += buffer.length;\n                }\n\n                return result;\n            }\n\n            function interleave(leftChannel, rightChannel) {\n                var length = leftChannel.length + rightChannel.length;\n\n                var result = new Float64Array(length);\n\n                var inputIndex = 0;\n\n                for (var index = 0; index < length;) {\n                    result[index++] = leftChannel[inputIndex];\n                    result[index++] = rightChannel[inputIndex];\n                    inputIndex++;\n                }\n                return result;\n            }\n\n            function writeUTFBytes(view, offset, string) {\n                var lng = string.length;\n                for (var i = 0; i < lng; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                }\n            }\n\n            // interleave both channels together\n            var interleaved;\n\n            if (numberOfAudioChannels === 2) {\n                interleaved = interleave(leftBuffers, rightBuffers);\n            }\n\n            if (numberOfAudioChannels === 1) {\n                interleaved = leftBuffers;\n            }\n\n            var interleavedLength = interleaved.length;\n\n            // create wav file\n            var resultingBufferLength = 44 + interleavedLength * 2;\n\n            var buffer = new ArrayBuffer(resultingBufferLength);\n\n            var view = new DataView(buffer);\n\n            // RIFF chunk descriptor/identifier \n            writeUTFBytes(view, 0, 'RIFF');\n\n            // RIFF chunk length\n            // changed \"44\" to \"36\" via #401\n            view.setUint32(4, 36 + interleavedLength * 2, true);\n\n            // RIFF type \n            writeUTFBytes(view, 8, 'WAVE');\n\n            // format chunk identifier \n            // FMT sub-chunk\n            writeUTFBytes(view, 12, 'fmt ');\n\n            // format chunk length \n            view.setUint32(16, 16, true);\n\n            // sample format (raw)\n            view.setUint16(20, 1, true);\n\n            // stereo (2 channels)\n            view.setUint16(22, numberOfAudioChannels, true);\n\n            // sample rate \n            view.setUint32(24, sampleRate, true);\n\n            // byte rate (sample rate * block align)\n            view.setUint32(28, sampleRate * 2, true);\n\n            // block align (channel count * bytes per sample) \n            view.setUint16(32, numberOfAudioChannels * 2, true);\n\n            // bits per sample \n            view.setUint16(34, 16, true);\n\n            // data sub-chunk\n            // data chunk identifier \n            writeUTFBytes(view, 36, 'data');\n\n            // data chunk length \n            view.setUint32(40, interleavedLength * 2, true);\n\n            // write the PCM samples\n            var lng = interleavedLength;\n            var index = 44;\n            var volume = 1;\n            for (var i = 0; i < lng; i++) {\n                view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n                index += 2;\n            }\n\n            if (cb) {\n                return cb({\n                    buffer: buffer,\n                    view: view\n                });\n            }\n\n            postMessage({\n                buffer: buffer,\n                view: view\n            });\n        }\n\n        if (config.noWorker) {\n            mergeAudioBuffers(config, function(data) {\n                callback(data.buffer, data.view);\n            });\n            return;\n        }\n\n\n        var webWorker = processInWebWorker(mergeAudioBuffers);\n\n        webWorker.onmessage = function(event) {\n            callback(event.data.buffer, event.data.view);\n\n            // release memory\n            URL.revokeObjectURL(webWorker.workerURL);\n\n            // kill webworker (or Chrome will kill your page after ~25 calls)\n            webWorker.terminate();\n        };\n\n        webWorker.postMessage(config);\n    }\n\n    function processInWebWorker(_function) {\n        var workerURL = URL.createObjectURL(new Blob([_function.toString(),\n            ';this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(workerURL);\n        worker.workerURL = workerURL;\n        return worker;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        // stop recording\n        recording = false;\n\n        mergeLeftRightBuffers({\n            desiredSampRate: desiredSampRate,\n            sampleRate: sampleRate,\n            numberOfAudioChannels: numberOfAudioChannels,\n            internalInterleavedLength: recordingLength,\n            leftBuffers: leftchannel,\n            rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel,\n            noWorker: config.noWorker\n        }, function(buffer, view) {\n            /**\n             * @property {Blob} blob - The recorded blob object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var blob = recorder.blob;\n             * });\n             */\n            self.blob = new Blob([view], {\n                type: 'audio/wav'\n            });\n\n            /**\n             * @property {ArrayBuffer} buffer - The recorded buffer object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var buffer = recorder.buffer;\n             * });\n             */\n            self.buffer = new ArrayBuffer(view.buffer.byteLength);\n\n            /**\n             * @property {DataView} view - The recorded data-view object.\n             * @memberof StereoAudioRecorder\n             * @example\n             * recorder.stop(function(){\n             *     var view = recorder.view;\n             * });\n             */\n            self.view = view;\n\n            self.sampleRate = desiredSampRate || sampleRate;\n            self.bufferSize = bufferSize;\n\n            // recorded audio length\n            self.length = recordingLength;\n\n            isAudioProcessStarted = false;\n\n            if (callback) {\n                callback(self.blob);\n            }\n        });\n    };\n\n    if (typeof Storage === 'undefined') {\n        var Storage = {\n            AudioContextConstructor: null,\n            AudioContext: window.AudioContext || window.webkitAudioContext\n        };\n    }\n\n    if (!Storage.AudioContextConstructor) {\n        Storage.AudioContextConstructor = new Storage.AudioContext();\n    }\n\n    var context = Storage.AudioContextConstructor;\n\n    // creates an audio node from the microphone incoming stream\n    var audioInput = context.createMediaStreamSource(mediaStream);\n\n    var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n\n    /**\n     * From the spec: This value controls how frequently the audioprocess event is\n     * dispatched and how many sample-frames need to be processed each call.\n     * Lower values for buffer size will result in a lower (better) latency.\n     * Higher values will be necessary to avoid audio breakup and glitches\n     * The size of the buffer (in sample-frames) which needs to\n     * be processed each time onprocessaudio is called.\n     * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n     * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     bufferSize: 4096\n     * });\n     */\n\n    // \"0\" means, let chrome decide the most accurate buffer-size for current platform.\n    var bufferSize = typeof config.bufferSize === 'undefined' ? 4096 : config.bufferSize;\n\n    if (legalBufferValues.indexOf(bufferSize) === -1) {\n        if (!config.disableLogs) {\n            console.log('Legal values for buffer-size are ' + JSON.stringify(legalBufferValues, null, '\\t'));\n        }\n    }\n\n    if (context.createJavaScriptNode) {\n        jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else if (context.createScriptProcessor) {\n        jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n    } else {\n        throw 'WebAudio API has no support on this browser.';\n    }\n\n    // connect the stream to the script processor\n    audioInput.connect(jsAudioNode);\n\n    if (!config.bufferSize) {\n        bufferSize = jsAudioNode.bufferSize; // device buffer-size\n    }\n\n    /**\n     * The sample rate (in sample-frames per second) at which the\n     * AudioContext handles audio. It is assumed that all AudioNodes\n     * in the context run at this rate. In making this assumption,\n     * sample-rate converters or \"varispeed\" processors are not supported\n     * in real-time processing.\n     * The sampleRate parameter describes the sample-rate of the\n     * linear PCM audio data in the buffer in sample-frames per second.\n     * An implementation must support sample-rates in at least\n     * the range 22050 to 96000.\n     * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder = new StereoAudioRecorder(mediaStream, {\n     *     sampleRate: 44100\n     * });\n     */\n    var sampleRate = typeof config.sampleRate !== 'undefined' ? config.sampleRate : context.sampleRate || 44100;\n\n    if (sampleRate < 22050 || sampleRate > 96000) {\n        // Ref: http://stackoverflow.com/a/26303918/552182\n        if (!config.disableLogs) {\n            console.log('sample-rate must be under range 22050 and 96000.');\n        }\n    }\n\n    if (!config.disableLogs) {\n        if (config.desiredSampRate) {\n            console.log('Desired sample-rate: ' + config.desiredSampRate);\n        }\n    }\n\n    var isPaused = false;\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (isMediaStreamActive() === false) {\n            throw 'Please make sure MediaStream is active.';\n        }\n\n        if (!recording) {\n            if (!config.disableLogs) {\n                console.log('Seems recording has been restarted.');\n            }\n            this.record();\n            return;\n        }\n\n        isPaused = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof StereoAudioRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        config.checkForInactiveTracks = false;\n\n        if (recording) {\n            this.stop(clearRecordedDataCB);\n        }\n\n        clearRecordedDataCB();\n    };\n\n    function resetVariables() {\n        leftchannel = [];\n        rightchannel = [];\n        recordingLength = 0;\n        isAudioProcessStarted = false;\n        recording = false;\n        isPaused = false;\n        context = null;\n\n        self.leftchannel = leftchannel;\n        self.rightchannel = rightchannel;\n        self.numberOfAudioChannels = numberOfAudioChannels;\n        self.desiredSampRate = desiredSampRate;\n        self.sampleRate = sampleRate;\n        self.recordingLength = recordingLength;\n\n        intervalsBasedBuffers = {\n            left: [],\n            right: [],\n            recordingLength: 0\n        };\n    }\n\n    function clearRecordedDataCB() {\n        if (jsAudioNode) {\n            jsAudioNode.onaudioprocess = null;\n            jsAudioNode.disconnect();\n            jsAudioNode = null;\n        }\n\n        if (audioInput) {\n            audioInput.disconnect();\n            audioInput = null;\n        }\n\n        resetVariables();\n    }\n\n    // for debugging\n    this.name = 'StereoAudioRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var isAudioProcessStarted = false;\n\n    function onAudioProcessDataAvailable(e) {\n        if (isPaused) {\n            return;\n        }\n\n        if (isMediaStreamActive() === false) {\n            if (!config.disableLogs) {\n                console.log('MediaStream seems stopped.');\n            }\n            jsAudioNode.disconnect();\n            recording = false;\n        }\n\n        if (!recording) {\n            if (audioInput) {\n                audioInput.disconnect();\n                audioInput = null;\n            }\n            return;\n        }\n\n        /**\n         * This method is called on \"onaudioprocess\" event's first invocation.\n         * @method {function} onAudioProcessStarted\n         * @memberof StereoAudioRecorder\n         * @example\n         * recorder.onAudioProcessStarted: function() { };\n         */\n        if (!isAudioProcessStarted) {\n            isAudioProcessStarted = true;\n            if (config.onAudioProcessStarted) {\n                config.onAudioProcessStarted();\n            }\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        }\n\n        var left = e.inputBuffer.getChannelData(0);\n\n        // we clone the samples\n        var chLeft = new Float32Array(left);\n        leftchannel.push(chLeft);\n\n        if (numberOfAudioChannels === 2) {\n            var right = e.inputBuffer.getChannelData(1);\n            var chRight = new Float32Array(right);\n            rightchannel.push(chRight);\n        }\n\n        recordingLength += bufferSize;\n\n        // export raw PCM\n        self.recordingLength = recordingLength;\n\n        if (typeof config.timeSlice !== 'undefined') {\n            intervalsBasedBuffers.recordingLength += bufferSize;\n            intervalsBasedBuffers.left.push(chLeft);\n\n            if (numberOfAudioChannels === 2) {\n                intervalsBasedBuffers.right.push(chRight);\n            }\n        }\n    }\n\n    jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n\n    // to prevent self audio to be connected with speakers\n    if (context.createMediaStreamDestination) {\n        jsAudioNode.connect(context.createMediaStreamDestination());\n    } else {\n        jsAudioNode.connect(context.destination);\n    }\n\n    // export raw PCM\n    this.leftchannel = leftchannel;\n    this.rightchannel = rightchannel;\n    this.numberOfAudioChannels = numberOfAudioChannels;\n    this.desiredSampRate = desiredSampRate;\n    this.sampleRate = sampleRate;\n    self.recordingLength = recordingLength;\n\n    // helper for intervals based blobs\n    var intervalsBasedBuffers = {\n        left: [],\n        right: [],\n        recordingLength: 0\n    };\n\n    // this looper is used to support intervals based blobs (via timeSlice+ondataavailable)\n    function looper() {\n        if (!recording || typeof config.ondataavailable !== 'function' || typeof config.timeSlice === 'undefined') {\n            return;\n        }\n\n        if (intervalsBasedBuffers.left.length) {\n            mergeLeftRightBuffers({\n                desiredSampRate: desiredSampRate,\n                sampleRate: sampleRate,\n                numberOfAudioChannels: numberOfAudioChannels,\n                internalInterleavedLength: intervalsBasedBuffers.recordingLength,\n                leftBuffers: intervalsBasedBuffers.left,\n                rightBuffers: numberOfAudioChannels === 1 ? [] : intervalsBasedBuffers.right\n            }, function(buffer, view) {\n                var blob = new Blob([view], {\n                    type: 'audio/wav'\n                });\n                config.ondataavailable(blob);\n\n                setTimeout(looper, config.timeSlice);\n            });\n\n            intervalsBasedBuffers = {\n                left: [],\n                right: [],\n                recordingLength: 0\n            };\n        } else {\n            setTimeout(looper, config.timeSlice);\n        }\n    }\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n}\n\n// _________________\n// CanvasRecorder.js\n\n/**\n * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.\n * @summary HTML2Canvas recording into video WebM.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef CanvasRecorder\n * @class\n * @example\n * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.\n * @param {object} config - {disableLogs:true, initCallback: function}\n */\n\nfunction CanvasRecorder(htmlElement, config) {\n    if (typeof html2canvas === 'undefined') {\n        throw 'Please link: https://cdn.webrtc-experiment.com/screenshot.js';\n    }\n\n    config = config || {};\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    // via DetectRTC.js\n    var isCanvasSupportsStreamCapturing = false;\n    ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\n        if (item in document.createElement('canvas')) {\n            isCanvasSupportsStreamCapturing = true;\n        }\n    });\n\n    var _isChrome = (!!window.webkitRTCPeerConnection || !!window.webkitGetUserMedia) && !!window.chrome;\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (_isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    if (_isChrome && chromeVersion < 52) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    if (config.useWhammyRecorder) {\n        isCanvasSupportsStreamCapturing = false;\n    }\n\n    var globalCanvas, mediaStreamRecorder;\n\n    if (isCanvasSupportsStreamCapturing) {\n        if (!config.disableLogs) {\n            console.log('Your browser supports both MediRecorder API and canvas.captureStream!');\n        }\n\n        if (htmlElement instanceof HTMLCanvasElement) {\n            globalCanvas = htmlElement;\n        } else if (htmlElement instanceof CanvasRenderingContext2D) {\n            globalCanvas = htmlElement.canvas;\n        } else {\n            throw 'Please pass either HTMLCanvasElement or CanvasRenderingContext2D.';\n        }\n    } else if (!!navigator.mozGetUserMedia) {\n        if (!config.disableLogs) {\n            console.error('Canvas recording is NOT supported in Firefox.');\n        }\n    }\n\n    var isRecording;\n\n    /**\n     * This method records Canvas.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        isRecording = true;\n\n        if (isCanvasSupportsStreamCapturing && !config.useWhammyRecorder) {\n            // CanvasCaptureMediaStream\n            var canvasMediaStream;\n            if ('captureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.captureStream(25); // 25 FPS\n            } else if ('mozCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.mozCaptureStream(25);\n            } else if ('webkitCaptureStream' in globalCanvas) {\n                canvasMediaStream = globalCanvas.webkitCaptureStream(25);\n            }\n\n            try {\n                var mdStream = new MediaStream();\n                mdStream.addTrack(getTracks(canvasMediaStream, 'video')[0]);\n                canvasMediaStream = mdStream;\n            } catch (e) {}\n\n            if (!canvasMediaStream) {\n                throw 'captureStream API are NOT available.';\n            }\n\n            // Note: Jan 18, 2016 status is that, \n            // Firefox MediaRecorder API can't record CanvasCaptureMediaStream object.\n            mediaStreamRecorder = new MediaStreamRecorder(canvasMediaStream, {\n                mimeType: config.mimeType || 'video/webm'\n            });\n            mediaStreamRecorder.record();\n        } else {\n            whammy.frames = [];\n            lastTime = new Date().getTime();\n            drawCanvasFrame();\n        }\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    this.getWebPImages = function(callback) {\n        if (htmlElement.nodeName.toLowerCase() !== 'canvas') {\n            callback();\n            return;\n        }\n\n        var framesLength = whammy.frames.length;\n        whammy.frames.forEach(function(frame, idx) {\n            var framesRemaining = framesLength - idx;\n            if (!config.disableLogs) {\n                console.log(framesRemaining + '/' + framesLength + ' frames remaining');\n            }\n\n            if (config.onEncodingCallback) {\n                config.onEncodingCallback(framesRemaining, framesLength);\n            }\n\n            var webp = frame.image.toDataURL('image/webp', 1);\n            whammy.frames[idx].image = webp;\n        });\n\n        if (!config.disableLogs) {\n            console.log('Generating WebM');\n        }\n\n        callback();\n    };\n\n    /**\n     * This method stops recording Canvas.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        isRecording = false;\n\n        var that = this;\n\n        if (isCanvasSupportsStreamCapturing && mediaStreamRecorder) {\n            mediaStreamRecorder.stop(callback);\n            return;\n        }\n\n        this.getWebPImages(function() {\n            /**\n             * @property {Blob} blob - Recorded frames in video/webm blob.\n             * @memberof CanvasRecorder\n             * @example\n             * recorder.stop(function() {\n             *     var blob = recorder.blob;\n             * });\n             */\n            whammy.compile(function(blob) {\n                if (!config.disableLogs) {\n                    console.log('Recording finished!');\n                }\n\n                that.blob = blob;\n\n                if (that.blob.forEach) {\n                    that.blob = new Blob([], {\n                        type: 'video/webm'\n                    });\n                }\n\n                if (callback) {\n                    callback(that.blob);\n                }\n\n                whammy.frames = [];\n            });\n        });\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.pause();\n            return;\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (mediaStreamRecorder instanceof MediaStreamRecorder) {\n            mediaStreamRecorder.resume();\n            return;\n        }\n\n        if (!isRecording) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof CanvasRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (isRecording) {\n            this.stop(clearRecordedDataCB);\n        }\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        whammy.frames = [];\n        isRecording = false;\n        isPausedRecording = false;\n    }\n\n    // for debugging\n    this.name = 'CanvasRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    function cloneCanvas() {\n        //create a new canvas\n        var newCanvas = document.createElement('canvas');\n        var context = newCanvas.getContext('2d');\n\n        //set dimensions\n        newCanvas.width = htmlElement.width;\n        newCanvas.height = htmlElement.height;\n\n        //apply the old canvas to the new one\n        context.drawImage(htmlElement, 0, 0);\n\n        //return the new canvas\n        return newCanvas;\n    }\n\n    function drawCanvasFrame() {\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawCanvasFrame, 500);\n        }\n\n        if (htmlElement.nodeName.toLowerCase() === 'canvas') {\n            var duration = new Date().getTime() - lastTime;\n            // via #206, by Jack i.e. @Seymourr\n            lastTime = new Date().getTime();\n\n            whammy.frames.push({\n                image: cloneCanvas(),\n                duration: duration\n            });\n\n            if (isRecording) {\n                setTimeout(drawCanvasFrame, config.frameInterval);\n            }\n            return;\n        }\n\n        html2canvas(htmlElement, {\n            grabMouse: typeof config.showMousePointer === 'undefined' || config.showMousePointer,\n            onrendered: function(canvas) {\n                var duration = new Date().getTime() - lastTime;\n                if (!duration) {\n                    return setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n\n                // via #206, by Jack i.e. @Seymourr\n                lastTime = new Date().getTime();\n\n                whammy.frames.push({\n                    image: canvas.toDataURL('image/webp', 1),\n                    duration: duration\n                });\n\n                if (isRecording) {\n                    setTimeout(drawCanvasFrame, config.frameInterval);\n                }\n            }\n        });\n    }\n\n    var lastTime = new Date().getTime();\n\n    var whammy = new Whammy.Video(100);\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.CanvasRecorder = CanvasRecorder;\n}\n\n// _________________\n// WhammyRecorder.js\n\n/**\n * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.\n * @summary Video recording feature in Chrome.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WhammyRecorder\n * @class\n * @example\n * var recorder = new WhammyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n */\n\nfunction WhammyRecorder(mediaStream, config) {\n\n    config = config || {};\n\n    if (!config.frameInterval) {\n        config.frameInterval = 10;\n    }\n\n    if (!config.disableLogs) {\n        console.log('Using frames-interval:', config.frameInterval);\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (!config.width) {\n            config.width = 320;\n        }\n\n        if (!config.height) {\n            config.height = 240;\n        }\n\n        if (!config.video) {\n            config.video = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        if (!config.canvas) {\n            config.canvas = {\n                width: config.width,\n                height: config.height\n            };\n        }\n\n        canvas.width = config.canvas.width || 320;\n        canvas.height = config.canvas.height || 240;\n\n        context = canvas.getContext('2d');\n\n        // setting defaults\n        if (config.video && config.video instanceof HTMLVideoElement) {\n            video = config.video.cloneNode();\n\n            if (config.initCallback) {\n                config.initCallback();\n            }\n        } else {\n            video = document.createElement('video');\n\n            setSrcObject(mediaStream, video);\n\n            video.onloadedmetadata = function() { // \"onloadedmetadata\" may NOT work in FF?\n                if (config.initCallback) {\n                    config.initCallback();\n                }\n            };\n\n            video.width = config.video.width;\n            video.height = config.video.height;\n        }\n\n        video.muted = true;\n        video.play();\n\n        lastTime = new Date().getTime();\n        whammy = new Whammy.Video();\n\n        if (!config.disableLogs) {\n            console.log('canvas resolutions', canvas.width, '*', canvas.height);\n            console.log('video width/height', video.width || canvas.width, '*', video.height || canvas.height);\n        }\n\n        drawFrames(config.frameInterval);\n    };\n\n    /**\n     * Draw and push frames to Whammy\n     * @param {integer} frameInterval - set minimum interval (in milliseconds) between each time we push a frame to Whammy\n     */\n    function drawFrames(frameInterval) {\n        frameInterval = typeof frameInterval !== 'undefined' ? frameInterval : 10;\n\n        var duration = new Date().getTime() - lastTime;\n        if (!duration) {\n            return setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n\n        if (isPausedRecording) {\n            lastTime = new Date().getTime();\n            return setTimeout(drawFrames, 100);\n        }\n\n        // via #206, by Jack i.e. @Seymourr\n        lastTime = new Date().getTime();\n\n        if (video.paused) {\n            // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n            // Tweak for Android Chrome\n            video.play();\n        }\n\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        whammy.frames.push({\n            duration: duration,\n            image: canvas.toDataURL('image/webp')\n        });\n\n        if (!isStopDrawing) {\n            setTimeout(drawFrames, frameInterval, frameInterval);\n        }\n    }\n\n    function asyncLoop(o) {\n        var i = -1,\n            length = o.length;\n\n        (function loop() {\n            i++;\n            if (i === length) {\n                o.callback();\n                return;\n            }\n\n            // \"setTimeout\" added by Jim McLeod\n            setTimeout(function() {\n                o.functionToLoop(loop, i);\n            }, 1);\n        })();\n    }\n\n\n    /**\n     * remove black frames from the beginning to the specified frame\n     * @param {Array} _frames - array of frames to be checked\n     * @param {number} _framesToCheck - number of frame until check will be executed (-1 - will drop all frames until frame not matched will be found)\n     * @param {number} _pixTolerance - 0 - very strict (only black pixel color) ; 1 - all\n     * @param {number} _frameTolerance - 0 - very strict (only black frame color) ; 1 - all\n     * @returns {Array} - array of frames\n     */\n    // pull#293 by @volodalexey\n    function dropBlackFrames(_frames, _framesToCheck, _pixTolerance, _frameTolerance, callback) {\n        var localCanvas = document.createElement('canvas');\n        localCanvas.width = canvas.width;\n        localCanvas.height = canvas.height;\n        var context2d = localCanvas.getContext('2d');\n        var resultFrames = [];\n\n        var checkUntilNotBlack = _framesToCheck === -1;\n        var endCheckFrame = (_framesToCheck && _framesToCheck > 0 && _framesToCheck <= _frames.length) ?\n            _framesToCheck : _frames.length;\n        var sampleColor = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var maxColorDifference = Math.sqrt(\n            Math.pow(255, 2) +\n            Math.pow(255, 2) +\n            Math.pow(255, 2)\n        );\n        var pixTolerance = _pixTolerance && _pixTolerance >= 0 && _pixTolerance <= 1 ? _pixTolerance : 0;\n        var frameTolerance = _frameTolerance && _frameTolerance >= 0 && _frameTolerance <= 1 ? _frameTolerance : 0;\n        var doNotCheckNext = false;\n\n        asyncLoop({\n            length: endCheckFrame,\n            functionToLoop: function(loop, f) {\n                var matchPixCount, endPixCheck, maxPixCount;\n\n                var finishImage = function() {\n                    if (!doNotCheckNext && maxPixCount - matchPixCount <= maxPixCount * frameTolerance) {\n                        // console.log('removed black frame : ' + f + ' ; frame duration ' + _frames[f].duration);\n                    } else {\n                        // console.log('frame is passed : ' + f);\n                        if (checkUntilNotBlack) {\n                            doNotCheckNext = true;\n                        }\n                        resultFrames.push(_frames[f]);\n                    }\n                    loop();\n                };\n\n                if (!doNotCheckNext) {\n                    var image = new Image();\n                    image.onload = function() {\n                        context2d.drawImage(image, 0, 0, canvas.width, canvas.height);\n                        var imageData = context2d.getImageData(0, 0, canvas.width, canvas.height);\n                        matchPixCount = 0;\n                        endPixCheck = imageData.data.length;\n                        maxPixCount = imageData.data.length / 4;\n\n                        for (var pix = 0; pix < endPixCheck; pix += 4) {\n                            var currentColor = {\n                                r: imageData.data[pix],\n                                g: imageData.data[pix + 1],\n                                b: imageData.data[pix + 2]\n                            };\n                            var colorDifference = Math.sqrt(\n                                Math.pow(currentColor.r - sampleColor.r, 2) +\n                                Math.pow(currentColor.g - sampleColor.g, 2) +\n                                Math.pow(currentColor.b - sampleColor.b, 2)\n                            );\n                            // difference in color it is difference in color vectors (r1,g1,b1) <=> (r2,g2,b2)\n                            if (colorDifference <= maxColorDifference * pixTolerance) {\n                                matchPixCount++;\n                            }\n                        }\n                        finishImage();\n                    };\n                    image.src = _frames[f].image;\n                } else {\n                    finishImage();\n                }\n            },\n            callback: function() {\n                resultFrames = resultFrames.concat(_frames.slice(endCheckFrame));\n\n                if (resultFrames.length <= 0) {\n                    // at least one last frame should be available for next manipulation\n                    // if total duration of all frames will be < 1000 than ffmpeg doesn't work well...\n                    resultFrames.push(_frames[_frames.length - 1]);\n                }\n                callback(resultFrames);\n            }\n        });\n    }\n\n    var isStopDrawing = false;\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        isStopDrawing = true;\n\n        var _this = this;\n        // analyse of all frames takes some time!\n        setTimeout(function() {\n            // e.g. dropBlackFrames(frames, 10, 1, 1) - will cut all 10 frames\n            // e.g. dropBlackFrames(frames, 10, 0.5, 0.5) - will analyse 10 frames\n            // e.g. dropBlackFrames(frames, 10) === dropBlackFrames(frames, 10, 0, 0) - will analyse 10 frames with strict black color\n            dropBlackFrames(whammy.frames, -1, null, null, function(frames) {\n                whammy.frames = frames;\n\n                // to display advertisement images!\n                if (config.advertisement && config.advertisement.length) {\n                    whammy.frames = config.advertisement.concat(whammy.frames);\n                }\n\n                /**\n                 * @property {Blob} blob - Recorded frames in video/webm blob.\n                 * @memberof WhammyRecorder\n                 * @example\n                 * recorder.stop(function() {\n                 *     var blob = recorder.blob;\n                 * });\n                 */\n                whammy.compile(function(blob) {\n                    _this.blob = blob;\n\n                    if (_this.blob.forEach) {\n                        _this.blob = new Blob([], {\n                            type: 'video/webm'\n                        });\n                    }\n\n                    if (callback) {\n                        callback(_this.blob);\n                    }\n                });\n            });\n        }, 10);\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n\n        if (isStopDrawing) {\n            this.record();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WhammyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (!isStopDrawing) {\n            this.stop(clearRecordedDataCB);\n        }\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        whammy.frames = [];\n        isStopDrawing = true;\n        isPausedRecording = false;\n    }\n\n    // for debugging\n    this.name = 'WhammyRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    var video;\n    var lastTime;\n    var whammy;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WhammyRecorder = WhammyRecorder;\n}\n\n// https://github.com/antimatter15/whammy/blob/master/LICENSE\n// _________\n// Whammy.js\n\n// todo: Firefox now supports webp for webm containers!\n// their MediaRecorder implementation works well!\n// should we provide an option to record via Whammy.js or MediaRecorder API is a better solution?\n\n/**\n * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}\n * @summary A real time javascript webm encoder based on a canvas hack.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef Whammy\n * @class\n * @example\n * var recorder = new Whammy().Video(15);\n * recorder.add(context || canvas || dataURL);\n * var output = recorder.compile();\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\nvar Whammy = (function() {\n    // a more abstract-ish API\n\n    function WhammyVideo(duration) {\n        this.frames = [];\n        this.duration = duration || 1;\n        this.quality = 0.8;\n    }\n\n    /**\n     * Pass Canvas or Context or image/webp(string) to {@link Whammy} encoder.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.add(canvas || context || 'image/webp');\n     * @param {string} frame - Canvas || Context || image/webp\n     * @param {number} duration - Stick a duration (in milliseconds)\n     */\n    WhammyVideo.prototype.add = function(frame, duration) {\n        if ('canvas' in frame) { //CanvasRenderingContext2D\n            frame = frame.canvas;\n        }\n\n        if ('toDataURL' in frame) {\n            frame = frame.toDataURL('image/webp', this.quality);\n        }\n\n        if (!(/^data:image\\/webp;base64,/ig).test(frame)) {\n            throw 'Input must be formatted properly as a base64 encoded DataURI of type image/webp';\n        }\n        this.frames.push({\n            image: frame,\n            duration: duration || this.duration\n        });\n    };\n\n    function processInWebWorker(_function) {\n        var blob = URL.createObjectURL(new Blob([_function.toString(),\n            'this.onmessage =  function (eee) {' + _function.name + '(eee.data);}'\n        ], {\n            type: 'application/javascript'\n        }));\n\n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n\n    function whammyInWebWorker(frames) {\n        function ArrayToWebM(frames) {\n            var info = checkFrames(frames);\n            if (!info) {\n                return [];\n            }\n\n            var clusterMaxDuration = 30000;\n\n            var EBML = [{\n                'id': 0x1a45dfa3, // EBML\n                'data': [{\n                    'data': 1,\n                    'id': 0x4286 // EBMLVersion\n                }, {\n                    'data': 1,\n                    'id': 0x42f7 // EBMLReadVersion\n                }, {\n                    'data': 4,\n                    'id': 0x42f2 // EBMLMaxIDLength\n                }, {\n                    'data': 8,\n                    'id': 0x42f3 // EBMLMaxSizeLength\n                }, {\n                    'data': 'webm',\n                    'id': 0x4282 // DocType\n                }, {\n                    'data': 2,\n                    'id': 0x4287 // DocTypeVersion\n                }, {\n                    'data': 2,\n                    'id': 0x4285 // DocTypeReadVersion\n                }]\n            }, {\n                'id': 0x18538067, // Segment\n                'data': [{\n                    'id': 0x1549a966, // Info\n                    'data': [{\n                        'data': 1e6, //do things in millisecs (num of nanosecs for duration scale)\n                        'id': 0x2ad7b1 // TimecodeScale\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x4d80 // MuxingApp\n                    }, {\n                        'data': 'whammy',\n                        'id': 0x5741 // WritingApp\n                    }, {\n                        'data': doubleToString(info.duration),\n                        'id': 0x4489 // Duration\n                    }]\n                }, {\n                    'id': 0x1654ae6b, // Tracks\n                    'data': [{\n                        'id': 0xae, // TrackEntry\n                        'data': [{\n                            'data': 1,\n                            'id': 0xd7 // TrackNumber\n                        }, {\n                            'data': 1,\n                            'id': 0x73c5 // TrackUID\n                        }, {\n                            'data': 0,\n                            'id': 0x9c // FlagLacing\n                        }, {\n                            'data': 'und',\n                            'id': 0x22b59c // Language\n                        }, {\n                            'data': 'V_VP8',\n                            'id': 0x86 // CodecID\n                        }, {\n                            'data': 'VP8',\n                            'id': 0x258688 // CodecName\n                        }, {\n                            'data': 1,\n                            'id': 0x83 // TrackType\n                        }, {\n                            'id': 0xe0, // Video\n                            'data': [{\n                                'data': info.width,\n                                'id': 0xb0 // PixelWidth\n                            }, {\n                                'data': info.height,\n                                'id': 0xba // PixelHeight\n                            }]\n                        }]\n                    }]\n                }]\n            }];\n\n            //Generate clusters (max duration)\n            var frameNumber = 0;\n            var clusterTimecode = 0;\n            while (frameNumber < frames.length) {\n\n                var clusterFrames = [];\n                var clusterDuration = 0;\n                do {\n                    clusterFrames.push(frames[frameNumber]);\n                    clusterDuration += frames[frameNumber].duration;\n                    frameNumber++;\n                } while (frameNumber < frames.length && clusterDuration < clusterMaxDuration);\n\n                var clusterCounter = 0;\n                var cluster = {\n                    'id': 0x1f43b675, // Cluster\n                    'data': getClusterData(clusterTimecode, clusterCounter, clusterFrames)\n                }; //Add cluster to segment\n                EBML[1].data.push(cluster);\n                clusterTimecode += clusterDuration;\n            }\n\n            return generateEBML(EBML);\n        }\n\n        function getClusterData(clusterTimecode, clusterCounter, clusterFrames) {\n            return [{\n                'data': clusterTimecode,\n                'id': 0xe7 // Timecode\n            }].concat(clusterFrames.map(function(webp) {\n                var block = makeSimpleBlock({\n                    discardable: 0,\n                    frame: webp.data.slice(4),\n                    invisible: 0,\n                    keyframe: 1,\n                    lacing: 0,\n                    trackNum: 1,\n                    timecode: Math.round(clusterCounter)\n                });\n                clusterCounter += webp.duration;\n                return {\n                    data: block,\n                    id: 0xa3\n                };\n            }));\n        }\n\n        // sums the lengths of all the frames and gets the duration\n\n        function checkFrames(frames) {\n            if (!frames[0]) {\n                postMessage({\n                    error: 'Something went wrong. Maybe WebP format is not supported in the current browser.'\n                });\n                return;\n            }\n\n            var width = frames[0].width,\n                height = frames[0].height,\n                duration = frames[0].duration;\n\n            for (var i = 1; i < frames.length; i++) {\n                duration += frames[i].duration;\n            }\n            return {\n                duration: duration,\n                width: width,\n                height: height\n            };\n        }\n\n        function numToBuffer(num) {\n            var parts = [];\n            while (num > 0) {\n                parts.push(num & 0xff);\n                num = num >> 8;\n            }\n            return new Uint8Array(parts.reverse());\n        }\n\n        function strToBuffer(str) {\n            return new Uint8Array(str.split('').map(function(e) {\n                return e.charCodeAt(0);\n            }));\n        }\n\n        function bitsToBuffer(bits) {\n            var data = [];\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data.push(parseInt(bits.substr(i, 8), 2));\n            }\n            return new Uint8Array(data);\n        }\n\n        function generateEBML(json) {\n            var ebml = [];\n            for (var i = 0; i < json.length; i++) {\n                var data = json[i].data;\n\n                if (typeof data === 'object') {\n                    data = generateEBML(data);\n                }\n\n                if (typeof data === 'number') {\n                    data = bitsToBuffer(data.toString(2));\n                }\n\n                if (typeof data === 'string') {\n                    data = strToBuffer(data);\n                }\n\n                var len = data.size || data.byteLength || data.length;\n                var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n                var sizeToString = len.toString(2);\n                var padded = (new Array((zeroes * 7 + 7 + 1) - sizeToString.length)).join('0') + sizeToString;\n                var size = (new Array(zeroes)).join('0') + '1' + padded;\n\n                ebml.push(numToBuffer(json[i].id));\n                ebml.push(bitsToBuffer(size));\n                ebml.push(data);\n            }\n\n            return new Blob(ebml, {\n                type: 'video/webm'\n            });\n        }\n\n        function toBinStrOld(bits) {\n            var data = '';\n            var pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n            bits = pad + bits;\n            for (var i = 0; i < bits.length; i += 8) {\n                data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n            }\n            return data;\n        }\n\n        function makeSimpleBlock(data) {\n            var flags = 0;\n\n            if (data.keyframe) {\n                flags |= 128;\n            }\n\n            if (data.invisible) {\n                flags |= 8;\n            }\n\n            if (data.lacing) {\n                flags |= (data.lacing << 1);\n            }\n\n            if (data.discardable) {\n                flags |= 1;\n            }\n\n            if (data.trackNum > 127) {\n                throw 'TrackNumber > 127 not supported';\n            }\n\n            var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e) {\n                return String.fromCharCode(e);\n            }).join('') + data.frame;\n\n            return out;\n        }\n\n        function parseWebP(riff) {\n            var VP8 = riff.RIFF[0].WEBP[0];\n\n            var frameStart = VP8.indexOf('\\x9d\\x01\\x2a'); // A VP8 keyframe starts with the 0x9d012a header\n            for (var i = 0, c = []; i < 4; i++) {\n                c[i] = VP8.charCodeAt(frameStart + 3 + i);\n            }\n\n            var width, height, tmp;\n\n            //the code below is literally copied verbatim from the bitstream spec\n            tmp = (c[1] << 8) | c[0];\n            width = tmp & 0x3FFF;\n            tmp = (c[3] << 8) | c[2];\n            height = tmp & 0x3FFF;\n            return {\n                width: width,\n                height: height,\n                data: VP8,\n                riff: riff\n            };\n        }\n\n        function getStrLength(string, offset) {\n            return parseInt(string.substr(offset + 4, 4).split('').map(function(i) {\n                var unpadded = i.charCodeAt(0).toString(2);\n                return (new Array(8 - unpadded.length + 1)).join('0') + unpadded;\n            }).join(''), 2);\n        }\n\n        function parseRIFF(string) {\n            var offset = 0;\n            var chunks = {};\n\n            while (offset < string.length) {\n                var id = string.substr(offset, 4);\n                var len = getStrLength(string, offset);\n                var data = string.substr(offset + 4 + 4, len);\n                offset += 4 + 4 + len;\n                chunks[id] = chunks[id] || [];\n\n                if (id === 'RIFF' || id === 'LIST') {\n                    chunks[id].push(parseRIFF(data));\n                } else {\n                    chunks[id].push(data);\n                }\n            }\n            return chunks;\n        }\n\n        function doubleToString(num) {\n            return [].slice.call(\n                new Uint8Array((new Float64Array([num])).buffer), 0).map(function(e) {\n                return String.fromCharCode(e);\n            }).reverse().join('');\n        }\n\n        var webm = new ArrayToWebM(frames.map(function(frame) {\n            var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n            webp.duration = frame.duration;\n            return webp;\n        }));\n\n        postMessage(webm);\n    }\n\n    /**\n     * Encodes frames in WebM container. It uses WebWorkinvoke to invoke 'ArrayToWebM' method.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof Whammy\n     * @example\n     * recorder = new Whammy().Video(0.8, 100);\n     * recorder.compile(function(blob) {\n     *    // blob.size - blob.type\n     * });\n     */\n    WhammyVideo.prototype.compile = function(callback) {\n        var webWorker = processInWebWorker(whammyInWebWorker);\n\n        webWorker.onmessage = function(event) {\n            if (event.data.error) {\n                console.error(event.data.error);\n                return;\n            }\n            callback(event.data);\n        };\n\n        webWorker.postMessage(this.frames);\n    };\n\n    return {\n        /**\n         * A more abstract-ish API.\n         * @method\n         * @memberof Whammy\n         * @example\n         * recorder = new Whammy().Video(0.8, 100);\n         * @param {?number} speed - 0.8\n         * @param {?number} quality - 100\n         */\n        Video: WhammyVideo\n    };\n})();\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.Whammy = Whammy;\n}\n\n// ______________ (indexed-db)\n// DiskStorage.js\n\n/**\n * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.\n * @summary Writing blobs into IndexedDB.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @example\n * DiskStorage.Store({\n *     audioBlob: yourAudioBlob,\n *     videoBlob: yourVideoBlob,\n *     gifBlob  : yourGifBlob\n * });\n * DiskStorage.Fetch(function(dataURL, type) {\n *     if(type === 'audioBlob') { }\n *     if(type === 'videoBlob') { }\n *     if(type === 'gifBlob')   { }\n * });\n * // DiskStorage.dataStoreName = 'recordRTC';\n * // DiskStorage.onError = function(error) { };\n * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n * @property {function} Fetch - This method fetches stored blobs from IndexedDB.\n * @property {function} Store - This method stores blobs in IndexedDB.\n * @property {function} onError - This function is invoked for any known/unknown error.\n * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n */\n\n\nvar DiskStorage = {\n    /**\n     * This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.init();\n     */\n    init: function() {\n        var self = this;\n\n        if (typeof indexedDB === 'undefined' || typeof indexedDB.open === 'undefined') {\n            console.error('IndexedDB API are not available in this browser.');\n            return;\n        }\n\n        var dbVersion = 1;\n        var dbName = this.dbName || location.href.replace(/\\/|:|#|%|\\.|\\[|\\]/g, ''),\n            db;\n        var request = indexedDB.open(dbName, dbVersion);\n\n        function createObjectStore(dataBase) {\n            dataBase.createObjectStore(self.dataStoreName);\n        }\n\n        function putInDB() {\n            var transaction = db.transaction([self.dataStoreName], 'readwrite');\n\n            if (self.videoBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.videoBlob, 'videoBlob');\n            }\n\n            if (self.gifBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.gifBlob, 'gifBlob');\n            }\n\n            if (self.audioBlob) {\n                transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n            }\n\n            function getFromStore(portionName) {\n                transaction.objectStore(self.dataStoreName).get(portionName).onsuccess = function(event) {\n                    if (self.callback) {\n                        self.callback(event.target.result, portionName);\n                    }\n                };\n            }\n\n            getFromStore('audioBlob');\n            getFromStore('videoBlob');\n            getFromStore('gifBlob');\n        }\n\n        request.onerror = self.onError;\n\n        request.onsuccess = function() {\n            db = request.result;\n            db.onerror = self.onError;\n\n            if (db.setVersion) {\n                if (db.version !== dbVersion) {\n                    var setVersion = db.setVersion(dbVersion);\n                    setVersion.onsuccess = function() {\n                        createObjectStore(db);\n                        putInDB();\n                    };\n                } else {\n                    putInDB();\n                }\n            } else {\n                putInDB();\n            }\n        };\n        request.onupgradeneeded = function(event) {\n            createObjectStore(event.target.result);\n        };\n    },\n    /**\n     * This method fetches stored blobs from IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Fetch(function(dataURL, type) {\n     *     if(type === 'audioBlob') { }\n     *     if(type === 'videoBlob') { }\n     *     if(type === 'gifBlob')   { }\n     * });\n     */\n    Fetch: function(callback) {\n        this.callback = callback;\n        this.init();\n\n        return this;\n    },\n    /**\n     * This method stores blobs in IndexedDB.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.Store({\n     *     audioBlob: yourAudioBlob,\n     *     videoBlob: yourVideoBlob,\n     *     gifBlob  : yourGifBlob\n     * });\n     */\n    Store: function(config) {\n        this.audioBlob = config.audioBlob;\n        this.videoBlob = config.videoBlob;\n        this.gifBlob = config.gifBlob;\n\n        this.init();\n\n        return this;\n    },\n    /**\n     * This function is invoked for any known/unknown error.\n     * @method\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.onError = function(error){\n     *     alerot( JSON.stringify(error) );\n     * };\n     */\n    onError: function(error) {\n        console.error(JSON.stringify(error, null, '\\t'));\n    },\n\n    /**\n     * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.\n     * @memberof DiskStorage\n     * @internal\n     * @example\n     * DiskStorage.dataStoreName = 'recordRTC';\n     */\n    dataStoreName: 'recordRTC',\n    dbName: null\n};\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.DiskStorage = DiskStorage;\n}\n\n// ______________\n// GifRecorder.js\n\n/**\n * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef GifRecorder\n * @class\n * @example\n * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });\n * recorder.record();\n * recorder.stop(function(blob) {\n *     img.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.\n * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}\n */\n\nfunction GifRecorder(mediaStream, config) {\n    if (typeof GIFEncoder === 'undefined') {\n        var script = document.createElement('script');\n        script.src = 'https://cdn.webrtc-experiment.com/gif-recorder.js';\n        (document.body || document.documentElement).appendChild(script);\n    }\n\n    config = config || {};\n\n    var isHTMLObject = mediaStream instanceof CanvasRenderingContext2D || mediaStream instanceof HTMLCanvasElement;\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        if (typeof GIFEncoder === 'undefined') {\n            setTimeout(self.record, 1000);\n            return;\n        }\n\n        if (!isLoadedMetaData) {\n            setTimeout(self.record, 1000);\n            return;\n        }\n\n        if (!isHTMLObject) {\n            if (!config.width) {\n                config.width = video.offsetWidth || 320;\n            }\n\n            if (!config.height) {\n                config.height = video.offsetHeight || 240;\n            }\n\n            if (!config.video) {\n                config.video = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            if (!config.canvas) {\n                config.canvas = {\n                    width: config.width,\n                    height: config.height\n                };\n            }\n\n            canvas.width = config.canvas.width || 320;\n            canvas.height = config.canvas.height || 240;\n\n            video.width = config.video.width || 320;\n            video.height = config.video.height || 240;\n        }\n\n        // external library to record as GIF images\n        gifEncoder = new GIFEncoder();\n\n        // void setRepeat(int iter) \n        // Sets the number of times the set of GIF frames should be played. \n        // Default is 1; 0 means play indefinitely.\n        gifEncoder.setRepeat(0);\n\n        // void setFrameRate(Number fps) \n        // Sets frame rate in frames per second. \n        // Equivalent to setDelay(1000/fps).\n        // Using \"setDelay\" instead of \"setFrameRate\"\n        gifEncoder.setDelay(config.frameRate || 200);\n\n        // void setQuality(int quality) \n        // Sets quality of color quantization (conversion of images to the \n        // maximum 256 colors allowed by the GIF specification). \n        // Lower values (minimum = 1) produce better colors, \n        // but slow processing significantly. 10 is the default, \n        // and produces good color mapping at reasonable speeds. \n        // Values greater than 20 do not yield significant improvements in speed.\n        gifEncoder.setQuality(config.quality || 10);\n\n        // Boolean start() \n        // This writes the GIF Header and returns false if it fails.\n        gifEncoder.start();\n\n        if (typeof config.onGifRecordingStarted === 'function') {\n            config.onGifRecordingStarted();\n        }\n\n        startTime = Date.now();\n\n        function drawVideoFrame(time) {\n            if (self.clearedRecordedData === true) {\n                return;\n            }\n\n            if (isPausedRecording) {\n                return setTimeout(function() {\n                    drawVideoFrame(time);\n                }, 100);\n            }\n\n            lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n            if (typeof lastFrameTime === undefined) {\n                lastFrameTime = time;\n            }\n\n            // ~10 fps\n            if (time - lastFrameTime < 90) {\n                return;\n            }\n\n            if (!isHTMLObject && video.paused) {\n                // via: https://github.com/muaz-khan/WebRTC-Experiment/pull/316\n                // Tweak for Android Chrome\n                video.play();\n            }\n\n            if (!isHTMLObject) {\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n            }\n\n            if (config.onGifPreview) {\n                config.onGifPreview(canvas.toDataURL('image/png'));\n            }\n\n            gifEncoder.addFrame(context);\n            lastFrameTime = time;\n        }\n\n        lastAnimationFrame = requestAnimationFrame(drawVideoFrame);\n\n        if (config.initCallback) {\n            config.initCallback();\n        }\n    };\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     img.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        callback = callback || function() {};\n\n        if (lastAnimationFrame) {\n            cancelAnimationFrame(lastAnimationFrame);\n        }\n\n        endTime = Date.now();\n\n        /**\n         * @property {Blob} blob - The recorded blob object.\n         * @memberof GifRecorder\n         * @example\n         * recorder.stop(function(){\n         *     var blob = recorder.blob;\n         * });\n         */\n        this.blob = new Blob([new Uint8Array(gifEncoder.stream().bin)], {\n            type: 'image/gif'\n        });\n\n        callback(this.blob);\n\n        // bug: find a way to clear old recorded blobs\n        gifEncoder.stream().bin = [];\n    };\n\n    var isPausedRecording = false;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPausedRecording = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPausedRecording = false;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof GifRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        self.clearedRecordedData = true;\n        clearRecordedDataCB();\n    };\n\n    function clearRecordedDataCB() {\n        if (gifEncoder) {\n            gifEncoder.stream().bin = [];\n        }\n    }\n\n    // for debugging\n    this.name = 'GifRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    if (isHTMLObject) {\n        if (mediaStream instanceof CanvasRenderingContext2D) {\n            context = mediaStream;\n            canvas = context.canvas;\n        } else if (mediaStream instanceof HTMLCanvasElement) {\n            context = mediaStream.getContext('2d');\n            canvas = mediaStream;\n        }\n    }\n\n    var isLoadedMetaData = true;\n\n    if (!isHTMLObject) {\n        var video = document.createElement('video');\n        video.muted = true;\n        video.autoplay = true;\n\n        isLoadedMetaData = false;\n        video.onloadedmetadata = function() {\n            isLoadedMetaData = true;\n        };\n\n        setSrcObject(mediaStream, video);\n\n        video.play();\n    }\n\n    var lastAnimationFrame = null;\n    var startTime, endTime, lastFrameTime;\n\n    var gifEncoder;\n\n    var self = this;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.GifRecorder = GifRecorder;\n}\n\n// Last time updated: 2018-12-22 9:13:29 AM UTC\n\n// ________________________\n// MultiStreamsMixer v1.0.7\n\n// Open-Sourced: https://github.com/muaz-khan/MultiStreamsMixer\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\nfunction MultiStreamsMixer(arrayOfMediaStreams) {\n\n    // requires: chrome://flags/#enable-experimental-web-platform-features\n\n    var videos = [];\n    var isStopDrawingFrames = false;\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    canvas.style = 'opacity:0;position:absolute;z-index:-1;top: -100000000;left:-1000000000; margin-top:-1000000000;margin-left:-1000000000;';\n    (document.body || document.documentElement).appendChild(canvas);\n\n    this.disableLogs = false;\n    this.frameInterval = 10;\n\n    this.width = 360;\n    this.height = 240;\n\n    // use gain node to prevent echo\n    this.useGainNode = true;\n\n    var self = this;\n\n    // _____________________________\n    // Cross-Browser-Declarations.js\n\n    // WebAudio API representer\n    var AudioContext = window.AudioContext;\n\n    if (typeof AudioContext === 'undefined') {\n        if (typeof webkitAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = webkitAudioContext;\n        }\n\n        if (typeof mozAudioContext !== 'undefined') {\n            /*global AudioContext:true */\n            AudioContext = mozAudioContext;\n        }\n    }\n\n    /*jshint -W079 */\n    var URL = window.URL;\n\n    if (typeof URL === 'undefined' && typeof webkitURL !== 'undefined') {\n        /*global URL:true */\n        URL = webkitURL;\n    }\n\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n        if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.webkitGetUserMedia;\n        }\n\n        if (typeof navigator.mozGetUserMedia !== 'undefined') {\n            navigator.getUserMedia = navigator.mozGetUserMedia;\n        }\n    }\n\n    var MediaStream = window.MediaStream;\n\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n        MediaStream = webkitMediaStream;\n    }\n\n    /*global MediaStream:true */\n    if (typeof MediaStream !== 'undefined') {\n        // override \"stop\" method for all browsers\n        if (typeof MediaStream.prototype.stop === 'undefined') {\n            MediaStream.prototype.stop = function() {\n                this.getTracks().forEach(function(track) {\n                    track.stop();\n                });\n            };\n        }\n    }\n\n    var Storage = {};\n\n    if (typeof AudioContext !== 'undefined') {\n        Storage.AudioContext = AudioContext;\n    } else if (typeof webkitAudioContext !== 'undefined') {\n        Storage.AudioContext = webkitAudioContext;\n    }\n\n    function setSrcObject(stream, element) {\n        if ('srcObject' in element) {\n            element.srcObject = stream;\n        } else if ('mozSrcObject' in element) {\n            element.mozSrcObject = stream;\n        } else {\n            element.srcObject = stream;\n        }\n    }\n\n    this.startDrawingFrames = function() {\n        drawVideosToCanvas();\n    };\n\n    function drawVideosToCanvas() {\n        if (isStopDrawingFrames) {\n            return;\n        }\n\n        var videosLength = videos.length;\n\n        var fullcanvas = false;\n        var remaining = [];\n        videos.forEach(function(video) {\n            if (!video.stream) {\n                video.stream = {};\n            }\n\n            if (video.stream.fullcanvas) {\n                fullcanvas = video;\n            } else {\n                remaining.push(video);\n            }\n        });\n\n        if (fullcanvas) {\n            canvas.width = fullcanvas.stream.width;\n            canvas.height = fullcanvas.stream.height;\n        } else if (remaining.length) {\n            canvas.width = videosLength > 1 ? remaining[0].width * 2 : remaining[0].width;\n\n            var height = 1;\n            if (videosLength === 3 || videosLength === 4) {\n                height = 2;\n            }\n            if (videosLength === 5 || videosLength === 6) {\n                height = 3;\n            }\n            if (videosLength === 7 || videosLength === 8) {\n                height = 4;\n            }\n            if (videosLength === 9 || videosLength === 10) {\n                height = 5;\n            }\n            canvas.height = remaining[0].height * height;\n        } else {\n            canvas.width = self.width || 360;\n            canvas.height = self.height || 240;\n        }\n\n        if (fullcanvas && fullcanvas instanceof HTMLVideoElement) {\n            drawImage(fullcanvas);\n        }\n\n        remaining.forEach(function(video, idx) {\n            drawImage(video, idx);\n        });\n\n        setTimeout(drawVideosToCanvas, self.frameInterval);\n    }\n\n    function drawImage(video, idx) {\n        if (isStopDrawingFrames) {\n            return;\n        }\n\n        var x = 0;\n        var y = 0;\n        var width = video.width;\n        var height = video.height;\n\n        if (idx === 1) {\n            x = video.width;\n        }\n\n        if (idx === 2) {\n            y = video.height;\n        }\n\n        if (idx === 3) {\n            x = video.width;\n            y = video.height;\n        }\n\n        if (idx === 4) {\n            y = video.height * 2;\n        }\n\n        if (idx === 5) {\n            x = video.width;\n            y = video.height * 2;\n        }\n\n        if (idx === 6) {\n            y = video.height * 3;\n        }\n\n        if (idx === 7) {\n            x = video.width;\n            y = video.height * 3;\n        }\n\n        if (typeof video.stream.left !== 'undefined') {\n            x = video.stream.left;\n        }\n\n        if (typeof video.stream.top !== 'undefined') {\n            y = video.stream.top;\n        }\n\n        if (typeof video.stream.width !== 'undefined') {\n            width = video.stream.width;\n        }\n\n        if (typeof video.stream.height !== 'undefined') {\n            height = video.stream.height;\n        }\n\n        context.drawImage(video, x, y, width, height);\n\n        if (typeof video.stream.onRender === 'function') {\n            video.stream.onRender(context, x, y, width, height, idx);\n        }\n    }\n\n    function getMixedStream() {\n        isStopDrawingFrames = false;\n        var mixedVideoStream = getMixedVideoStream();\n\n        var mixedAudioStream = getMixedAudioStream();\n        if (mixedAudioStream) {\n            mixedAudioStream.getTracks().filter(function(t) {\n                return t.kind === 'audio';\n            }).forEach(function(track) {\n                mixedVideoStream.addTrack(track);\n            });\n        }\n\n        var fullcanvas;\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (stream.fullcanvas) {\n                fullcanvas = true;\n            }\n        });\n\n        return mixedVideoStream;\n    }\n\n    function getMixedVideoStream() {\n        resetVideoStreams();\n\n        var capturedStream;\n\n        if ('captureStream' in canvas) {\n            capturedStream = canvas.captureStream();\n        } else if ('mozCaptureStream' in canvas) {\n            capturedStream = canvas.mozCaptureStream();\n        } else if (!self.disableLogs) {\n            console.error('Upgrade to latest Chrome or otherwise enable this flag: chrome://flags/#enable-experimental-web-platform-features');\n        }\n\n        var videoStream = new MediaStream();\n\n        capturedStream.getTracks().filter(function(t) {\n            return t.kind === 'video';\n        }).forEach(function(track) {\n            videoStream.addTrack(track);\n        });\n\n        canvas.stream = videoStream;\n\n        return videoStream;\n    }\n\n    function getMixedAudioStream() {\n        // via: @pehrsons\n        if (!Storage.AudioContextConstructor) {\n            Storage.AudioContextConstructor = new Storage.AudioContext();\n        }\n\n        self.audioContext = Storage.AudioContextConstructor;\n\n        self.audioSources = [];\n\n        if (self.useGainNode === true) {\n            self.gainNode = self.audioContext.createGain();\n            self.gainNode.connect(self.audioContext.destination);\n            self.gainNode.gain.value = 0; // don't hear self\n        }\n\n        var audioTracksLength = 0;\n        arrayOfMediaStreams.forEach(function(stream) {\n            if (!stream.getTracks().filter(function(t) {\n                    return t.kind === 'audio';\n                }).length) {\n                return;\n            }\n\n            audioTracksLength++;\n\n            var audioSource = self.audioContext.createMediaStreamSource(stream);\n\n            if (self.useGainNode === true) {\n                audioSource.connect(self.gainNode);\n            }\n\n            self.audioSources.push(audioSource);\n        });\n\n        if (!audioTracksLength) {\n            return;\n        }\n\n        self.audioDestination = self.audioContext.createMediaStreamDestination();\n        self.audioSources.forEach(function(audioSource) {\n            audioSource.connect(self.audioDestination);\n        });\n        return self.audioDestination.stream;\n    }\n\n    function getVideo(stream) {\n        var video = document.createElement('video');\n\n        setSrcObject(stream, video);\n\n        video.muted = true;\n        video.volume = 0;\n\n        video.width = stream.width || self.width || 360;\n        video.height = stream.height || self.height || 240;\n\n        video.play();\n\n        return video;\n    }\n\n    this.appendStreams = function(streams) {\n        if (!streams) {\n            throw 'First parameter is required.';\n        }\n\n        if (!(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        arrayOfMediaStreams.concat(streams);\n\n        streams.forEach(function(stream) {\n            if (stream.getTracks().filter(function(t) {\n                    return t.kind === 'video';\n                }).length) {\n                var video = getVideo(stream);\n                video.stream = stream;\n                videos.push(video);\n            }\n\n            if (stream.getTracks().filter(function(t) {\n                    return t.kind === 'audio';\n                }).length && self.audioContext) {\n                var audioSource = self.audioContext.createMediaStreamSource(stream);\n                audioSource.connect(self.audioDestination);\n                self.audioSources.push(audioSource);\n            }\n        });\n    };\n\n    this.releaseStreams = function() {\n        videos = [];\n        isStopDrawingFrames = true;\n\n        if (self.gainNode) {\n            self.gainNode.disconnect();\n            self.gainNode = null;\n        }\n\n        if (self.audioSources.length) {\n            self.audioSources.forEach(function(source) {\n                source.disconnect();\n            });\n            self.audioSources = [];\n        }\n\n        if (self.audioDestination) {\n            self.audioDestination.disconnect();\n            self.audioDestination = null;\n        }\n\n        if (self.audioContext) {\n            self.audioContext.close();\n        }\n\n        self.audioContext = null;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (canvas.stream) {\n            canvas.stream.stop();\n            canvas.stream = null;\n        }\n    };\n\n    this.resetVideoStreams = function(streams) {\n        if (streams && !(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        resetVideoStreams(streams);\n    };\n\n    function resetVideoStreams(streams) {\n        videos = [];\n        streams = streams || arrayOfMediaStreams;\n\n        // via: @adrian-ber\n        streams.forEach(function(stream) {\n            if (!stream.getTracks().filter(function(t) {\n                    return t.kind === 'video';\n                }).length) {\n                return;\n            }\n\n            var video = getVideo(stream);\n            video.stream = stream;\n            videos.push(video);\n        });\n    }\n\n    // for debugging\n    this.name = 'MultiStreamsMixer';\n    this.toString = function() {\n        return this.name;\n    };\n\n    this.getMixedStream = getMixedStream;\n\n}\n\n// ______________________\n// MultiStreamRecorder.js\n\n/*\n * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n */\n\n/**\n * MultiStreamRecorder can record multiple videos in single container.\n * @summary Multi-videos recorder.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef MultiStreamRecorder\n * @class\n * @example\n * var options = {\n *     mimeType: 'video/webm'\n * }\n * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n *\n *     // or\n *     var blob = recorder.blob;\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStreams} mediaStreams - Array of MediaStreams.\n * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: \"video/webm\"}\n */\n\nfunction MultiStreamRecorder(arrayOfMediaStreams, options) {\n    arrayOfMediaStreams = arrayOfMediaStreams || [];\n    var self = this;\n\n    var mixer;\n    var mediaRecorder;\n\n    options = options || {\n        mimeType: 'video/webm',\n        video: {\n            width: 360,\n            height: 240\n        }\n    };\n\n    if (!options.frameInterval) {\n        options.frameInterval = 10;\n    }\n\n    if (!options.video) {\n        options.video = {};\n    }\n\n    if (!options.video.width) {\n        options.video.width = 360;\n    }\n\n    if (!options.video.height) {\n        options.video.height = 240;\n    }\n\n    /**\n     * This method records all MediaStreams.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        // github/muaz-khan/MultiStreamsMixer\n        mixer = new MultiStreamsMixer(arrayOfMediaStreams);\n\n        if (getAllVideoTracks().length) {\n            mixer.frameInterval = options.frameInterval || 10;\n            mixer.width = options.video.width || 360;\n            mixer.height = options.video.height || 240;\n            mixer.startDrawingFrames();\n        }\n\n        if (options.previewStream && typeof options.previewStream === 'function') {\n            options.previewStream(mixer.getMixedStream());\n        }\n\n        // record using MediaRecorder API\n        mediaRecorder = new MediaStreamRecorder(mixer.getMixedStream(), options);\n        mediaRecorder.record();\n    };\n\n    function getAllVideoTracks() {\n        var tracks = [];\n        arrayOfMediaStreams.forEach(function(stream) {\n            getTracks(stream, 'video').forEach(function(track) {\n                tracks.push(track);\n            });\n        });\n        return tracks;\n    }\n\n    /**\n     * This method stops recording MediaStream.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        if (!mediaRecorder) {\n            return;\n        }\n\n        mediaRecorder.stop(function(blob) {\n            self.blob = blob;\n\n            callback(blob);\n\n            self.clearRecordedData();\n        });\n    };\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        if (mediaRecorder) {\n            mediaRecorder.pause();\n        }\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        if (mediaRecorder) {\n            mediaRecorder.resume();\n        }\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        if (mediaRecorder) {\n            mediaRecorder.clearRecordedData();\n            mediaRecorder = null;\n        }\n\n        if (mixer) {\n            mixer.releaseStreams();\n            mixer = null;\n        }\n    };\n\n    /**\n     * Add extra media-streams to existing recordings.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.addStreams([newAudioStream, newVideoStream]);\n     */\n    this.addStreams = function(streams) {\n        if (!streams) {\n            throw 'First parameter is required.';\n        }\n\n        if (!(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        arrayOfMediaStreams.concat(streams);\n\n        if (!mediaRecorder || !mixer) {\n            return;\n        }\n\n        mixer.appendStreams(streams);\n    };\n\n    /**\n     * Reset videos during live recording. Replace old videos e.g. replace cameras with full-screen.\n     * @method\n     * @memberof MultiStreamRecorder\n     * @param {MediaStreams} mediaStreams - Array of MediaStreams\n     * @example\n     * recorder.resetVideoStreams([newVideo1, newVideo2]);\n     */\n    this.resetVideoStreams = function(streams) {\n        if (!mixer) {\n            return;\n        }\n\n        if (streams && !(streams instanceof Array)) {\n            streams = [streams];\n        }\n\n        mixer.resetVideoStreams(streams);\n    };\n\n    // for debugging\n    this.name = 'MultiStreamRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.MultiStreamRecorder = MultiStreamRecorder;\n}\n\n// _____________________\n// RecordRTC.promises.js\n\n/**\n * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}\n * @summary Promises for {@link RecordRTC}\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef RecordRTCPromisesHandler\n * @class\n * @example\n * var recorder = new RecordRTCPromisesHandler(mediaStream, options);\n * recorder.startRecording()\n *         .then(successCB)\n *         .catch(errorCB);\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\n * @requires {@link RecordRTC}\n */\n\nfunction RecordRTCPromisesHandler(mediaStream, options) {\n    if (!this) {\n        throw 'Use \"new RecordRTCPromisesHandler()\"';\n    }\n\n    if (typeof mediaStream === 'undefined') {\n        throw 'First argument \"MediaStream\" is required.';\n    }\n\n    var self = this;\n\n    /**\n     * @property {Blob} blob - Access/reach the native {@link RecordRTC} object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * var internal = recorder.recordRTC.getInternalRecorder();\n     * alert(internal instanceof MediaStreamRecorder);\n     */\n    self.recordRTC = new RecordRTC(mediaStream, options);\n\n    /**\n     * This method records MediaStream.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.startRecording()\n     *         .then(successCB)\n     *         .catch(errorCB);\n     */\n    this.startRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.startRecording();\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method stops the recording.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.stopRecording = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.stopRecording(function(url) {\n                    self.blob = self.recordRTC.getBlob();\n\n                    if (!self.blob || !self.blob.size) {\n                        reject('Empty blob.', self.blob);\n                        return;\n                    }\n\n                    resolve(url);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns data-url for the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     recorder.getDataURL().then(function(dataURL) {\n     *         window.open(dataURL);\n     *     }).catch(errorCB);;\n     * }).catch(errorCB);\n     */\n    this.getDataURL = function(callback) {\n        return new Promise(function(resolve, reject) {\n            try {\n                self.recordRTC.getDataURL(function(dataURL) {\n                    resolve(dataURL);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * This method returns the recorded blob.\n     * @method\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     recorder.getBlob().then(function(blob) {})\n     * }).catch(errorCB);\n     */\n    this.getBlob = function() {\n        return new Promise(function(resolve, reject) {\n            try {\n                resolve(self.recordRTC.getBlob());\n            } catch (e) {\n                reject(e);\n            }\n        });\n    };\n\n    /**\n     * @property {Blob} blob - Recorded data as \"Blob\" object.\n     * @memberof RecordRTCPromisesHandler\n     * @example\n     * recorder.stopRecording().then(function() {\n     *     var blob = recorder.getBlob();\n     * }).catch(errorCB);\n     */\n    this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.RecordRTCPromisesHandler = RecordRTCPromisesHandler;\n}\n\n// ______________________\n// WebAssemblyRecorder.js\n\n/**\n * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.\n * @summary Video recording feature in Chrome, Firefox and maybe Edge.\n * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n * @author {@link http://www.MuazKhan.com|Muaz Khan}\n * @typedef WebAssemblyRecorder\n * @class\n * @example\n * var recorder = new WebAssemblyRecorder(mediaStream);\n * recorder.record();\n * recorder.stop(function(blob) {\n *     video.src = URL.createObjectURL(blob);\n * });\n * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024}\n */\nfunction WebAssemblyRecorder(stream, config) {\n    // based on: github.com/GoogleChromeLabs/webm-wasm\n\n    if (typeof ReadableStream === 'undefined' || typeof WritableStream === 'undefined') {\n        // because it fixes readable/writable streams issues\n        console.error('Following polyfill is strongly recommended: https://unpkg.com/@mattiasbuelens/web-streams-polyfill/dist/polyfill.min.js');\n    }\n\n    config = config || {};\n\n    config.width = config.width || 640;\n    config.height = config.height || 480;\n    config.frameRate = config.frameRate || 30;\n    config.bitrate = config.bitrate || 1200;\n\n    function createBufferURL(buffer, type) {\n        return URL.createObjectURL(new Blob([buffer], {\n            type: type || ''\n        }));\n    }\n\n    function cameraStream() {\n        return new ReadableStream({\n            start: function(controller) {\n                var cvs = document.createElement('canvas');\n                var video = document.createElement('video');\n                video.srcObject = stream;\n                video.onplaying = function() {\n                    cvs.width = config.width;\n                    cvs.height = config.height;\n                    var ctx = cvs.getContext('2d');\n                    var frameTimeout = 1000 / config.frameRate;\n                    setTimeout(function f() {\n                        ctx.drawImage(video, 0, 0);\n                        controller.enqueue(\n                            ctx.getImageData(0, 0, config.width, config.height)\n                        );\n                        setTimeout(f, frameTimeout);\n                    }, frameTimeout);\n                };\n                video.play();\n            }\n        });\n    }\n\n    var worker;\n\n    function startRecording(stream, buffer) {\n        if (!config.workerPath && !buffer) {\n            // is it safe to use @latest ?\n            fetch(\n                'https://unpkg.com/webm-wasm@latest/dist/webm-worker.js'\n            ).then(function(r) {\n                r.arrayBuffer().then(function(buffer) {\n                    startRecording(stream, buffer);\n                });\n            });\n            return;\n        }\n\n        if (!config.workerPath && buffer instanceof ArrayBuffer) {\n            var blob = new Blob([buffer], {\n                type: 'text/javascript'\n            });\n            config.workerPath = URL.createObjectURL(blob);\n        }\n\n        if (!config.workerPath) {\n            console.error('workerPath parameter is missing.');\n        }\n\n        worker = new Worker(config.workerPath);\n\n        worker.postMessage(config.webAssemblyPath || 'https://unpkg.com/webm-wasm@latest/dist/webm-wasm.wasm');\n        worker.addEventListener('message', function(event) {\n            if (event.data === 'READY') {\n                worker.postMessage({\n                    width: config.width,\n                    height: config.height,\n                    bitrate: config.bitrate || 1200,\n                    timebaseDen: config.frameRate || 30,\n                    realtime: true\n                });\n\n                cameraStream().pipeTo(new WritableStream({\n                    write: function(image) {\n                        if (!worker) {\n                            return;\n                        }\n\n                        worker.postMessage(image.data.buffer, [image.data.buffer]);\n                    }\n                }));\n            } else if (!!event.data) {\n                if (!isPaused) {\n                    arrayOfBuffers.push(event.data);\n                }\n            }\n        });\n    }\n\n    /**\n     * This method records video.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.record();\n     */\n    this.record = function() {\n        arrayOfBuffers = [];\n        isPaused = false;\n        this.blob = null;\n        startRecording(stream);\n\n        if (typeof config.initCallback === 'function') {\n            config.initCallback();\n        }\n    };\n\n    var isPaused;\n\n    /**\n     * This method pauses the recording process.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.pause();\n     */\n    this.pause = function() {\n        isPaused = true;\n    };\n\n    /**\n     * This method resumes the recording process.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.resume();\n     */\n    this.resume = function() {\n        isPaused = false;\n    };\n\n    function terminate() {\n        if (!worker) {\n            return;\n        }\n\n        worker.postMessage(null);\n        worker.terminate();\n        worker = null;\n    }\n\n    var arrayOfBuffers = [];\n\n    /**\n     * This method stops recording video.\n     * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.stop(function(blob) {\n     *     video.src = URL.createObjectURL(blob);\n     * });\n     */\n    this.stop = function(callback) {\n        terminate();\n\n        this.blob = new Blob(arrayOfBuffers, {\n            type: 'video/webm'\n        });\n\n        callback(this.blob);\n    };\n\n    // for debugging\n    this.name = 'WebAssemblyRecorder';\n    this.toString = function() {\n        return this.name;\n    };\n\n    /**\n     * This method resets currently recorded data.\n     * @method\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.clearRecordedData();\n     */\n    this.clearRecordedData = function() {\n        arrayOfBuffers = [];\n        isPaused = false;\n        this.blob = null;\n\n        // todo: if recording-ON then STOP it first\n    };\n\n    /**\n     * @property {Blob} blob - The recorded blob object.\n     * @memberof WebAssemblyRecorder\n     * @example\n     * recorder.stop(function(){\n     *     var blob = recorder.blob;\n     * });\n     */\n    this.blob = null;\n}\n\nif (typeof RecordRTC !== 'undefined') {\n    RecordRTC.WebAssemblyRecorder = WebAssemblyRecorder;\n}\n"]},"sourceType":"script","hash":"709bad818bc201d3cc93957bd1ed838320c9f5e1"}
