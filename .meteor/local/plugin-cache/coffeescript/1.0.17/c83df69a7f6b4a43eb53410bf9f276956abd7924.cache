{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar          \n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nthis.Restivus = (function() {\n  function Restivus(options) {\n    var corsHeaders;\n    this._routes = [];\n    this._config = {\n      paths: [],\n      useDefaultAuth: false,\n      apiPath: 'api/',\n      version: null,\n      prettyJson: false,\n      auth: {\n        token: 'services.resume.loginTokens.hashedToken',\n        user: function() {\n          var token;\n          if (this.request.headers['x-auth-token']) {\n            token = Accounts._hashLoginToken(this.request.headers['x-auth-token']);\n          }\n          return {\n            userId: this.request.headers['x-user-id'],\n            token: token\n          };\n        }\n      },\n      defaultHeaders: {\n        'Content-Type': 'application/json'\n      },\n      enableCors: true\n    };\n    _.extend(this._config, options);\n    if (this._config.enableCors) {\n      corsHeaders = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n      };\n      if (this._config.useDefaultAuth) {\n        corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token';\n      }\n      _.extend(this._config.defaultHeaders, corsHeaders);\n      if (!this._config.defaultOptionsEndpoint) {\n        this._config.defaultOptionsEndpoint = function() {\n          this.response.writeHead(200, corsHeaders);\n          return this.done();\n        };\n      }\n    }\n    if (this._config.apiPath[0] === '/') {\n      this._config.apiPath = this._config.apiPath.slice(1);\n    }\n    if (_.last(this._config.apiPath) !== '/') {\n      this._config.apiPath = this._config.apiPath + '/';\n    }\n    if (this._config.version) {\n      this._config.apiPath += this._config.version + '/';\n    }\n    if (this._config.useDefaultAuth) {\n      this._initAuth();\n    } else if (this._config.useAuth) {\n      this._initAuth();\n      console.warn('Warning: useAuth API config option will be removed in Restivus v1.0 ' + '\\n    Use the useDefaultAuth option instead');\n    }\n    return this;\n  }\n\n\n  /**\n    Add endpoints for the given HTTP methods at the given path\n  \n    @param path {String} The extended URL path (will be appended to base path of the API)\n    @param options {Object} Route configuration options\n    @param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n    @param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n    @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n    @param endpoints.<method> {Function or Object} If a function is provided, all default route\n        configuration options will be applied to the endpoint. Otherwise an object with an `action`\n        and all other route config options available. An `action` must be provided with the object.\n   */\n\n  Restivus.prototype.addRoute = function(path, options, endpoints) {\n    var route;\n    route = new share.Route(this, path, options, endpoints);\n    this._routes.push(route);\n    route.addToApi();\n    return this;\n  };\n\n\n  /**\n    Generate routes for the Meteor Collection with the given name\n   */\n\n  Restivus.prototype.addCollection = function(collection, options) {\n    var collectionEndpoints, collectionRouteEndpoints, endpointsAwaitingConfiguration, entityRouteEndpoints, excludedEndpoints, methods, methodsOnCollection, path, routeOptions;\n    if (options == null) {\n      options = {};\n    }\n    methods = ['get', 'post', 'put', 'patch', 'delete', 'getAll'];\n    methodsOnCollection = ['post', 'getAll'];\n    if (collection === Meteor.users) {\n      collectionEndpoints = this._userCollectionEndpoints;\n    } else {\n      collectionEndpoints = this._collectionEndpoints;\n    }\n    endpointsAwaitingConfiguration = options.endpoints || {};\n    routeOptions = options.routeOptions || {};\n    excludedEndpoints = options.excludedEndpoints || [];\n    path = options.path || collection._name;\n    collectionRouteEndpoints = {};\n    entityRouteEndpoints = {};\n    if (_.isEmpty(endpointsAwaitingConfiguration) && _.isEmpty(excludedEndpoints)) {\n      _.each(methods, function(method) {\n        if (indexOf.call(methodsOnCollection, method) >= 0) {\n          _.extend(collectionRouteEndpoints, collectionEndpoints[method].call(this, collection));\n        } else {\n          _.extend(entityRouteEndpoints, collectionEndpoints[method].call(this, collection));\n        }\n      }, this);\n    } else {\n      _.each(methods, function(method) {\n        var configuredEndpoint, endpointOptions;\n        if (indexOf.call(excludedEndpoints, method) < 0 && endpointsAwaitingConfiguration[method] !== false) {\n          endpointOptions = endpointsAwaitingConfiguration[method];\n          configuredEndpoint = {};\n          _.each(collectionEndpoints[method].call(this, collection), function(action, methodType) {\n            return configuredEndpoint[methodType] = _.chain(action).clone().extend(endpointOptions).value();\n          });\n          if (indexOf.call(methodsOnCollection, method) >= 0) {\n            _.extend(collectionRouteEndpoints, configuredEndpoint);\n          } else {\n            _.extend(entityRouteEndpoints, configuredEndpoint);\n          }\n        }\n      }, this);\n    }\n    this.addRoute(path, routeOptions, collectionRouteEndpoints);\n    this.addRoute(path + \"/:id\", routeOptions, entityRouteEndpoints);\n    return this;\n  };\n\n\n  /**\n    A set of endpoints that can be applied to a Collection Route\n   */\n\n  Restivus.prototype._collectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity;\n            entity = collection.findOne(this.urlParams.id);\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, this.bodyParams);\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    patch: function(collection) {\n      return {\n        patch: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: this.bodyParams\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id);\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    \"delete\": function(collection) {\n      return {\n        \"delete\": {\n          action: function() {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'Item removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Item not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            entityId = collection.insert(this.bodyParams);\n            entity = collection.findOne(entityId);\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              return {\n                statusCode: 400,\n                body: {\n                  status: 'fail',\n                  message: 'No item added'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities;\n            entities = collection.find().fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve items from collection'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n\n  /**\n    A set of endpoints that can be applied to a Meteor.users Collection Route\n   */\n\n  Restivus.prototype._userCollectionEndpoints = {\n    get: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entity;\n            entity = collection.findOne(this.urlParams.id, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                status: 'success',\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    put: function(collection) {\n      return {\n        put: {\n          action: function() {\n            var entity, entityIsUpdated;\n            entityIsUpdated = collection.update(this.urlParams.id, {\n              $set: {\n                profile: this.bodyParams\n              }\n            });\n            if (entityIsUpdated) {\n              entity = collection.findOne(this.urlParams.id, {\n                fields: {\n                  profile: 1\n                }\n              });\n              return {\n                status: \"success\",\n                data: entity\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    \"delete\": function(collection) {\n      return {\n        \"delete\": {\n          action: function() {\n            if (collection.remove(this.urlParams.id)) {\n              return {\n                status: 'success',\n                data: {\n                  message: 'User removed'\n                }\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'User not found'\n                }\n              };\n            }\n          }\n        }\n      };\n    },\n    post: function(collection) {\n      return {\n        post: {\n          action: function() {\n            var entity, entityId;\n            entityId = Accounts.createUser(this.bodyParams);\n            entity = collection.findOne(entityId, {\n              fields: {\n                profile: 1\n              }\n            });\n            if (entity) {\n              return {\n                statusCode: 201,\n                body: {\n                  status: 'success',\n                  data: entity\n                }\n              };\n            } else {\n              ({\n                statusCode: 400\n              });\n              return {\n                status: 'fail',\n                message: 'No user added'\n              };\n            }\n          }\n        }\n      };\n    },\n    getAll: function(collection) {\n      return {\n        get: {\n          action: function() {\n            var entities;\n            entities = collection.find({}, {\n              fields: {\n                profile: 1\n              }\n            }).fetch();\n            if (entities) {\n              return {\n                status: 'success',\n                data: entities\n              };\n            } else {\n              return {\n                statusCode: 404,\n                body: {\n                  status: 'fail',\n                  message: 'Unable to retrieve users'\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  };\n\n\n  /*\n    Add /login and /logout endpoints to the API\n   */\n\n  Restivus.prototype._initAuth = function() {\n    var logout, self;\n    self = this;\n\n    /*\n      Add a login endpoint to the API\n    \n      After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n      adding hook).\n     */\n    this.addRoute('login', {\n      authRequired: false\n    }, {\n      post: function() {\n        var auth, e, extraData, password, ref, ref1, response, searchQuery, user;\n        user = {};\n        if (this.bodyParams.user) {\n          if (this.bodyParams.user.indexOf('@') === -1) {\n            user.username = this.bodyParams.user;\n          } else {\n            user.email = this.bodyParams.user;\n          }\n        } else if (this.bodyParams.username) {\n          user.username = this.bodyParams.username;\n        } else if (this.bodyParams.email) {\n          user.email = this.bodyParams.email;\n        }\n        password = this.bodyParams.password;\n        if (this.bodyParams.hashed) {\n          password = {\n            digest: password,\n            algorithm: 'sha-256'\n          };\n        }\n        try {\n          auth = Auth.loginWithPassword(user, password);\n        } catch (_error) {\n          e = _error;\n          return {\n            statusCode: e.error,\n            body: {\n              status: 'error',\n              message: e.reason\n            }\n          };\n        }\n        if (auth.userId && auth.authToken) {\n          searchQuery = {};\n          searchQuery[self._config.auth.token] = Accounts._hashLoginToken(auth.authToken);\n          this.user = Meteor.users.findOne({\n            '_id': auth.userId\n          }, searchQuery);\n          this.userId = (ref = this.user) != null ? ref._id : void 0;\n        }\n        response = {\n          status: 'success',\n          data: auth\n        };\n        extraData = (ref1 = self._config.onLoggedIn) != null ? ref1.call(this) : void 0;\n        if (extraData != null) {\n          _.extend(response.data, {\n            extra: extraData\n          });\n        }\n        return response;\n      }\n    });\n    logout = function() {\n      var authToken, extraData, hashedToken, index, ref, response, tokenFieldName, tokenLocation, tokenPath, tokenRemovalQuery, tokenToRemove;\n      authToken = this.request.headers['x-auth-token'];\n      hashedToken = Accounts._hashLoginToken(authToken);\n      tokenLocation = self._config.auth.token;\n      index = tokenLocation.lastIndexOf('.');\n      tokenPath = tokenLocation.substring(0, index);\n      tokenFieldName = tokenLocation.substring(index + 1);\n      tokenToRemove = {};\n      tokenToRemove[tokenFieldName] = hashedToken;\n      tokenRemovalQuery = {};\n      tokenRemovalQuery[tokenPath] = tokenToRemove;\n      Meteor.users.update(this.user._id, {\n        $pull: tokenRemovalQuery\n      });\n      response = {\n        status: 'success',\n        data: {\n          message: 'You\\'ve been logged out!'\n        }\n      };\n      extraData = (ref = self._config.onLoggedOut) != null ? ref.call(this) : void 0;\n      if (extraData != null) {\n        _.extend(response.data, {\n          extra: extraData\n        });\n      }\n      return response;\n    };\n\n    /*\n      Add a logout endpoint to the API\n    \n      After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n      adding hook).\n     */\n    return this.addRoute('logout', {\n      authRequired: true\n    }, {\n      get: function() {\n        console.warn(\"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\");\n        console.warn(\"    See https://github.com/kahmali/meteor-restivus/issues/100\");\n        return logout.call(this);\n      },\n      post: logout\n    });\n  };\n\n  return Restivus;\n\n})();\n\nRestivus = this.Restivus;\n","sourceMap":{"version":3,"file":"/lib/restivus.coffee.js","sourceRoot":"","sources":["/packages/nimble_restivus/lib/restivus.coffee"],"names":[],"mappings":"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","sourcesContent":["class @Restivus\n\n  constructor: (options) ->\n    @_routes = []\n    @_config =\n      paths: []\n      useDefaultAuth: false\n      apiPath: 'api/'\n      version: null\n      prettyJson: false\n      auth:\n        token: 'services.resume.loginTokens.hashedToken'\n        user: ->\n          if @request.headers['x-auth-token']\n            token = Accounts._hashLoginToken @request.headers['x-auth-token']\n          userId: @request.headers['x-user-id']\n          token: token\n      defaultHeaders:\n        'Content-Type': 'application/json'\n      enableCors: true\n\n    # Configure API with the given options\n    _.extend @_config, options\n\n    if @_config.enableCors\n      corsHeaders =\n        'Access-Control-Allow-Origin': '*'\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n\n      if @_config.useDefaultAuth\n        corsHeaders['Access-Control-Allow-Headers'] += ', X-User-Id, X-Auth-Token'\n\n      # Set default header to enable CORS if configured\n      _.extend @_config.defaultHeaders, corsHeaders\n\n      if not @_config.defaultOptionsEndpoint\n        @_config.defaultOptionsEndpoint = ->\n          @response.writeHead 200, corsHeaders\n          @done()\n\n    # Normalize the API path\n    if @_config.apiPath[0] is '/'\n      @_config.apiPath = @_config.apiPath.slice 1\n    if _.last(@_config.apiPath) isnt '/'\n      @_config.apiPath = @_config.apiPath + '/'\n\n    # URL path versioning is the only type of API versioning currently available, so if a version is\n    # provided, append it to the base path of the API\n    if @_config.version\n      @_config.apiPath += @_config.version + '/'\n\n    # Add default login and logout endpoints if auth is configured\n    if @_config.useDefaultAuth\n      @_initAuth()\n    else if @_config.useAuth\n      @_initAuth()\n      console.warn 'Warning: useAuth API config option will be removed in Restivus v1.0 ' +\n          '\\n    Use the useDefaultAuth option instead'\n\n    return this\n\n\n  ###*\n    Add endpoints for the given HTTP methods at the given path\n\n    @param path {String} The extended URL path (will be appended to base path of the API)\n    @param options {Object} Route configuration options\n    @param options.authRequired {Boolean} The default auth requirement for each endpoint on the route\n    @param options.roleRequired {String or String[]} The default role required for each endpoint on the route\n    @param endpoints {Object} A set of endpoints available on the new route (get, post, put, patch, delete, options)\n    @param endpoints.<method> {Function or Object} If a function is provided, all default route\n        configuration options will be applied to the endpoint. Otherwise an object with an `action`\n        and all other route config options available. An `action` must be provided with the object.\n  ###\n  addRoute: (path, options, endpoints) ->\n    # Create a new route and add it to our list of existing routes\n    route = new share.Route(this, path, options, endpoints)\n    @_routes.push(route)\n\n    route.addToApi()\n\n    return this\n\n\n  ###*\n    Generate routes for the Meteor Collection with the given name\n  ###\n  addCollection: (collection, options={}) ->\n    methods = ['get', 'post', 'put', 'patch', 'delete', 'getAll']\n    methodsOnCollection = ['post', 'getAll']\n\n    # Grab the set of endpoints\n    if collection is Meteor.users\n      collectionEndpoints = @_userCollectionEndpoints\n    else\n      collectionEndpoints = @_collectionEndpoints\n\n    # Flatten the options and set defaults if necessary\n    endpointsAwaitingConfiguration = options.endpoints or {}\n    routeOptions = options.routeOptions or {}\n    excludedEndpoints = options.excludedEndpoints or []\n    # Use collection name as default path\n    path = options.path or collection._name\n\n    # Separate the requested endpoints by the route they belong to (one for operating on the entire\n    # collection and one for operating on a single entity within the collection)\n    collectionRouteEndpoints = {}\n    entityRouteEndpoints = {}\n    if _.isEmpty(endpointsAwaitingConfiguration) and _.isEmpty(excludedEndpoints)\n      # Generate all endpoints on this collection\n      _.each methods, (method) ->\n        # Partition the endpoints into their respective routes\n        if method in methodsOnCollection\n          _.extend collectionRouteEndpoints, collectionEndpoints[method].call(this, collection)\n        else _.extend entityRouteEndpoints, collectionEndpoints[method].call(this, collection)\n        return\n      , this\n    else\n      # Generate any endpoints that haven't been explicitly excluded\n      _.each methods, (method) ->\n        if method not in excludedEndpoints and endpointsAwaitingConfiguration[method] isnt false\n          # Configure endpoint and map to it's http method\n          # TODO: Consider predefining a map of methods to their http method type (e.g., getAll: get)\n          endpointOptions = endpointsAwaitingConfiguration[method]\n          configuredEndpoint = {}\n          _.each collectionEndpoints[method].call(this, collection), (action, methodType) ->\n            configuredEndpoint[methodType] =\n              _.chain action\n              .clone()\n              .extend endpointOptions\n              .value()\n          # Partition the endpoints into their respective routes\n          if method in methodsOnCollection\n            _.extend collectionRouteEndpoints, configuredEndpoint\n          else _.extend entityRouteEndpoints, configuredEndpoint\n          return\n      , this\n\n    # Add the routes to the API\n    @addRoute path, routeOptions, collectionRouteEndpoints\n    @addRoute \"#{path}/:id\", routeOptions, entityRouteEndpoints\n\n    return this\n\n\n  ###*\n    A set of endpoints that can be applied to a Collection Route\n  ###\n  _collectionEndpoints:\n    get: (collection) ->\n      get:\n        action: ->\n          entity = collection.findOne @urlParams.id\n          if entity\n            {status: 'success', data: entity}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Item not found'}\n    put: (collection) ->\n      put:\n        action: ->\n          entityIsUpdated = collection.update @urlParams.id, @bodyParams\n          if entityIsUpdated\n            entity = collection.findOne @urlParams.id\n            {status: 'success', data: entity}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Item not found'}\n    patch: (collection) ->\n      patch:\n        action: ->\n          entityIsUpdated = collection.update @urlParams.id, $set: @bodyParams\n          if entityIsUpdated\n            entity = collection.findOne @urlParams.id\n            {status: 'success', data: entity}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Item not found'}\n    delete: (collection) ->\n      delete:\n        action: ->\n          if collection.remove @urlParams.id\n            {status: 'success', data: message: 'Item removed'}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Item not found'}\n    post: (collection) ->\n      post:\n        action: ->\n          entityId = collection.insert @bodyParams\n          entity = collection.findOne entityId\n          if entity\n            statusCode: 201\n            body: {status: 'success', data: entity}\n          else\n            statusCode: 400\n            body: {status: 'fail', message: 'No item added'}\n    getAll: (collection) ->\n      get:\n        action: ->\n          entities = collection.find().fetch()\n          if entities\n            {status: 'success', data: entities}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Unable to retrieve items from collection'}\n\n\n  ###*\n    A set of endpoints that can be applied to a Meteor.users Collection Route\n  ###\n  _userCollectionEndpoints:\n    get: (collection) ->\n      get:\n        action: ->\n          entity = collection.findOne @urlParams.id, fields: profile: 1\n          if entity\n            {status: 'success', data: entity}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'User not found'}\n    put: (collection) ->\n      put:\n        action: ->\n          entityIsUpdated = collection.update @urlParams.id, $set: profile: @bodyParams\n          if entityIsUpdated\n            entity = collection.findOne @urlParams.id, fields: profile: 1\n            {status: \"success\", data: entity}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'User not found'}\n    delete: (collection) ->\n      delete:\n        action: ->\n          if collection.remove @urlParams.id\n            {status: 'success', data: message: 'User removed'}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'User not found'}\n    post: (collection) ->\n      post:\n        action: ->\n          # Create a new user account\n          entityId = Accounts.createUser @bodyParams\n          entity = collection.findOne entityId, fields: profile: 1\n          if entity\n            statusCode: 201\n            body: {status: 'success', data: entity}\n          else\n            statusCode: 400\n            {status: 'fail', message: 'No user added'}\n    getAll: (collection) ->\n      get:\n        action: ->\n          entities = collection.find({}, fields: profile: 1).fetch()\n          if entities\n            {status: 'success', data: entities}\n          else\n            statusCode: 404\n            body: {status: 'fail', message: 'Unable to retrieve users'}\n\n\n  ###\n    Add /login and /logout endpoints to the API\n  ###\n  _initAuth: ->\n    self = this\n    ###\n      Add a login endpoint to the API\n\n      After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for\n      adding hook).\n    ###\n    @addRoute 'login', {authRequired: false},\n      post: ->\n        # Grab the username or email that the user is logging in with\n        user = {}\n        if @bodyParams.user\n          if @bodyParams.user.indexOf('@') is -1\n            user.username = @bodyParams.user\n          else\n            user.email = @bodyParams.user\n        else if @bodyParams.username\n          user.username = @bodyParams.username\n        else if @bodyParams.email\n          user.email = @bodyParams.email\n\n        password = @bodyParams.password\n        if @bodyParams.hashed\n          password =\n            digest: password\n            algorithm: 'sha-256'\n\n        # Try to log the user into the user's account (if successful we'll get an auth token back)\n        try\n          auth = Auth.loginWithPassword user, password\n        catch e\n          return {} =\n            statusCode: e.error\n            body: status: 'error', message: e.reason\n\n        # Get the authenticated user\n        # TODO: Consider returning the user in Auth.loginWithPassword(), instead of fetching it again here\n        if auth.userId and auth.authToken\n          searchQuery = {}\n          searchQuery[self._config.auth.token] = Accounts._hashLoginToken auth.authToken\n          @user = Meteor.users.findOne\n            '_id': auth.userId\n            searchQuery\n          @userId = @user?._id\n\n        response = {status: 'success', data: auth}\n\n        # Call the login hook with the authenticated user attached\n        extraData = self._config.onLoggedIn?.call(this)\n        if extraData?\n          _.extend(response.data, {extra: extraData})\n\n        response\n\n    logout = ->\n      # Remove the given auth token from the user's account\n      authToken = @request.headers['x-auth-token']\n      hashedToken = Accounts._hashLoginToken authToken\n      tokenLocation = self._config.auth.token\n      index = tokenLocation.lastIndexOf '.'\n      tokenPath = tokenLocation.substring 0, index\n      tokenFieldName = tokenLocation.substring index + 1\n      tokenToRemove = {}\n      tokenToRemove[tokenFieldName] = hashedToken\n      tokenRemovalQuery = {}\n      tokenRemovalQuery[tokenPath] = tokenToRemove\n      Meteor.users.update @user._id, {$pull: tokenRemovalQuery}\n\n      response = {status: 'success', data: {message: 'You\\'ve been logged out!'}}\n\n      # Call the logout hook with the authenticated user attached\n      extraData = self._config.onLoggedOut?.call(this)\n      if extraData?\n        _.extend(response.data, {extra: extraData})\n\n      response\n\n    ###\n      Add a logout endpoint to the API\n\n      After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for\n      adding hook).\n    ###\n    @addRoute 'logout', {authRequired: true},\n      get: ->\n        console.warn \"Warning: Default logout via GET will be removed in Restivus v1.0. Use POST instead.\"\n        console.warn \"    See https://github.com/kahmali/meteor-restivus/issues/100\"\n        return logout.call(this)\n      post: logout\n\nRestivus = @Restivus\n"]}}