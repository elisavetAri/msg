{"head":"","body":"","js":"\nTemplate.__checkName(\"App_messenger\");\nTemplate[\"App_messenger\"] = new Template(\"Template.App_messenger\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    class: \"container\",\n    style: \"background-image:url('/images/tele.jpg')\"\n  }, \"\\n  \", HTML.STYLE(\"\\n  #grad1 {\\n    width: 180px;\\n    height: 180px;\\n    background-image:\\n    /* linear-gradient(to top, transparent, teal), */\\n    linear-gradient(to top, transparent, grey),\\n    linear-gradient(to right, #566573, #1B4F72,#85929E);\\n    /* linear-gradient(to right, green, aqua,#F8FFAE ); */\\n    background-size: 100% 100%, 2000% 100%;\\n    animation: move 2s infinite;\\n}\\n  @keyframes move {\\n     from {background-position: center center, left center;}\\n     to {background-position: center center, right center;}\\n}\\n  #search {\\n      position: relative;\\n      -ms-flex: 1 1 auto;\\n      flex: inherit;\\n      width: 12%;\\n      margin-bottom: 0;\\n      background-color:#EAEDED;\\n      border: 2px solid #dedede;\\n  #choice {\\n      position: relative;\\n      -ms-flex: 1 1 auto;\\n      flex: inherit;\\n      width: 12%;\\n      margin-bottom: 0;\\n      background-color:#EAEDED;\\n      border: 2px solid #dedede;\\n\\n}\\n  \"), \"\\n\\n  \", HTML.Raw('<button type=\"button\" id=\"logout\" class=\"logout btn btn-default btn-sm  float-right text-white\" style=\"background:grey\"><span class=\"glyphicon glyphicon-log-out\"></span> Log out</button>'), \"\\n  \", HTML.DIV({\n    class: \"form-group\",\n    style: \"background-image:url('/images/tele.jpg')\"\n  }, \"\\n    \", HTML.Raw('<span class=\"navbar-toggler-icon\"></span>'), \"\\n      \", HTML.DIV({\n    class: \"mess\",\n    id: \"sidenav\"\n  }, \"\\n        \", HTML.Raw('<div class=\"card-header\">\\n\\t\\t\\t\\t\\t\\t<div class=\"input-group\">\\n\\t\\t\\t\\t\\t\\t\\t<input type=\"text\" placeholder=\"Search...\" id=\"search\" class=\"form-control search\" style=\"background:grey text-white \">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\"input-group-prepend\">\\n                <input class=\"submit text-white \" id=\"submit\" type=\"submit\" name=\"submit\" value=\"Search\" style=\"background:grey\">\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n          </div>'), \"\\n      \", HTML.SELECT({\n    multiple: \"\",\n    class: \"users bg-dark p-4s text-white navbar navbar-dark bg-dark float-left\",\n    size: \"20\",\n    id: \"users\"\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getUsers\"));\n  }, function() {\n    return [ \"\\n        \", HTML.OPTION({\n      class: \"text-white\",\n      id: \"chat\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"_id\"));\n      },\n      style: \"background-color:#A9CCE3\"\n    }, \"Chat with \", Blaze.View(\"lookup:name\", function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \"\\n      \" ];\n  }), \"\\n     \"), \"\\n     \", HTML.Raw('<!-- <input type=\"file\" accept=\"image/*;capture=camera\"> \\\\\\\\ Snapshot\\n     <input type=\"file\" accept=\"video/*;capture=camcorder\"> \\\\\\\\ Video\\n     <input type=\"file\" accept=\"audio/*;capture=microphone\"> \\\\\\\\ Audio -->'), \"\\n    \"), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"text text-r pt-3\",\n    style: \"background-image:url('/images/tele.jpg')\"\n  }, \"\\n    \", HTML.DIV({\n    class: \"row msg-wrap\",\n    style: \"height:443px; overflow:auto;\"\n  }, \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"getMessages\"));\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      class: \"col-10 mb-3\"\n    }, \"\\n      \", Blaze.Let({\n      sender: function() {\n        return Spacebars.call(Spacebars.dataMustache(view.lookup(\"getUserById\"), view.lookup(\"sid\")));\n      },\n      receiver: function() {\n        return Spacebars.call(Spacebars.dataMustache(view.lookup(\"getUserById\"), view.lookup(\"rid\")));\n      }\n    }, function() {\n      return [ \"\\n      \", Blaze.View(\"lookup:viewMessage\", function() {\n        return Spacebars.mustache(view.lookup(\"viewMessage\"), Spacebars.dot(view.lookup(\"receiver\"), \"_id\"), view.lookup(\"_id\"), view.lookup(\"viewed\"));\n      }), \"\\n        \", HTML.DIV({\n        id: \"card\",\n        class: function() {\n          return [ \"card text-white purple-gradient color-block mx-auto z-depth-1 align-items-stretch \", Blaze.If(function() {\n            return Spacebars.dataMustache(view.lookup(\"isMe\"), Spacebars.dot(view.lookup(\"sender\"), \"_id\"));\n          }, function() {\n            return \"float-right \";\n          }, function() {\n            return \"float-sm-left\";\n          }) ];\n        },\n        style: \"position:relative\",\n        value: \"\"\n      }, \"\\n          \", HTML.SPAN({\n        class: \"remove\",\n        style: \"position: absolute; right: 3px; top: 8px; color: red; line-height: 0; cursor:pointer\"\n      }, \"√ó\"), \"\\n          \", HTML.DIV({\n        class: \"card-body\",\n        id: \"grad1\"\n      }, \"\\n            \", HTML.SPAN({\n        class: \"time-left\"\n      }, Blaze.View(\"lookup:sender.name\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"sender\"), \"name\"));\n      })), \" to \", HTML.SPAN({\n        class: \"right\"\n      }, \" \", Blaze.View(\"lookup:receiver.name\", function() {\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\"receiver\"), \"name\"));\n      })), \" \", HTML.BR(), \"\\n            \", HTML.SPAN({\n        class: \"\"\n      }, \"\\n              \", HTML.SMALL(\"\\n              \", Blaze.View(\"lookup:parseDate\", function() {\n        return Spacebars.mustache(view.lookup(\"parseDate\"), view.lookup(\"created_at\"));\n      }), \"\\n              \"), \"\\n              \", Blaze.If(function() {\n        return Spacebars.dataMustache(view.lookup(\"isFile\"), view.lookup(\"type\"));\n      }, function() {\n        return [ \"\\n                \", Blaze.If(function() {\n          return Spacebars.dataMustache(view.lookup(\"isImage\"), view.lookup(\"message\"));\n        }, function() {\n          return [ \"\\n                  \", HTML.IMG({\n            src: function() {\n              return [ \"http://172.16.1.143:3333/?\", Spacebars.mustache(view.lookup(\"message\")) ];\n            },\n            alt: \"\",\n            style: \"width:100%\"\n          }), \"\\n                \" ];\n        }, function() {\n          return [ \"\\n                \", HTML.A({\n            href: function() {\n              return [ \"http://172.16.1.143:3333/?\", Spacebars.mustache(view.lookup(\"message\")) ];\n            },\n            download: function() {\n              return Spacebars.mustache(view.lookup(\"message\"));\n            }\n          }, \"Download file\"), \"\\n                \" ];\n        }), \"\\n              \" ];\n      }, function() {\n        return [ \"\\n              \", Blaze.Each(function() {\n          return Spacebars.dataMustache(view.lookup(\"getLines\"), view.lookup(\"message\"));\n        }, function() {\n          return [ \"\\n                \", HTML.BR(), \"\\n                \", Blaze.View(\"lookup:.\", function() {\n            return Spacebars.mustache(view.lookup(\".\"));\n          }), \"\\n              \" ];\n        }), \"\\n              \" ];\n      }), \"\\n            \"), \"\\n          \", HTML.DIV({\n        class: \"imageView\"\n      }, \"\\n          \"), \"\\n              \", HTML.BR(), \"\\n              \", HTML.SPAN({\n        class: \"update material-icons\",\n        style: \"position: absolute; left: 1px; top: 1px; cursor:pointer\"\n      }, \"üìù\"), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n    }), \"\\n      \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \"), \"\\n  \", HTML.Raw(\"<!-- uload file -->\"), \"\\n  \", HTML.Raw('<div class=\"input-group\">\\n <div class=\"choice\" id=\"choice\">\\n   <input type=\"file\" id=\"upload\" class=\"upload choice-input\" name=\"file\">\\n   <label class=\"choice-label\" id=\"label\" for=\"upload\">Choose file</label>\\n </div>\\n</div>'), \"\\n  \", HTML.DIV({\n    class: \"form-group\"\n  }, \"\\n    \", HTML.TEXTAREA({\n    \"data-meteor-emoji\": \"true\",\n    class: \"text-white message form-control\",\n    id: \"message\",\n    width: \"15px;\",\n    height: \"15px;\",\n    rows: \"4\",\n    cols: \"20\",\n    style: \"background-image:url('/images/tele.jpg')\",\n    placeholder: \"Write a message...\"\n  }), \"\\n      \", HTML.Raw('<button type=\"button\" name=\"button\" id=\"send-message\" class=\"messenger btn btn-priamry text-white \" style=\"background:grey\">Send</button>'), \"\\n   \"), \"\\n\", HTML.Raw(\"<!-- emoji script -->\"), \"\\n\", HTML.SCRIPT(\"(() => {new MeteorEmoji()})() \")), HTML.Raw('\\n  <!-- sound for msg -->\\n  <audio id=\"audio\" preload=\"auto\" tabindex=\"0\" controls=\"controls\" type=\"audio/mpeg\" src=\"/bicycle_bell_07.mp3\" style=\"display:none\"></audio>\\n<div id=\"webcamcontrols\">\\n<button class=\"recordbutton\" id=\"recordbutton\" data-toggle=\"modal\" data-target=\"#myModal\">RECORD</button>\\n</div>\\n'), HTML.HEAD(\"\\n    \", HTML.Raw('<meta charset=\"utf-8\">'), \"\\n    \", HTML.TITLE(\"RecordRTC to Node.js\"), \"\\n\\n        if (location.href.indexOf('file:') == 0) {\\n            document.write('\", HTML.Raw('<h1 style=\"color:red;\">Please load this HTML file on HTTP or HTTPS.</h1>'), \"');\\n        }\\n    \", HTML.Raw('<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">'), \"\\n    \", HTML.Raw('<link rel=\"author\" type=\"text/html\" href=\"https://plus.google.com/+MuazKhan\">'), \"\\n    \", HTML.Raw('<meta name=\"author\" content=\"Muaz Khan\">'), \"\\n\\n    \", HTML.STYLE(\"\\n        html { background-color: #f7f7f7; }\\n\\n        body {\\n            background-color: white;\\n            border: 1px solid rgb(15, 158, 238);\\n            margin: 1% 35%;\\n            text-align: center;\\n        }\\n\\n        hr {\\n            border: 0;\\n            border-top: 1px solid rgb(15, 158, 238);\\n        }\\n\\n        a {\\n            color: #2844FA;\\n            text-decoration: none;\\n        }\\n\\n        a:hover, a:focus { color: #1B29A4; }\\n\\n        a:active { color: #000; }\\n\\n        audio, video {\\n            border: 1px solid rgb(15, 158, 238); width: 94%;\\n        }\\n        button[enable], input[enable] { background: rgba(216, 205, 205, 0.2); border: 1px solid rgb(233, 224, 224);}\\n    \"), \"\\n\"), \"\\n\", HTML.BODY(\"\\n    \", HTML.Raw('<p>\\n      <video autoplay=\"\" playsinline=\"\" muted=\"false\" controls=\"\" volume=\"1\" height=\"400\" src=\"getUserMedia()\">               </video>\\n    </p>'), HTML.Raw(\"<hr>\"), \"\\n\\n    \", HTML.Raw('<div>\\n        <label id=\"percentage\">0%</label>\\n        <progress id=\"progress-bar\" value=\"0\"></progress><br>\\n    </div>'), \"\\n\\n    \", HTML.Raw(\"<hr>\"), \"\\n\\n    \", HTML.Raw('<div>\\n        <button id=\"btn-start-recording\" onclick=\"startRecording()\">Start Recording</button>\\n        <button id=\"btn-stop-recording\">Stop Recording</button>\\n    </div>'), \"\\n\\n    \", HTML.Raw('<!-- <script src=\"/node_modules/recordrtc/RecordRTC.js\"> </script> -->'), \"\\n\\n    \", HTML.SCRIPT(\"\\n        // // fetching DOM references\\n        // var btnStartRecording = document.querySelector('#btn-start-recording');\\n        // var btnStopRecording  = document.querySelector('#btn-stop-recording');\\n        //\\n        // var videoElement      = document.querySelector('video');\\n        //\\n        // var progressBar = document.querySelector('#progress-bar');\\n        // var percentage = document.querySelector('#percentage');\\n        //\\n        // var recorder;\\n        //\\n        // // reusable helpers\\n        //\\n        // // this function submits recorded blob to nodejs server\\n        // function postFiles() {\\n        //     var blob = recorder.getBlob();\\n        //\\n        //     // getting unique identifier for the file name\\n        //     var fileName = generateRandomString() + '.webm';\\n        //\\n        //     var file = new File([blob], fileName, {\\n        //         type: 'video/webm'\\n        //     });\\n        //\\n        //     videoElement.src = '';\\n        //     videoElement.poster = '/ajax-loader.gif';\\n        //\\n        //     xhr('/uploadFile', file, function(responseText) {\\n        //         var fileURL = JSON.parse(responseText).fileURL;\\n        //\\n        //         console.info('fileURL', fileURL);\\n        //         videoElement.src = fileURL;\\n        //         videoElement.play();\\n        //         videoElement.muted = false;\\n        //         videoElement.controls = true;\\n        //\\n        //         document.querySelector('#footer-h2').innerHTML = '<a href=\\\"' + videoElement.src + '\\\">' + videoElement.src + '</a>';\\n        //     });\\n        //\\n        //     if(mediaStream) mediaStream.stop();\\n        // }\\n        //\\n        // // XHR2/FormData\\n        // function xhr(url, data, callback) {\\n        //     var request = new XMLHttpRequest();\\n        //     request.onreadystatechange = function() {\\n        //         if (request.readyState == 4 && request.status == 200) {\\n        //             callback(request.responseText);\\n        //         }\\n        //     };\\n        //\\n        //     request.upload.onprogress = function(event) {\\n        //         progressBar.max = event.total;\\n        //         progressBar.value = event.loaded;\\n        //         progressBar.innerHTML = 'Upload Progress ' + Math.round(event.loaded / event.total * 100) + \\\"%\\\";\\n        //     };\\n        //\\n        //     request.upload.onload = function() {\\n        //         percentage.style.display = 'none';\\n        //         progressBar.style.display = 'none';\\n        //     };\\n        //     request.open('POST', url);\\n        //\\n        //     var formData = new FormData();\\n        //     formData.append('file', data);\\n        //     request.send(formData);\\n        // }\\n        //\\n        // // generating random string\\n        // function generateRandomString() {\\n        //     if (window.crypto) {\\n        //         var a = window.crypto.getRandomValues(new Uint32Array(3)),\\n        //             token = '';\\n        //         for (var i = 0, l = a.length; i < l; i++) token += a[i].toString(36);\\n        //         return token;\\n        //     } else {\\n        //         return (Math.random() * new Date().getTime()).toString(36).replace( /\\\\./g , '');\\n        //     }\\n        // }\\n        //\\n        // var mediaStream = null;\\n        // // reusable getUserMedia\\n        // function captureUserMedia(success_callback) {\\n        //     var session = {\\n        //         audio: true,\\n        //         video: true\\n        //     };\\n        //\\n        //     navigator.getUserMedia(session, success_callback, function(error) {\\n        //         alert('Unable to capture your camera. Please check console logs.');\\n        //         console.error(error);\\n        //     });\\n        // }\\n        //\\n        // // UI events handling\\n        // btnStartRecording.onclick = function() {\\n        //     btnStartRecording.disabled = true;\\n        //\\n        //     captureUserMedia(function(stream) {\\n        //         mediaStream = stream;\\n        //         videoElement.src = window.URL.createObjectURL(stream);\\n        //         videoElement.play();\\n        //         videoElement.muted = true;\\n        //         videoElement.controls = false;\\n        //\\n        //         recorder = RecordRTC(stream, {\\n        //             type: 'video'\\n        //         });\\n        //\\n        //         recorder.startRecording();\\n        //\\n        //         // enable stop-recording button\\n        //         btnStopRecording.disabled = true;\\n        //     });\\n        // };\\n        // btnStopRecording.onclick = function() {\\n        //     btnStartRecording.disabled = false;\\n        //     btnStopRecording.disabled = false;\\n        //\\n        //     recorder.stopRecording(postFiles);\\n        // };\\n        //\\n        // window.onbeforeunload = function() {\\n        //     startRecording.disabled = false;\\n        // };\\n    \"), \"\\n    \") ];\n}));\n","bodyAttrs":{}}