[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ostrio:user-status\":{\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/ostrio_user-status/server/main.js                        //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\n\nconst NOOP = function () {};\n\nAccounts.onLogin(data => {\n  Meteor.users.update({\n    _id: data.user._id\n  }, {\n    $set: {\n      connection: data.connection.id,\n      'profile.online': true,\n      'profile.idle': false,\n      'profile.location.ip': data.connection.clientAddress,\n      'profile.lastLogin': new Date()\n    }\n  }, NOOP);\n});\nAccounts.onLogout(data => {\n  Meteor.users.update({\n    _id: data.user._id\n  }, {\n    $set: {\n      connection: data.connection.id,\n      'profile.online': false,\n      'profile.idle': false,\n      'profile.location.ip': data.connection.clientAddress\n    }\n  }, NOOP);\n});\nMeteor.onConnection(connection => {\n  const connectionId = connection.id;\n  connection.onClose(() => {\n    Meteor.users.update({\n      connection: connectionId\n    }, {\n      $set: {\n        'profile.online': false,\n        'profile.idle': false\n      }\n    }, NOOP);\n  });\n});\n///////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/ostrio:user-status/server/main.js\");\n\n/* Exports */\nPackage._define(\"ostrio:user-status\");\n\n})();\n","servePath":"/packages/ostrio_user-status.js","sourceMap":{"version":3,"sources":["packages/ostrio:user-status/server/main.js"],"names":["Meteor","module","link","v","Accounts","NOOP","onLogin","data","users","update","_id","user","$set","connection","id","clientAddress","Date","onLogout","onConnection","connectionId","onClose"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,MAAJ;AAAWC,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACF,QAAM,CAACG,CAAD,EAAG;AAACH,UAAM,GAACG,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAAqD,IAAIC,QAAJ;AAAaH,MAAM,CAACC,IAAP,CAAY,sBAAZ,EAAmC;AAACE,UAAQ,CAACD,CAAD,EAAG;AAACC,YAAQ,GAACD,CAAT;AAAW;;AAAxB,CAAnC,EAA6D,CAA7D;;AAG7E,MAAME,IAAI,GAAG,YAAW,CAAE,CAA1B;;AAEAD,QAAQ,CAACE,OAAT,CAAkBC,IAAD,IAAU;AACzBP,QAAM,CAACQ,KAAP,CAAaC,MAAb,CAAoB;AAClBC,OAAG,EAAEH,IAAI,CAACI,IAAL,CAAUD;AADG,GAApB,EAEG;AACDE,QAAI,EAAE;AACJC,gBAAU,EAAEN,IAAI,CAACM,UAAL,CAAgBC,EADxB;AAEJ,wBAAkB,IAFd;AAGJ,sBAAgB,KAHZ;AAIJ,6BAAuBP,IAAI,CAACM,UAAL,CAAgBE,aAJnC;AAKJ,2BAAqB,IAAIC,IAAJ;AALjB;AADL,GAFH,EAUGX,IAVH;AAWD,CAZD;AAcAD,QAAQ,CAACa,QAAT,CAAmBV,IAAD,IAAU;AAC1BP,QAAM,CAACQ,KAAP,CAAaC,MAAb,CAAoB;AAClBC,OAAG,EAAEH,IAAI,CAACI,IAAL,CAAUD;AADG,GAApB,EAEG;AACDE,QAAI,EAAE;AACJC,gBAAU,EAAEN,IAAI,CAACM,UAAL,CAAgBC,EADxB;AAEJ,wBAAkB,KAFd;AAGJ,sBAAgB,KAHZ;AAIJ,6BAAuBP,IAAI,CAACM,UAAL,CAAgBE;AAJnC;AADL,GAFH,EASGV,IATH;AAUD,CAXD;AAaAL,MAAM,CAACkB,YAAP,CAAqBL,UAAD,IAAgB;AAClC,QAAMM,YAAY,GAAGN,UAAU,CAACC,EAAhC;AAEAD,YAAU,CAACO,OAAX,CAAmB,MAAM;AACvBpB,UAAM,CAACQ,KAAP,CAAaC,MAAb,CAAoB;AAClBI,gBAAU,EAAEM;AADM,KAApB,EAEG;AACDP,UAAI,EAAE;AACJ,0BAAkB,KADd;AAEJ,wBAAgB;AAFZ;AADL,KAFH,EAOGP,IAPH;AAQD,GATD;AAUD,CAbD,E","file":"/packages/ostrio_user-status.js","sourcesContent":["import { Meteor }   from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\n\nconst NOOP = function() {};\n\nAccounts.onLogin((data) => {\n  Meteor.users.update({\n    _id: data.user._id\n  }, {\n    $set: {\n      connection: data.connection.id,\n      'profile.online': true,\n      'profile.idle': false,\n      'profile.location.ip': data.connection.clientAddress,\n      'profile.lastLogin': new Date()\n    }\n  }, NOOP);\n});\n\nAccounts.onLogout((data) => {\n  Meteor.users.update({\n    _id: data.user._id\n  }, {\n    $set: {\n      connection: data.connection.id,\n      'profile.online': false,\n      'profile.idle': false,\n      'profile.location.ip': data.connection.clientAddress\n    }\n  }, NOOP);\n});\n\nMeteor.onConnection((connection) => {\n  const connectionId = connection.id;\n\n  connection.onClose(() => {\n    Meteor.users.update({\n      connection: connectionId\n    }, {\n      $set: {\n        'profile.online': false,\n        'profile.idle': false\n      }\n    }, NOOP);\n  });\n});\n"]}}]