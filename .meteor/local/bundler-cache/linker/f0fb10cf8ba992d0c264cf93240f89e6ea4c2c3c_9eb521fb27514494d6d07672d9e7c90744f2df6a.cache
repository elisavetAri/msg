[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar EV, Streamer;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"rocketchat:streamer\":{\"lib\":{\"ev.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_streamer/lib/ev.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals EV:true */\n\n/* exported EV */\nEV = class EV {\n  constructor() {\n    this.handlers = {};\n  }\n\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(this, args));\n  }\n\n  emitWithScope(event, scope) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(scope, args));\n  }\n\n  listenerCount(event) {\n    return this.handlers[event] && this.handlers[event].length || 0;\n  }\n\n  on(event, callback) {\n    if (!this.handlers[event]) {\n      this.handlers[event] = [];\n    }\n\n    this.handlers[event].push(callback);\n  }\n\n  once(event, callback) {\n    const self = this;\n    this.on(event, function onetimeCallback() {\n      self.removeListener(event, onetimeCallback);\n      callback.apply(this, arguments);\n    });\n  }\n\n  removeListener(event, callback) {\n    if (!this.handlers[event]) {\n      return;\n    }\n\n    const index = this.handlers[event].indexOf(callback);\n\n    if (index > -1) {\n      this.handlers[event].splice(index, 1);\n    }\n  }\n\n  removeAllListeners(event) {\n    this.handlers[event] = undefined;\n  }\n\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"client\":{\"client.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_streamer/client/client.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals DDPCommon, EV */\n\n/* eslint-disable new-cap */\nconst NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nclass StreamerCentral extends EV {\n  constructor() {\n    super();\n    this.instances = {};\n    this.ddpConnections = {}; // since each Streamer instance can provide its own ddp connection, store them by streamer name\n  }\n\n  setupDdpConnection(name, ddpConnection) {\n    // make sure we only setup event listeners for each ddp connection once\n    if (ddpConnection.hasMeteorStreamerEventListeners) {\n      return;\n    }\n\n    ddpConnection._stream.on('message', raw_msg => {\n      const msg = DDPCommon.parseDDP(raw_msg);\n\n      if (msg && msg.msg === 'changed' && msg.collection && msg.fields && msg.fields.eventName && msg.fields.args) {\n        msg.fields.args.unshift(msg.fields.eventName);\n        msg.fields.args.unshift(msg.collection);\n        this.emit.apply(this, msg.fields.args);\n      }\n    }); // store ddp connection\n\n\n    this.storeDdpConnection(name, ddpConnection);\n  }\n\n  storeDdpConnection(name, ddpConnection) {\n    // mark the connection as setup for Streamer, and store it\n    ddpConnection.hasMeteorStreamerEventListeners = true;\n    this.ddpConnections[name] = ddpConnection;\n  }\n\n}\n\nMeteor.StreamerCentral = new StreamerCentral();\nMeteor.Streamer = class Streamer extends EV {\n  constructor(name) {\n    var _this,\n        _superprop_getEmit = () => super.emit;\n\n    let {\n      useCollection = false,\n      ddpConnection = Meteor.connection\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (Meteor.StreamerCentral.instances[name]) {\n      console.warn('Streamer instance already exists:', name);\n      return Meteor.StreamerCentral.instances[name];\n    }\n\n    Meteor.StreamerCentral.setupDdpConnection(name, ddpConnection);\n    _this = super();\n    this.ddpConnection = ddpConnection || Meteor.connection;\n    Meteor.StreamerCentral.instances[name] = this;\n    this.name = name;\n    this.useCollection = useCollection;\n    this.subscriptions = {};\n    Meteor.StreamerCentral.on(this.subscriptionName, function (eventName) {\n      if (_this.subscriptions[eventName]) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        _this.subscriptions[eventName].lastMessage = args;\n\n        _superprop_getEmit().call(_this, eventName, ...args);\n      }\n    });\n\n    this.ddpConnection._stream.on('reset', () => {\n      super.emit.call(this, '__reconnect__');\n    });\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    check(name, String);\n    this._name = name;\n  }\n\n  get subscriptionName() {\n    return \"stream-\".concat(this.name);\n  }\n\n  get useCollection() {\n    return this._useCollection;\n  }\n\n  set useCollection(useCollection) {\n    check(useCollection, Boolean);\n    this._useCollection = useCollection;\n  }\n\n  stop(eventName) {\n    return this.subscriptions[eventName] && this.subscriptions[eventName].subscription && this.subscriptions[eventName].subscription.stop();\n  }\n\n  stopAll() {\n    Object.keys(this.subscriptions).forEach(eventName => this.removeAllListeners(eventName));\n  }\n\n  unsubscribe(eventName) {\n    delete this.subscriptions[eventName];\n    super.removeAllListeners(eventName);\n  }\n\n  subscribe(eventName, args) {\n    if (this.subscriptions[eventName]) {\n      return;\n    }\n\n    const subscription = Tracker.nonreactive(() => this.ddpConnection.subscribe(this.subscriptionName, eventName, {\n      useCollection: this.useCollection,\n      args\n    }, {\n      onStop: () => this.unsubscribe(eventName)\n    }));\n    this.subscriptions[eventName] = {\n      subscription\n    };\n  }\n\n  onReconnect(fn) {\n    if (typeof fn === 'function') {\n      super.on('__reconnect__', fn);\n    }\n  }\n\n  getLastMessageFromEvent(eventName) {\n    const subscription = this.subscriptions[eventName];\n\n    if (subscription && subscription.lastMessage) {\n      return subscription.lastMessage;\n    }\n  }\n\n  removeAllListeners(eventName) {\n    super.removeAllListeners(eventName);\n    return this.stop(eventName);\n  }\n\n  removeListener(eventName) {\n    if (this.listenerCount(eventName) === 1) {\n      this.stop(eventName);\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    super.removeListener(eventName, ...args);\n  }\n\n  on(eventName) {\n    check(eventName, NonEmptyString);\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    const callback = args.pop();\n    check(callback, Function);\n    this.subscribe(eventName, args);\n    super.on(eventName, callback);\n  }\n\n  once(eventName) {\n    var _this2 = this;\n\n    check(eventName, NonEmptyString);\n\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    const callback = args.pop();\n    check(callback, Function);\n    this.subscribe(eventName, args);\n    super.once(eventName, function () {\n      callback(...arguments);\n\n      if (_this2.listenerCount(eventName) === 0) {\n        return _this2.stop(eventName);\n      }\n    });\n  }\n\n  emit() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this.ddpConnection.call(this.subscriptionName, ...args);\n  }\n\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/rocketchat:streamer/lib/ev.js\");\nrequire(\"/node_modules/meteor/rocketchat:streamer/client/client.js\");\n\n/* Exports */\nPackage._define(\"rocketchat:streamer\", {\n  Streamer: Streamer\n});\n\n})();\n","servePath":"/packages/rocketchat_streamer.js","sourceMap":{"version":3,"sources":["packages/rocketchat:streamer/lib/ev.js","packages/rocketchat:streamer/client/client.js"],"names":["EV","constructor","handlers","emit","event","args","forEach","handler","apply","emitWithScope","scope","listenerCount","length","on","callback","push","once","self","onetimeCallback","removeListener","arguments","index","indexOf","splice","removeAllListeners","undefined","NonEmptyString","Match","Where","x","check","String","StreamerCentral","instances","ddpConnections","setupDdpConnection","name","ddpConnection","hasMeteorStreamerEventListeners","_stream","raw_msg","msg","DDPCommon","parseDDP","collection","fields","eventName","unshift","storeDdpConnection","Meteor","Streamer","useCollection","connection","console","warn","subscriptions","subscriptionName","lastMessage","call","_name","_useCollection","Boolean","stop","subscription","stopAll","Object","keys","unsubscribe","subscribe","Tracker","nonreactive","onStop","onReconnect","fn","getLastMessageFromEvent","pop","Function"],"mappings":"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","file":"/packages/rocketchat_streamer.js","sourcesContent":["/* globals EV:true */\n/* exported EV */\n\nEV = class EV {\n\tconstructor() {\n\t\tthis.handlers = {};\n\t}\n\n\temit(event, ...args) {\n\t\treturn this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(this, args));\n\t}\n\n\temitWithScope(event, scope, ...args) {\n\t\treturn this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(scope, args));\n\t}\n\n\tlistenerCount(event) {\n\t\treturn (this.handlers[event] && this.handlers[event].length) || 0;\n\t}\n\n\ton(event, callback) {\n\t\tif (!this.handlers[event]) {\n\t\t\tthis.handlers[event] = [];\n\t\t}\n\t\tthis.handlers[event].push(callback);\n\t}\n\n\tonce(event, callback) {\n\t\tconst self = this;\n\t\tthis.on(event, function onetimeCallback() {\n\t\t\tself.removeListener(event, onetimeCallback);\n\t\t\tcallback.apply(this, arguments);\n\t\t});\n\t}\n\n\tremoveListener(event, callback) {\n\t\tif (!this.handlers[event]) {\n\t\t\treturn;\n\t\t}\n\t\tconst index = this.handlers[event].indexOf(callback);\n\t\tif (index > -1) {\n\t\t\tthis.handlers[event].splice(index, 1);\n\t\t}\n\t}\n\n\tremoveAllListeners(event) {\n\t\tthis.handlers[event] = undefined;\n\t}\n};\n","/* globals DDPCommon, EV */\n/* eslint-disable new-cap */\nconst NonEmptyString = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn x.length > 0;\n});\n\nclass StreamerCentral extends EV {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.instances = {};\n\t\tthis.ddpConnections = {};\t\t// since each Streamer instance can provide its own ddp connection, store them by streamer name\n\t}\n\n\tsetupDdpConnection(name, ddpConnection) {\n\t\t// make sure we only setup event listeners for each ddp connection once\n\t\tif (ddpConnection.hasMeteorStreamerEventListeners) {\n\t\t\treturn;\n\t\t}\n\t\tddpConnection._stream.on('message', (raw_msg) => {\n\t\t\tconst msg = DDPCommon.parseDDP(raw_msg);\n\t\t\tif (msg && msg.msg === 'changed' && msg.collection && msg.fields && msg.fields.eventName && msg.fields.args) {\n\t\t\t\tmsg.fields.args.unshift(msg.fields.eventName);\n\t\t\t\tmsg.fields.args.unshift(msg.collection);\n\t\t\t\tthis.emit.apply(this, msg.fields.args);\n\t\t\t}\n\t\t});\n\t\t// store ddp connection\n\t\tthis.storeDdpConnection(name, ddpConnection);\n\n\t}\n\n\tstoreDdpConnection(name, ddpConnection) {\n\t\t// mark the connection as setup for Streamer, and store it\n\t\tddpConnection.hasMeteorStreamerEventListeners = true;\n\t\tthis.ddpConnections[name] = ddpConnection;\n\t}\n}\n\nMeteor.StreamerCentral = new StreamerCentral;\n\nMeteor.Streamer = class Streamer extends EV {\n\tconstructor(name, { useCollection = false, ddpConnection = Meteor.connection } = {}) {\n\t\tif (Meteor.StreamerCentral.instances[name]) {\n\t\t\tconsole.warn('Streamer instance already exists:', name);\n\t\t\treturn Meteor.StreamerCentral.instances[name];\n\t\t}\n\t\tMeteor.StreamerCentral.setupDdpConnection(name, ddpConnection);\n\n\t\tsuper();\n\n\t\tthis.ddpConnection = ddpConnection || Meteor.connection;\n\n\t\tMeteor.StreamerCentral.instances[name] = this;\n\n\t\tthis.name = name;\n\t\tthis.useCollection = useCollection;\n\t\tthis.subscriptions = {};\n\n\t\tMeteor.StreamerCentral.on(this.subscriptionName, (eventName, ...args) => {\n\t\t\tif (this.subscriptions[eventName]) {\n\t\t\t\tthis.subscriptions[eventName].lastMessage = args;\n\t\t\t\tsuper.emit.call(this, eventName, ...args);\n\t\t\t}\n\t\t});\n\n\t\tthis.ddpConnection._stream.on('reset', () => {\n\t\t\tsuper.emit.call(this, '__reconnect__');\n\t\t});\n\t}\n\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tset name(name) {\n\t\tcheck(name, String);\n\t\tthis._name = name;\n\t}\n\n\tget subscriptionName() {\n\t\treturn `stream-${this.name}`;\n\t}\n\n\tget useCollection() {\n\t\treturn this._useCollection;\n\t}\n\n\tset useCollection(useCollection) {\n\t\tcheck(useCollection, Boolean);\n\t\tthis._useCollection = useCollection;\n\t}\n\n\tstop(eventName) {\n\t\treturn this.subscriptions[eventName] && this.subscriptions[eventName].subscription && this.subscriptions[eventName].subscription.stop();\n\t}\n\n\tstopAll() {\n\t\tObject.keys(this.subscriptions).forEach(eventName => this.removeAllListeners(eventName));\n\t}\n\n\tunsubscribe(eventName) {\n\t\tdelete this.subscriptions[eventName];\n\t\tsuper.removeAllListeners(eventName);\n\t}\n\n\tsubscribe(eventName, args) {\n\t\tif (this.subscriptions[eventName]) {\n\t\t\treturn;\n\t\t}\n\t\tconst subscription = Tracker.nonreactive(() => this.ddpConnection.subscribe(\n\t\t\tthis.subscriptionName,\n\t\t\teventName,\n\t\t\t{ useCollection: this.useCollection, args },\n\t\t\t{ onStop: () => this.unsubscribe(eventName) }\n\t\t));\n\t\tthis.subscriptions[eventName] = { subscription };\n\t}\n\n\tonReconnect(fn) {\n\t\tif (typeof fn === 'function') {\n\t\t\tsuper.on('__reconnect__', fn);\n\t\t}\n\t}\n\n\tgetLastMessageFromEvent(eventName) {\n\t\tconst subscription = this.subscriptions[eventName];\n\t\tif (subscription && subscription.lastMessage) {\n\t\t\treturn subscription.lastMessage;\n\t\t}\n\t}\n\n\tremoveAllListeners(eventName) {\n\t\tsuper.removeAllListeners(eventName);\n\t\treturn this.stop(eventName);\n\t}\n\n\tremoveListener(eventName, ...args) {\n\t\tif (this.listenerCount(eventName) === 1) {\n\t\t\tthis.stop(eventName);\n\t\t}\n\t\tsuper.removeListener(eventName, ...args);\n\t}\n\n\ton(eventName, ...args) {\n\t\tcheck(eventName, NonEmptyString);\n\n\t\tconst callback = args.pop();\n\t\tcheck(callback, Function);\n\n\t\tthis.subscribe(eventName, args);\n\t\tsuper.on(eventName, callback);\n\t}\n\n\tonce(eventName, ...args) {\n\t\tcheck(eventName, NonEmptyString);\n\n\t\tconst callback = args.pop();\n\t\tcheck(callback, Function);\n\n\t\tthis.subscribe(eventName, args);\n\n\t\tsuper.once(eventName, (...args) => {\n\t\t\tcallback(...args);\n\t\t\tif (this.listenerCount(eventName) === 0) {\n\t\t\t\treturn this.stop(eventName);\n\t\t\t}\n\t\t});\n\t}\n\n\temit(...args) {\n\t\tthis.ddpConnection.call(this.subscriptionName, ...args);\n\t}\n};\n"]}}]