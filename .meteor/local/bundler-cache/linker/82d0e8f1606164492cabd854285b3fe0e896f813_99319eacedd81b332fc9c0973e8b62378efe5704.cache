[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nBlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nmoment = Package['momentjs:moment'].moment;\nRestivus = Package['nimble:restivus'].Restivus;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nSyncedCron = Package['percolate:synced-cron'].SyncedCron;\nlodash = Package['erasaur:meteor-lodash'].lodash;\n_ = Package['erasaur:meteor-lodash']._;\nNpmModuleBcrypt = Package['npm-bcrypt'].NpmModuleBcrypt;\nEmail = Package.email.Email;\nEmailInternals = Package.email.EmailInternals;\nTemplate = Package['meteorhacks:ssr'].Template;\nSSR = Package['meteorhacks:ssr'].SSR;\nTwilio = Package['abhiaiyer:meteor-twilio'].Twilio;\nemojione = Package['emojione:emojione'].emojione;\nMeteorEmoji = Package['georgemccann:meteor-emoji-picker'].MeteorEmoji;\nTabular = Package['aldeed:tabular'].Tabular;\nUserStatus = Package['mizzao:user-status'].UserStatus;\nInstanceStatus = Package['konecty:multiple-instances-status'].InstanceStatus;\nNpmModuleMongodb = Package['npm-mongo'].NpmModuleMongodb;\nNpmModuleMongodbVersion = Package['npm-mongo'].NpmModuleMongodbVersion;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"groupMessenger\":{\"groupMessage.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/api/groupMessenger/groupMessage.js                                             //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.export({\n  GroupMessage: () => GroupMessage\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst GroupMessage = new Mongo.Collection('groupMessage');\n\nif (Meteor.isServer) {\n  Meteor.publish('groupMessage', function () {\n    return GroupMessage.find();\n  });\n}\n\nMeteor.methods({\n  \"groupMessage.insert\"(name, users) {\n    const uid = GroupMessage.insert({\n      name: name,\n      users: users,\n      options: {},\n      created_at: moment().valueOf()\n    });\n    return uid;\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"messages\":{\"messages.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/api/messages/messages.js                                                       //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.export({\n  Message: () => Message\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst Message = new Mongo.Collection('message');\n\nif (Meteor.isServer) {\n  Meteor.publish('messages', function () {\n    return Message.find();\n  });\n}\n\nMeteor.methods({\n  \"message.insert\"(sid, rid, message, type, group) {\n    const uid = Message.insert({\n      sid: sid,\n      rid: rid,\n      group: group,\n      message: message,\n      viewed: false,\n      type: type,\n      // last_login:moment().valueOf(),\n      created_at: moment().valueOf()\n    });\n    return uid;\n  },\n\n  \"message.remove\"(messageId) {\n    return Message.remove(messageId);\n  },\n\n  \"message.update\"(messageId, update) {\n    return Message.update(messageId, {\n      $set: update\n    });\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"user\":{\"user.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/api/user/user.js                                                               //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.export({\n  User: () => User\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nconst User = new Mongo.Collection('user');\n\nif (Meteor.isServer) {\n  Meteor.publish('users', function () {\n    return User.find();\n  });\n}\n\nMeteor.methods({\n  \"user.insert\"(name, lastName, password, phone, email) {\n    const uid = User.insert({\n      name: name,\n      lastName: lastName,\n      password: password,\n      phone: phone,\n      email: email,\n      created_at: moment().valueOf(),\n      last_login: moment().valueOf()\n    });\n    return uid;\n  },\n\n  \"user.remove\"(userId) {\n    return User.remove(userId);\n  },\n\n  \"user.update\"(userId, update) {\n    return User.update(userId, {\n      $set: update\n    });\n  },\n\n  \"user.changePassword\"(userId, oldPassword, newPassword) {\n    var user = User.findOne({\n      _id: userId,\n      password: oldPassword\n    });\n\n    if (user) {\n      return User.update(userId, {\n        $set: {\n          password: newPassword\n        }\n      });\n    }\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"startup\":{\"email\":{\"index.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/startup/email/index.js                                                         //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nprocess.env.MAIL_URL = 'smtps://elisavetar638@gmail.com:ELISAVET1311@smtp.gmail.com:465';\nMeteor.methods({\n  \"email.send\"(to, subject, text) {\n    Email.send({\n      from: \"from@mailinator.com\",\n      to: to,\n      subject: subject,\n      text: text\n    });\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"rest\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/startup/rest/index.js                                                          //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nlet User;\nmodule.link(\"/imports/api/user/user.js\", {\n  User(v) {\n    User = v;\n  }\n\n}, 0);\nvar Api = new Restivus({\n  useDefaultAuth: false,\n  prettyJson: false,\n  enableCors: true\n});\nApi.addRoute('test', {\n  get: function (req, res) {\n    var name = this.bodyParams.name;\n    var name1 = User.findOne({\n      name: name\n    });\n    var userId = this.queryParams.userId;\n    return {\n      status: \"OK\",\n      name: this.queryParams.name\n    };\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// imports/startup/server/index.js                                                        //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.link(\"/imports/api/user/user.js\");\nmodule.link(\"/imports/api/messages/messages.js\");\nmodule.link(\"/imports/api/groupMessenger/groupMessage.js\");\nlet User;\nmodule.link(\"/imports/api/user/user.js\", {\n  User(v) {\n    User = v;\n  }\n\n}, 0);\nlet Message;\nmodule.link(\"/imports/api/messages/messages.js\", {\n  Message(v) {\n    Message = v;\n  }\n\n}, 1);\nMeteor.methods({\n  Login(name, password, country, phone, email) {\n    var user = User.findOne({\n      name: name,\n      password: password,\n      phone: phone,\n      email: email\n    });\n    if (user) return user._id;\n    return false;\n  }\n\n});\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                        //\n// server/main.js                                                                         //\n//                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                          //\nmodule.link(\"/imports/startup/server\");\nmodule.link(\"/imports/startup/rest\");\nmodule.link(\"/imports/startup/email\");\nmodule.link(\"/imports/startup/files\");\n////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"fc17aa03b92b966194e0d7e465c64841841ea656","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/groupMessenger/groupMessage.js","imports/api/messages/messages.js","imports/api/user/user.js","imports/startup/email/index.js","imports/startup/rest/index.js","imports/startup/server/index.js","server/main.js"],"names":["module","export","GroupMessage","Meteor","link","v","Mongo","Collection","isServer","publish","find","methods","name","users","uid","insert","options","created_at","moment","valueOf","Message","sid","rid","message","type","group","viewed","messageId","remove","update","$set","User","lastName","password","phone","email","last_login","userId","oldPassword","newPassword","user","findOne","_id","process","env","MAIL_URL","to","subject","text","Email","send","from","Api","Restivus","useDefaultAuth","prettyJson","enableCors","addRoute","get","req","res","bodyParams","name1","queryParams","status","Login","country"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\n\r\nexport const GroupMessage = new Mongo.Collection('groupMessage');\r\n\r\nif (Meteor.isServer){\r\n  Meteor.publish('groupMessage',function(){\r\n    return GroupMessage.find();\r\n  })\r\n}\r\n\r\nMeteor.methods({\r\n  \"groupMessage.insert\"(name,users){\r\n    const uid = GroupMessage.insert({\r\n      name:name,\r\n      users : users,\r\n      options : {},\r\n      created_at:moment().valueOf()\r\n    });\r\n    return uid;\r\n  }\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nexport const Message = new Mongo.Collection('message');\r\nif (Meteor.isServer){\r\n  Meteor.publish('messages',function(){\r\n    return Message.find();\r\n  })\r\n}\r\n\r\nMeteor.methods({\r\n  \"message.insert\"(sid,rid,message,type,group){\r\n    const uid = Message.insert({\r\n      sid:sid,\r\n      rid:rid,\r\n      group:group,\r\n      message : message,\r\n      viewed : false,\r\n      type:type,\r\n      // last_login:moment().valueOf(),\r\n      created_at:moment().valueOf()\r\n    });\r\n    return uid;\r\n  },\r\n  \"message.remove\"(messageId){\r\n    return Message.remove(messageId);\r\n  },\r\n  \"message.update\"(messageId,update){\r\n    return Message.update(messageId,{$set:update});\r\n  }\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nexport const User = new Mongo.Collection('user');\r\nif (Meteor.isServer){\r\n  Meteor.publish('users',function(){\r\n    return User.find();\r\n  })\r\n}\r\n\r\nMeteor.methods({\r\n  \"user.insert\"(name,lastName,password,phone,email){\r\n    const uid = User.insert({\r\n      name:name,\r\n      lastName:lastName,\r\n      password:password,\r\n      phone : phone,\r\n      email : email,\r\n      created_at:moment().valueOf(),\r\n      last_login:moment().valueOf()\r\n    });\r\n    return uid;\r\n  },\r\n  \"user.remove\"(userId){\r\n    return User.remove(userId);\r\n  },\r\n  \"user.update\"(userId,update){\r\n    return User.update(userId,{$set:update});\r\n  },\r\n  \"user.changePassword\"(userId,oldPassword,newPassword){\r\n    var user = User.findOne({\r\n      _id : userId,\r\n      password : oldPassword\r\n    });\r\n    if (user) {\r\n      return User.update(userId,{$set:{\r\n        password:newPassword\r\n      }});\r\n    }\r\n  }\r\n});\r\n","process.env.MAIL_URL = 'smtps://elisavetar638@gmail.com:ELISAVET1311@smtp.gmail.com:465';\r\n\r\nMeteor.methods({\r\n  \"email.send\"(to,subject, text){\r\n    Email.send({\r\n    from: \"from@mailinator.com\",\r\n    to: to,\r\n    subject: subject,\r\n    text: text\r\n    });\r\n  }\r\n});\r\n","import { User } from '/imports/api/user/user.js';\r\n\r\nvar Api = new Restivus({\r\n  useDefaultAuth: false,\r\n  prettyJson: false,\r\n  enableCors : true\r\n});\r\n\r\nApi.addRoute('test', {\r\n  get : function(req, res){\r\n    var name = this.bodyParams.name;\r\n    var name1 = User.findOne({name:name});\r\n    var userId = this.queryParams.userId;\r\n    return {status : \"OK\", name: this.queryParams.name};\r\n  }\r\n});\r\n","import '/imports/api/user/user.js';\r\nimport '/imports/api/messages/messages.js';\r\nimport '/imports/api/groupMessenger/groupMessage.js';\r\n\r\nimport { User } from '/imports/api/user/user.js';\r\nimport { Message } from '/imports/api/messages/messages.js';\r\n\r\nMeteor.methods({\r\nLogin(name,password,country,phone,email){\r\n  var user = User.findOne({\r\n    name : name,\r\n    password : password,\r\n    phone : phone,\r\n    email :email\r\n  });\r\n  if (user) return user._id;\r\n  return false;\r\n}\r\n});\r\n","import \"/imports/startup/server\";\nimport \"/imports/startup/rest\";\nimport \"/imports/startup/email\";\nimport \"/imports/startup/files\";\n"]}}]